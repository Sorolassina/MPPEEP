# Script pour configurer les DNS Cloudflare
# N√©cessite : API Token Cloudflare

param(
    [Parameter(Mandatory=$true)]
    [string]$Domain,
    
    [Parameter(Mandatory=$true)]
    [string]$ServerIP,
    
    [string]$ApiToken,
    [string]$ZoneId
)

. "$PSScriptRoot\..\config\environments.ps1"
$config = Get-DeployConfig

# R√©cup√©rer les credentials Cloudflare
if (-not $ApiToken) {
    $ApiToken = Read-Host "API Token Cloudflare"
}

if (-not $ZoneId) {
    $ZoneId = $config.cloudflare.zone_id
    
    if (-not $ZoneId) {
        $ZoneId = Read-Host "Zone ID Cloudflare"
    }
}

Write-Host "`n‚òÅÔ∏è  Configuration DNS Cloudflare..." -ForegroundColor Cyan
Write-Host "   Domaine   : $Domain"
Write-Host "   IP Serveur: $ServerIP"
Write-Host ""

# Headers pour l'API Cloudflare
$headers = @{
    "Authorization" = "Bearer $ApiToken"
    "Content-Type" = "application/json"
}

# URL de l'API
$apiUrl = "https://api.cloudflare.com/v4/zones/$ZoneId/dns_records"

# Fonction pour cr√©er/mettre √† jour un enregistrement DNS
function Set-CloudflareDNS {
    param(
        [string]$Name,
        [string]$Type,
        [string]$Content,
        [bool]$Proxied = $true
    )
    
    Write-Host "   üìù Configuration : $Name ($Type) ‚Üí $Content" -ForegroundColor Cyan
    
    # V√©rifier si l'enregistrement existe
    try {
        $existingRecords = Invoke-RestMethod -Uri "$apiUrl?name=$Name&type=$Type" -Headers $headers -Method Get
        
        if ($existingRecords.result.Count -gt 0) {
            # Mettre √† jour
            $recordId = $existingRecords.result[0].id
            
            $body = @{
                type = $Type
                name = $Name
                content = $Content
                ttl = 1  # Auto
                proxied = $Proxied
            } | ConvertTo-Json
            
            $result = Invoke-RestMethod -Uri "$apiUrl/$recordId" -Headers $headers -Method Put -Body $body
            
            if ($result.success) {
                Write-Host "      ‚úÖ Enregistrement mis √† jour" -ForegroundColor Green
            }
        }
        else {
            # Cr√©er
            $body = @{
                type = $Type
                name = $Name
                content = $Content
                ttl = 1
                proxied = $Proxied
            } | ConvertTo-Json
            
            $result = Invoke-RestMethod -Uri $apiUrl -Headers $headers -Method Post -Body $body
            
            if ($result.success) {
                Write-Host "      ‚úÖ Enregistrement cr√©√©" -ForegroundColor Green
            }
        }
    }
    catch {
        Write-Host "      ‚ùå Erreur : $_" -ForegroundColor Red
    }
}

# Cr√©er les enregistrements DNS
Write-Host "`nüìã Cr√©ation des enregistrements DNS..." -ForegroundColor Cyan

# A Record pour le domaine principal
Set-CloudflareDNS -Name $Domain -Type "A" -Content $ServerIP -Proxied $true

# A Record pour www
Set-CloudflareDNS -Name "www.$Domain" -Type "A" -Content $ServerIP -Proxied $true

# A Record pour api (si sous-domaine)
$createApiSubdomain = Read-Host "`nCr√©er un sous-domaine api.$Domain ? (oui/non)"
if ($createApiSubdomain -eq "oui") {
    Set-CloudflareDNS -Name "api.$Domain" -Type "A" -Content $ServerIP -Proxied $true
}

Write-Host "`n‚úÖ Configuration DNS termin√©e !" -ForegroundColor Green
Write-Host ""
Write-Host "üåê Domaines configur√©s :" -ForegroundColor Cyan
Write-Host "   - https://$Domain"
Write-Host "   - https://www.$Domain"

if ($createApiSubdomain -eq "oui") {
    Write-Host "   - https://api.$Domain"
}

Write-Host ""
Write-Host "‚ÑπÔ∏è  Note : La propagation DNS peut prendre quelques minutes" -ForegroundColor Yellow
Write-Host ""


# app/api/v1/endpoints/budget.py
"""
Endpoints pour la gestion budg√©taire et les conf√©rences budg√©taires
"""

import io
import re
from collections import defaultdict
from datetime import date, datetime
from decimal import Decimal
from io import BytesIO
from pathlib import Path

import pandas as pd
from fastapi import APIRouter, Depends, File, Form, HTTPException, Request, UploadFile
from fastapi.responses import FileResponse, HTMLResponse, RedirectResponse, StreamingResponse
from openpyxl import Workbook
from openpyxl.styles import Alignment, Border, Font, PatternFill, Side
from sqlmodel import Session, delete, func, select

from app.api.v1.endpoints.auth import get_current_user
from app.core.logging_config import get_logger
from app.db.session import get_session
from app.models.budget import (
    ActionBudgetaire,
    Activite,
    ActiviteBudgetaire,
    DocumentBudget,
    DocumentLigneBudgetaire,
    FicheTechnique,
    HistoriqueBudget,
    LigneBudgetaire,
    LigneBudgetaireDetail,
    NatureDepense,
    ServiceBeneficiaire,
    SigobeChargement,
    SigobeExecution,
    SigobeKpi,
)
from app.models.personnel import Direction, Programme
from app.models.user import User
from app.services.activity_service import ActivityService
from app.services.fiche_technique_service import FicheTechniqueService
from app.services.sigobe_service import SigobeService
from app.templates import get_template_context, templates

logger = get_logger(__name__)
router = APIRouter()


# ============================================
# DASHBOARD BUDG√âTAIRE
# ============================================


@router.get("/", response_class=HTMLResponse, name="budget_home")
def budget_home(
    request: Request,
    annee: int | None = None,
    programme_id: int | None = None,
    trimestre: int | None = None,
    session: Session = Depends(get_session),
    current_user: User = Depends(get_current_user),
):
    """
    Dashboard principal du suivi budg√©taire
    Utilise les donn√©es SIGOBE pour les KPIs
    """
    # D√©terminer l'ann√©e √† utiliser
    if not annee:
        # Si pas d'ann√©e sp√©cifi√©e, chercher la derni√®re ann√©e disponible dans SIGOBE
        dernier_chargement_any = session.exec(
            select(SigobeChargement).order_by(SigobeChargement.annee.desc(), SigobeChargement.date_chargement.desc())
        ).first()

        if dernier_chargement_any:
            annee = dernier_chargement_any.annee
            logger.info(f"üìÖ Aucune ann√©e sp√©cifi√©e, utilisation de la derni√®re ann√©e SIGOBE : {annee}")
        else:
            annee = datetime.now().year
            logger.warning(f"‚ö†Ô∏è Aucune donn√©e SIGOBE trouv√©e, utilisation de l'ann√©e courante : {annee}")

    # R√©cup√©rer le dernier chargement SIGOBE pour cette ann√©e
    chargement_query = select(SigobeChargement).where(SigobeChargement.annee == annee)
    if trimestre:
        chargement_query = chargement_query.where(SigobeChargement.trimestre == trimestre)

    dernier_chargement = session.exec(chargement_query.order_by(SigobeChargement.date_chargement.desc())).first()

    logger.info(
        f"üîç Dashboard SIGOBE - Ann√©e: {annee}, Chargement: {dernier_chargement.id if dernier_chargement else 'Aucun'}"
    )

    # KPIs par d√©faut
    budget_vote_total = 0
    budget_actuel_total = 0
    engagements_total = 0
    mandats_emis_total = 0
    mandats_vises_total = 0
    mandats_pec_total = 0
    disponible_eng_total = 0
    taux_engagement = 0
    taux_mandatement_emis = 0
    taux_mandatement_vise = 0
    taux_mandatement_pec = 0
    taux_execution_global = 0

    exec_par_programme = {}
    exec_par_nature = {}

    if dernier_chargement:
        # R√©cup√©rer les KPIs globaux
        kpi_global = session.exec(
            select(SigobeKpi)
            .where(SigobeKpi.chargement_id == dernier_chargement.id)
            .where(SigobeKpi.dimension == "global")
        ).first()

        if kpi_global:
            budget_vote_total = float(kpi_global.budget_vote_total or 0)
            budget_actuel_total = float(kpi_global.budget_actuel_total or 0)
            engagements_total = float(kpi_global.engagements_total or 0)
            mandats_emis_total = float(kpi_global.mandats_total or 0)

            # R√©cup√©rer les totaux d√©taill√©s depuis SigobeExecution
            executions_sigobe = session.exec(
                select(SigobeExecution).where(SigobeExecution.chargement_id == dernier_chargement.id)
            ).all()

            mandats_vises_total = sum(float(e.mandats_vise_cf or 0) for e in executions_sigobe)
            mandats_pec_total = sum(float(e.mandats_pec or 0) for e in executions_sigobe)
            disponible_eng_total = sum(float(e.disponible_eng or 0) for e in executions_sigobe)

            # Calculer les taux selon vos formules DAX
            # _Tx_Eng : DIVIDE(Engagements, Budget_Actuel)
            budg_select = budget_actuel_total or budget_vote_total
            taux_engagement = (engagements_total / budg_select * 100) if budg_select > 0 else 0

            # _Tx_Mandat_Emis : DIVIDE(Mandats_Emis, Engagements)
            taux_mandatement_emis = (mandats_emis_total / engagements_total * 100) if engagements_total > 0 else 0

            # _Tx_Mandat_Vise : DIVIDE(Mandats_Vise, Mandats_PEC)
            taux_mandatement_vise = (mandats_vises_total / mandats_pec_total * 100) if mandats_pec_total > 0 else 0

            # _Tx_Mandat_PEC : DIVIDE(Mandats_PEC, Mandats_Emis)
            taux_mandatement_pec = (mandats_pec_total / mandats_emis_total * 100) if mandats_emis_total > 0 else 0

            # _Tx_Exe.Global : DIVIDE(Disponible, Budget_Actuel)
            taux_execution_global = (disponible_eng_total / budg_select * 100) if budg_select > 0 else 0

        # R√©cup√©rer les KPIs par programme
        if dernier_chargement:
            kpis_programmes = session.exec(
                select(SigobeKpi)
                .where(SigobeKpi.chargement_id == dernier_chargement.id)
                .where(SigobeKpi.dimension == "programme")
            ).all()

            for kpi in kpis_programmes:
                # Utiliser le libell√© comme cl√© si le code est vide
                code = kpi.dimension_code or kpi.dimension_libelle or "INCONNU"
                exec_par_programme[code] = {
                    "libelle": kpi.dimension_libelle or code,
                    "budget": float(kpi.budget_actuel_total or 0),
                    "engagements": float(kpi.engagements_total or 0),
                    "mandats": float(kpi.mandats_total or 0),
                    "taux": float(kpi.taux_execution or 0),
                }

            # R√©cup√©rer les KPIs par nature
            kpis_natures = session.exec(
                select(SigobeKpi)
                .where(SigobeKpi.chargement_id == dernier_chargement.id)
                .where(SigobeKpi.dimension == "nature")
            ).all()

            for kpi in kpis_natures:
                # Utiliser le libell√© comme cl√© si le code est vide
                code = kpi.dimension_code or kpi.dimension_libelle or "INCONNU"
                exec_par_nature[code] = {
                    "libelle": kpi.dimension_libelle or code,
                    "budget": float(kpi.budget_actuel_total or 0),
                    "engagements": float(kpi.engagements_total or 0),
                    "mandats": float(kpi.mandats_total or 0),
                    "taux": float(kpi.taux_execution or 0),
                }

    # R√©cup√©rer les programmes pour les filtres
    programmes = session.exec(select(Programme).where(Programme.actif)).all()

    # R√©cup√©rer les ann√©es disponibles dans SIGOBE
    annees_sigobe_query = select(SigobeChargement.annee).distinct().order_by(SigobeChargement.annee.desc())
    annees_sigobe = [a for a in session.exec(annees_sigobe_query).all()]

    # Calculer les variations par rapport √† l'ann√©e pr√©c√©dente
    variation_engagement = None
    variation_mandatement_vise = None
    variation_mandatement_pec = None
    variation_execution_global = None
    taux_engagement_n1 = None
    taux_mandatement_vise_n1 = None
    taux_mandatement_pec_n1 = None
    taux_execution_global_n1 = None
    budget_actuel_n1 = 0
    budget_vote_n1 = 0
    engagements_n1 = 0

    if annee and (annee - 1) in annees_sigobe:
        # R√©cup√©rer le dernier chargement de l'ann√©e N-1
        chargement_n1_query = select(SigobeChargement).where(SigobeChargement.annee == (annee - 1))
        if trimestre:
            chargement_n1_query = chargement_n1_query.where(SigobeChargement.trimestre == trimestre)

        chargement_n1 = session.exec(chargement_n1_query.order_by(SigobeChargement.date_chargement.desc())).first()

        if chargement_n1:
            # R√©cup√©rer les KPIs globaux de N-1
            kpi_global_n1 = session.exec(
                select(SigobeKpi)
                .where(SigobeKpi.chargement_id == chargement_n1.id)
                .where(SigobeKpi.dimension == "global")
            ).first()

            if kpi_global_n1:
                # R√©cup√©rer les donn√©es brutes de N-1 pour appliquer les M√äMES formules que N
                executions_sigobe_n1 = session.exec(
                    select(SigobeExecution).where(SigobeExecution.chargement_id == chargement_n1.id)
                ).all()

                budget_actuel_n1 = float(kpi_global_n1.budget_actuel_total or 0)
                budget_vote_n1 = float(kpi_global_n1.budget_vote_total or 0)
                engagements_n1 = float(kpi_global_n1.engagements_total or 0)
                mandats_emis_n1 = float(kpi_global_n1.mandats_total or 0)

                mandats_vises_n1 = sum(float(e.mandats_vise_cf or 0) for e in executions_sigobe_n1)
                mandats_pec_n1 = sum(float(e.mandats_pec or 0) for e in executions_sigobe_n1)
                disponible_eng_n1 = sum(float(e.disponible_eng or 0) for e in executions_sigobe_n1)

                # Calculer les taux N-1 avec les M√äMES formules que N
                budg_select_n1 = budget_actuel_n1 or budget_vote_n1
                taux_engagement_n1 = (engagements_n1 / budg_select_n1 * 100) if budg_select_n1 > 0 else 0
                taux_mandatement_vise_n1 = (mandats_vises_n1 / mandats_pec_n1 * 100) if mandats_pec_n1 > 0 else 0
                taux_mandatement_pec_n1 = (mandats_pec_n1 / mandats_emis_n1 * 100) if mandats_emis_n1 > 0 else 0
                taux_execution_global_n1 = (disponible_eng_n1 / budg_select_n1 * 100) if budg_select_n1 > 0 else 0

                # Calculer les variations (diff√©rence absolue en points de pourcentage)
                variation_engagement = taux_engagement - taux_engagement_n1
                variation_mandatement_vise = taux_mandatement_vise - taux_mandatement_vise_n1
                variation_mandatement_pec = taux_mandatement_pec - taux_mandatement_pec_n1
                variation_execution_global = taux_execution_global - taux_execution_global_n1

    return templates.TemplateResponse(
        "pages/budget_dashboard.html",
        get_template_context(
            request,
            annee=annee,
            trimestre=trimestre,
            annees_disponibles=annees_sigobe,
            budget_vote_total=budget_vote_total,
            budget_actuel_total=budget_actuel_total,
            engagements_total=engagements_total,
            mandats_emis_total=mandats_emis_total,
            mandats_vises_total=mandats_vises_total,
            mandats_pec_total=mandats_pec_total,
            disponible_eng_total=disponible_eng_total,
            taux_engagement=round(taux_engagement, 2),
            taux_mandatement_emis=round(taux_mandatement_emis, 2),
            taux_mandatement_vise=round(taux_mandatement_vise, 2),
            taux_mandatement_pec=round(taux_mandatement_pec, 2),
            taux_execution_global=round(taux_execution_global, 2),
            exec_par_programme=exec_par_programme,
            exec_par_nature=exec_par_nature,
            programmes=programmes,
            dernier_chargement=dernier_chargement,
            # Variations N vs N-1
            variation_engagement=round(variation_engagement, 2) if variation_engagement is not None else None,
            variation_mandatement_vise=round(variation_mandatement_vise, 2)
            if variation_mandatement_vise is not None
            else None,
            variation_mandatement_pec=round(variation_mandatement_pec, 2)
            if variation_mandatement_pec is not None
            else None,
            variation_execution_global=round(variation_execution_global, 2)
            if variation_execution_global is not None
            else None,
            taux_engagement_n1=round(taux_engagement_n1, 2) if taux_engagement_n1 is not None else None,
            taux_mandatement_vise_n1=round(taux_mandatement_vise_n1, 2)
            if taux_mandatement_vise_n1 is not None
            else None,
            taux_mandatement_pec_n1=round(taux_mandatement_pec_n1, 2) if taux_mandatement_pec_n1 is not None else None,
            taux_execution_global_n1=round(taux_execution_global_n1, 2)
            if taux_execution_global_n1 is not None
            else None,
            budget_actuel_n1=budget_actuel_n1,
            budget_vote_n1=budget_vote_n1,
            engagements_n1=engagements_n1,
            current_user=current_user,
        ),
    )


# ============================================
# PAGE D'AIDE
# ============================================


@router.get("/aide", response_class=HTMLResponse, name="aide_budget")
def aide_budget(request: Request):
    """Page d'aide pour le module Budget"""
    return templates.TemplateResponse("pages/aide_budget.html", get_template_context(request))


# ============================================
# FICHES TECHNIQUES
# ============================================


@router.get("/fiches", response_class=HTMLResponse, name="budget_fiches")
def budget_fiches(
    request: Request,
    annee: int | None = None,
):
    """Redirection vers la version hi√©rarchique des fiches"""
    # Rediriger vers la nouvelle version hi√©rarchique
    if annee:
        return RedirectResponse(
            url=str(request.url_for("budget_fiches_hierarchique")) + f"?annee={annee}", status_code=303
        )
    else:
        return RedirectResponse(
            url=str(request.url_for("budget_fiches_hierarchique")) + "?annee=toutes", status_code=303
        )


@router.get("/fiches/hierarchique", response_class=HTMLResponse, name="budget_fiches_hierarchique")
def budget_fiches_hierarchique(
    request: Request,
    annee: str | None = None,
    programme_id: str | None = None,
    direction_id: str | None = None,
    session: Session = Depends(get_session),
    current_user: User = Depends(get_current_user),
):
    """Liste des fiches techniques avec structure hi√©rarchique"""
    # Construire la requ√™te avec filtres
    query = select(FicheTechnique).where(FicheTechnique.actif)

    # Filtre par ann√©e
    if annee and annee != "toutes":
        query = query.where(FicheTechnique.annee_budget == int(annee))

    # Filtre par programme
    if programme_id and programme_id != "tous":
        query = query.where(FicheTechnique.programme_id == int(programme_id))

    # Filtre par direction
    if direction_id and direction_id != "toutes":
        query = query.where(FicheTechnique.direction_id == int(direction_id))

    fiches = session.exec(query.order_by(FicheTechnique.created_at.desc())).all()

    # Valeurs s√©lectionn√©es pour l'affichage
    annee_selectionnee = annee if annee else "toutes"
    programme_selectionne = programme_id if programme_id else "tous"
    direction_selectionnee = direction_id if direction_id else "toutes"

    # R√©f√©rentiels
    programmes_dict = {p.id: p for p in session.exec(select(Programme)).all()}
    directions_dict = {d.id: d for d in session.exec(select(Direction)).all()}

    # Listes pour les filtres
    programmes_list = session.exec(select(Programme).where(Programme.actif).order_by(Programme.code)).all()
    directions_list = session.exec(select(Direction).where(Direction.actif).order_by(Direction.code)).all()

    # Ann√©es disponibles
    annees_disponibles = session.exec(
        select(FicheTechnique.annee_budget).distinct().order_by(FicheTechnique.annee_budget.desc())
    ).all()

    return templates.TemplateResponse(
        "pages/budget_fiches_hierarchique.html",
        get_template_context(
            request,
            annee=annee_selectionnee,
            programme_id=programme_selectionne,
            direction_id=direction_selectionnee,
            fiches=fiches,
            programmes=programmes_dict,
            directions=directions_dict,
            programmes_list=programmes_list,
            directions_list=directions_list,
            annees_disponibles=annees_disponibles,
            current_user=current_user,
        ),
    )


@router.get("/fiches/nouveau", response_class=HTMLResponse, name="budget_fiche_nouveau")
def budget_fiche_nouveau(
    request: Request, session: Session = Depends(get_session), current_user: User = Depends(get_current_user)
):
    """Formulaire de cr√©ation de fiche technique"""
    programmes = session.exec(select(Programme).where(Programme.actif).order_by(Programme.code)).all()
    directions = session.exec(select(Direction).where(Direction.actif).order_by(Direction.libelle)).all()
    natures = session.exec(select(NatureDepense).where(NatureDepense.actif).order_by(NatureDepense.code)).all()
    activites = session.exec(select(Activite).where(Activite.actif).order_by(Activite.code)).all()

    return templates.TemplateResponse(
        "pages/budget_fiche_form.html",
        get_template_context(
            request,
            mode="create",
            programmes=programmes,
            directions=directions,
            natures=natures,
            activites=activites,
            current_user=current_user,
        ),
    )


@router.get("/fiches/{fiche_id}/edit", response_class=HTMLResponse, name="budget_fiche_edit")
def budget_fiche_edit(
    request: Request,
    fiche_id: int,
):
    """Redirection vers la structure hi√©rarchique pour modifier les lignes"""
    # Une fiche technique ne se modifie pas directement, on modifie ses lignes via la structure
    return RedirectResponse(url=str(request.url_for("budget_fiche_structure", fiche_id=fiche_id)), status_code=303)


@router.get("/fiches/{fiche_id}", response_class=HTMLResponse, name="budget_fiche_detail")
def budget_fiche_detail(
    fiche_id: int,
    request: Request,
    session: Session = Depends(get_session),
    current_user: User = Depends(get_current_user),
):
    """D√©tail d'une fiche technique"""
    fiche = session.get(FicheTechnique, fiche_id)
    if not fiche:
        raise HTTPException(404, "Fiche technique non trouv√©e")

    # Lignes budg√©taires
    lignes = session.exec(
        select(LigneBudgetaire)
        .where(LigneBudgetaire.fiche_technique_id == fiche_id)
        .where(LigneBudgetaire.actif)
        .order_by(LigneBudgetaire.ordre)
    ).all()

    # Documents
    documents = session.exec(
        select(DocumentBudget)
        .where(DocumentBudget.fiche_technique_id == fiche_id)
        .where(DocumentBudget.actif)
        .order_by(DocumentBudget.uploaded_at.desc())
    ).all()

    # Historique
    historique = session.exec(
        select(HistoriqueBudget)
        .where(HistoriqueBudget.fiche_technique_id == fiche_id)
        .order_by(HistoriqueBudget.date_action.desc())
    ).all()

    # R√©f√©rentiels
    programme = session.get(Programme, fiche.programme_id)
    direction = session.get(Direction, fiche.direction_id) if fiche.direction_id else None
    natures = {n.id: n for n in session.exec(select(NatureDepense)).all()}
    activites = {a.id: a for a in session.exec(select(Activite)).all()}

    return templates.TemplateResponse(
        "pages/budget_fiche_detail.html",
        get_template_context(
            request,
            fiche=fiche,
            lignes=lignes,
            documents=documents,
            historique=historique,
            programme=programme,
            direction=direction,
            natures=natures,
            activites=activites,
            current_user=current_user,
        ),
    )


# ============================================
# API - CRUD FICHES TECHNIQUES
# ============================================


@router.post("/api/fiches", name="api_creer_fiche_vide")
async def api_create_fiche(
    annee_budget: int = Form(...),
    programme_id: int = Form(...),
    direction_id: int | None = Form(None),
    budget_anterieur: float = Form(0),
    enveloppe_demandee: float = Form(...),
    complement_demande: float = Form(0),
    engagement_etat: float = Form(0),
    financement_bailleurs: float = Form(0),
    note_justificative: str | None = Form(None),
    session: Session = Depends(get_session),
    current_user: User = Depends(get_current_user),
):
    """Cr√©er une nouvelle fiche technique"""
    # G√©n√©rer num√©ro de fiche
    count = session.exec(select(func.count(FicheTechnique.id)).where(FicheTechnique.annee_budget == annee_budget)).one()

    prog = session.get(Programme, programme_id)
    numero_fiche = f"FT-{annee_budget}-{prog.code}-{count + 1:03d}"

    # Calculer le total
    budget_total = (
        Decimal(str(enveloppe_demandee))
        + Decimal(str(complement_demande))
        + Decimal(str(engagement_etat))
        + Decimal(str(financement_bailleurs))
    )

    fiche = FicheTechnique(
        numero_fiche=numero_fiche,
        annee_budget=annee_budget,
        programme_id=programme_id,
        direction_id=direction_id,
        budget_anterieur=Decimal(str(budget_anterieur)),
        enveloppe_demandee=Decimal(str(enveloppe_demandee)),
        complement_demande=Decimal(str(complement_demande)),
        engagement_etat=Decimal(str(engagement_etat)),
        financement_bailleurs=Decimal(str(financement_bailleurs)),
        budget_total_demande=budget_total,
        note_justificative=note_justificative,
        created_by_user_id=current_user.id,
    )

    session.add(fiche)
    session.commit()
    session.refresh(fiche)

    # Historique
    hist = HistoriqueBudget(
        fiche_technique_id=fiche.id,
        action="Cr√©ation",
        nouveau_statut="Brouillon",
        montant_apres=budget_total,
        commentaire="Fiche technique cr√©√©e",
        user_id=current_user.id,
    )
    session.add(hist)
    session.commit()

    logger.info(f"‚úÖ Fiche technique cr√©√©e : {numero_fiche} par {current_user.email}")

    # Log activit√©
    ActivityService.log_user_activity(
        session=session,
        user=current_user,
        action_type="create",
        target_type="fiche_technique",
        description=f"Cr√©ation de la fiche technique {numero_fiche} - Budget {annee_budget}",
        target_id=fiche.id,
        icon="üìã",
    )

    return {"ok": True, "id": fiche.id, "numero": numero_fiche}


@router.delete("/api/fiches/{fiche_id}")
def api_delete_fiche(
    fiche_id: int, session: Session = Depends(get_session), current_user: User = Depends(get_current_user)
):
    """Supprimer une fiche technique et toute sa structure hi√©rarchique"""
    fiche = session.get(FicheTechnique, fiche_id)
    if not fiche:
        raise HTTPException(404, "Fiche non trouv√©e")

    try:
        # Supprimer dans l'ordre hi√©rarchique (du bas vers le haut)
        # 1. Supprimer les lignes budg√©taires
        session.exec(delete(LigneBudgetaireDetail).where(LigneBudgetaireDetail.fiche_technique_id == fiche_id))

        # 2. Supprimer les activit√©s
        session.exec(delete(ActiviteBudgetaire).where(ActiviteBudgetaire.fiche_technique_id == fiche_id))

        # 3. Supprimer les services
        session.exec(delete(ServiceBeneficiaire).where(ServiceBeneficiaire.fiche_technique_id == fiche_id))

        # 4. Supprimer les actions
        session.exec(delete(ActionBudgetaire).where(ActionBudgetaire.fiche_technique_id == fiche_id))

        # 5. Supprimer la fiche
        numero_fiche = fiche.numero_fiche
        session.delete(fiche)
        session.commit()

        logger.info(f"‚úÖ Fiche {numero_fiche} supprim√©e par {current_user.email}")

        # Log activit√©
        ActivityService.log_user_activity(
            session=session,
            user=current_user,
            action_type="delete",
            target_type="fiche_technique",
            description=f"Suppression de la fiche technique {numero_fiche}",
            target_id=fiche_id,
            icon="üóëÔ∏è",
        )

        return {"ok": True, "message": "Fiche supprim√©e avec succ√®s"}

    except Exception as e:
        session.rollback()
        logger.error(f"‚ùå Erreur suppression fiche {fiche_id}: {e}")
        raise HTTPException(500, f"Erreur lors de la suppression: {e!s}")


@router.post("/api/fiches/{fiche_id}/lignes")
def api_add_ligne(
    fiche_id: int,
    activite_id: int | None = Form(None),
    nature_depense_id: int = Form(...),
    libelle: str = Form(...),
    budget_n_moins_1: float = Form(0),
    budget_demande: float = Form(...),
    justification: str | None = Form(None),
    priorite: str = Form("Normale"),
    session: Session = Depends(get_session),
    current_user: User = Depends(get_current_user),
):
    """Ajouter une ligne budg√©taire √† une fiche"""
    fiche = session.get(FicheTechnique, fiche_id)
    if not fiche:
        raise HTTPException(404, "Fiche non trouv√©e")

    # Ordre = dernier + 1
    max_ordre = (
        session.exec(
            select(func.max(LigneBudgetaire.ordre)).where(LigneBudgetaire.fiche_technique_id == fiche_id)
        ).one()
        or 0
    )

    ligne = LigneBudgetaire(
        fiche_technique_id=fiche_id,
        activite_id=activite_id,
        nature_depense_id=nature_depense_id,
        libelle=libelle,
        budget_n_moins_1=Decimal(str(budget_n_moins_1)),
        budget_demande=Decimal(str(budget_demande)),
        justification=justification,
        priorite=priorite,
        ordre=max_ordre + 1,
    )

    session.add(ligne)
    session.commit()

    logger.info(f"‚úÖ Ligne budg√©taire ajout√©e √† fiche {fiche_id}")
    return {"ok": True, "id": ligne.id}


@router.put("/api/fiches/{fiche_id}/lignes/{ligne_id}")
def api_update_ligne(
    fiche_id: int,
    ligne_id: int,
    libelle: str | None = Form(None),
    budget_n_moins_1: float | None = Form(None),
    budget_demande: float | None = Form(None),
    budget_valide: float | None = Form(None),
    justification: str | None = Form(None),
    priorite: str | None = Form(None),
    session: Session = Depends(get_session),
    current_user: User = Depends(get_current_user),
):
    """Modifier une ligne budg√©taire"""
    ligne = session.get(LigneBudgetaire, ligne_id)
    if not ligne or ligne.fiche_technique_id != fiche_id:
        raise HTTPException(404, "Ligne non trouv√©e")

    if libelle:
        ligne.libelle = libelle
    if budget_n_moins_1 is not None:
        ligne.budget_n_moins_1 = Decimal(str(budget_n_moins_1))
    if budget_demande is not None:
        ligne.budget_demande = Decimal(str(budget_demande))
    if budget_valide is not None:
        ligne.budget_valide = Decimal(str(budget_valide))
    if justification:
        ligne.justification = justification
    if priorite:
        ligne.priorite = priorite

    ligne.updated_at = datetime.utcnow()
    session.add(ligne)
    session.commit()

    logger.info(f"‚úÖ Ligne {ligne_id} mise √† jour")
    return {"ok": True}


@router.delete("/api/fiches/{fiche_id}/lignes/{ligne_id}")
def api_delete_ligne(
    fiche_id: int,
    ligne_id: int,
    session: Session = Depends(get_session),
    current_user: User = Depends(get_current_user),
):
    """Supprimer une ligne budg√©taire"""
    ligne = session.get(LigneBudgetaire, ligne_id)
    if not ligne or ligne.fiche_technique_id != fiche_id:
        raise HTTPException(404, "Ligne non trouv√©e")

    ligne.actif = False
    session.add(ligne)
    session.commit()

    logger.info(f"‚úÖ Ligne {ligne_id} supprim√©e")
    return {"ok": True}


# ============================================
# UPLOAD DOCUMENTS
# ============================================


@router.get("/api/fiches/{fiche_id}/documents")
def api_get_documents_fiche(
    fiche_id: int, session: Session = Depends(get_session), current_user: User = Depends(get_current_user)
):
    """R√©cup√©rer la liste des documents d'une fiche technique"""
    fiche = session.get(FicheTechnique, fiche_id)
    if not fiche:
        raise HTTPException(404, "Fiche non trouv√©e")

    documents = session.exec(select(DocumentBudget).where(DocumentBudget.fiche_technique_id == fiche_id)).all()

    return {
        "ok": True,
        "documents": [
            {
                "id": doc.id,
                "nom_fichier": doc.nom_fichier,
                "filename": doc.nom_fichier,
                "description": doc.type_document,
                "taille_octets": doc.taille_octets,
                "created_at": doc.uploaded_at.isoformat() if doc.uploaded_at else None,
                "date_upload": doc.uploaded_at.isoformat() if doc.uploaded_at else None,
            }
            for doc in documents
        ],
    }


@router.post("/api/fiches/{fiche_id}/documents")
async def api_upload_document(
    fiche_id: int,
    fichier: UploadFile = File(...),
    description: str | None = Form(None),
    session: Session = Depends(get_session),
    current_user: User = Depends(get_current_user),
):
    """Uploader un document pour une fiche technique"""
    fiche = session.get(FicheTechnique, fiche_id)
    if not fiche:
        raise HTTPException(404, "Fiche non trouv√©e")

    # Cr√©er le dossier avec path_config
    from app.core.path_config import path_config

    relative_path = f"budget/fiches/{fiche_id}/{fichier.filename}"
    docs_dir = path_config.UPLOADS_DIR / "budget" / "fiches" / str(fiche_id)
    docs_dir.mkdir(parents=True, exist_ok=True)

    # Sauvegarder le fichier
    file_path = docs_dir / fichier.filename
    content = await fichier.read()

    with open(file_path, "wb") as f:
        f.write(content)

    # Enregistrer en BDD avec URL g√©n√©r√©e correctement
    file_url = path_config.get_file_url("uploads", relative_path)
    doc = DocumentBudget(
        fiche_technique_id=fiche_id,
        type_document=description or "Document g√©n√©ral",
        nom_fichier=fichier.filename,
        file_path=file_url,
        taille_octets=len(content),
        uploaded_by_user_id=current_user.id,
    )

    session.add(doc)
    session.commit()

    logger.info(f"‚úÖ Document upload√© : {fichier.filename} pour fiche {fiche_id}")
    return {"ok": True, "id": doc.id, "filename": fichier.filename}


@router.get("/api/fiches/{fiche_id}/documents/{document_id}/download")
def api_download_document_fiche(
    fiche_id: int,
    document_id: int,
    session: Session = Depends(get_session),
    current_user: User = Depends(get_current_user),
):
    """T√©l√©charger un document d'une fiche"""
    doc = session.get(DocumentBudget, document_id)
    if not doc or doc.fiche_technique_id != fiche_id:
        raise HTTPException(404, "Document non trouv√©")

    file_path = Path(f"app{doc.file_path}")
    if not file_path.exists():
        raise HTTPException(404, "Fichier physique non trouv√©")

    return FileResponse(path=file_path, filename=doc.nom_fichier, media_type="application/octet-stream")


@router.delete("/api/fiches/{fiche_id}/documents/{document_id}")
def api_delete_document_fiche(
    fiche_id: int,
    document_id: int,
    session: Session = Depends(get_session),
    current_user: User = Depends(get_current_user),
):
    """Supprimer un document d'une fiche"""
    doc = session.get(DocumentBudget, document_id)
    if not doc or doc.fiche_technique_id != fiche_id:
        raise HTTPException(404, "Document non trouv√©")

    try:
        # Supprimer le fichier physique
        file_path = Path(f"app{doc.file_path}")
        if file_path.exists():
            file_path.unlink()
            logger.info(f"üìé Fichier supprim√© : {doc.nom_fichier}")

        # Supprimer de la BDD
        session.delete(doc)
        session.commit()

        logger.info(f"‚úÖ Document {document_id} supprim√© de la fiche {fiche_id}")
        return {"ok": True, "message": "Document supprim√© avec succ√®s"}
    except Exception as e:
        session.rollback()
        logger.error(f"‚ùå Erreur suppression document {document_id}: {e}")
        raise HTTPException(500, f"Erreur lors de la suppression: {e!s}")


# ============================================
# CHANGEMENT DE STATUT
# ============================================


@router.put("/api/fiches/{fiche_id}/statut")
def api_changer_statut_fiche(
    fiche_id: int,
    nouveau_statut: str = Form(...),
    commentaire: str | None = Form(None),
    session: Session = Depends(get_session),
    current_user: User = Depends(get_current_user),
):
    """Changer le statut d'une fiche technique"""
    fiche = session.get(FicheTechnique, fiche_id)
    if not fiche:
        raise HTTPException(404, "Fiche technique non trouv√©e")

    # Valider le nouveau statut
    statuts_valides = ["Brouillon", "Soumis", "Valid√©", "Rejet√©", "Approuv√©"]
    if nouveau_statut not in statuts_valides:
        raise HTTPException(400, f"Statut invalide. Valeurs possibles : {', '.join(statuts_valides)}")

    try:
        ancien_statut = fiche.statut

        # Mettre √† jour le statut
        fiche.statut = nouveau_statut
        fiche.updated_by_user_id = current_user.id

        # Mettre √† jour les dates selon le statut
        from datetime import date

        if nouveau_statut == "Soumis" and not fiche.date_soumission:
            fiche.date_soumission = date.today()
        elif nouveau_statut in ["Valid√©", "Approuv√©"] and not fiche.date_validation:
            fiche.date_validation = date.today()

        session.add(fiche)

        # Cr√©er un historique du changement de statut
        historique = HistoriqueBudget(
            fiche_technique_id=fiche_id,
            action=f"Changement de statut: {ancien_statut} ‚Üí {nouveau_statut}",
            ancien_statut=ancien_statut,
            nouveau_statut=nouveau_statut,
            commentaire=commentaire,
            user_id=current_user.id,
        )
        session.add(historique)

        session.commit()

        logger.info(
            f"‚úÖ Statut de la fiche {fiche_id} chang√© de '{ancien_statut}' √† '{nouveau_statut}' par {current_user.email}"
        )
        return {
            "ok": True,
            "message": f"Statut chang√© de '{ancien_statut}' √† '{nouveau_statut}'",
            "ancien_statut": ancien_statut,
            "nouveau_statut": nouveau_statut,
        }
    except Exception as e:
        session.rollback()
        logger.error(f"‚ùå Erreur changement statut fiche {fiche_id}: {e}")
        raise HTTPException(500, f"Erreur lors du changement de statut: {e!s}")


# ============================================
# IMPORT EXCEL
# ============================================


@router.post("/api/import/activites")
async def api_import_activites_excel(
    fichier: UploadFile = File(...),
    session: Session = Depends(get_session),
    current_user: User = Depends(get_current_user),
):
    """
    Importer des activit√©s depuis un fichier Excel

    Format attendu:
    Code | Libelle | Programme | Direction | Nature | Description
    """
    try:
        # Lire le fichier Excel
        content = await fichier.read()
        df = pd.read_excel(io.BytesIO(content))

        # V√©rifier les colonnes
        required_cols = ["Code", "Libelle"]
        if not all(col in df.columns for col in required_cols):
            raise HTTPException(400, f"Colonnes requises: {', '.join(required_cols)}")

        # R√©f√©rentiels
        programmes = {p.code: p for p in session.exec(select(Programme)).all()}
        directions = {d.code: d for d in session.exec(select(Direction)).all()}
        natures = {n.code: n for n in session.exec(select(NatureDepense)).all()}

        count_created = 0
        count_updated = 0
        errors = []

        for idx, row in df.iterrows():
            try:
                code = str(row["Code"]).strip()
                libelle = str(row["Libelle"]).strip()

                # Rechercher activit√© existante
                existing = session.exec(select(Activite).where(Activite.code == code)).first()

                # Programme, Direction, Nature (optionnels)
                prog_id = None
                if "Programme" in row and pd.notna(row["Programme"]):
                    prog_code = str(row["Programme"]).strip()
                    if prog_code in programmes:
                        prog_id = programmes[prog_code].id

                dir_id = None
                if "Direction" in row and pd.notna(row["Direction"]):
                    dir_code = str(row["Direction"]).strip()
                    if dir_code in directions:
                        dir_id = directions[dir_code].id

                nat_id = None
                if "Nature" in row and pd.notna(row["Nature"]):
                    nat_code = str(row["Nature"]).strip()
                    if nat_code in natures:
                        nat_id = natures[nat_code].id

                desc = str(row["Description"]) if "Description" in row and pd.notna(row["Description"]) else None

                if existing:
                    # Mise √† jour
                    existing.libelle = libelle
                    existing.programme_id = prog_id
                    existing.direction_id = dir_id
                    existing.nature_depense_id = nat_id
                    existing.description = desc
                    existing.updated_at = datetime.utcnow()
                    session.add(existing)
                    count_updated += 1
                else:
                    # Cr√©ation
                    activite = Activite(
                        code=code,
                        libelle=libelle,
                        programme_id=prog_id,
                        direction_id=dir_id,
                        nature_depense_id=nat_id,
                        description=desc,
                    )
                    session.add(activite)
                    count_created += 1

            except Exception as e:
                errors.append(f"Ligne {idx + 2}: {e!s}")

        session.commit()

        logger.info(f"‚úÖ Import activit√©s : {count_created} cr√©√©es, {count_updated} mises √† jour")

        return {"ok": True, "created": count_created, "updated": count_updated, "errors": errors}

    except Exception as e:
        session.rollback()
        logger.error(f"Erreur import Excel: {e}")
        raise HTTPException(500, f"Erreur lors de l'import: {e!s}")


# ============================================
# EXPORT PDF
# ============================================


@router.get("/api/fiches/{fiche_id}/export/pdf")
def api_export_fiche_pdf(
    fiche_id: int, session: Session = Depends(get_session), current_user: User = Depends(get_current_user)
):
    """
    Exporter une fiche technique en PDF avec ReportLab
    G√©n√®re un vrai PDF professionnel et t√©l√©chargeable
    """
    try:
        from reportlab.lib import colors
        from reportlab.lib.enums import TA_CENTER, TA_LEFT, TA_RIGHT
        from reportlab.lib.pagesizes import A4, landscape
        from reportlab.lib.styles import ParagraphStyle, getSampleStyleSheet
        from reportlab.lib.units import cm
        from reportlab.pdfbase import pdfmetrics
        from reportlab.pdfbase.ttfonts import TTFont
        from reportlab.platypus import PageBreak, Paragraph, SimpleDocTemplate, Spacer, Table, TableStyle

        from app.core.config import settings
    except ImportError:
        raise HTTPException(500, "ReportLab n'est pas install√©. Ex√©cutez: pip install reportlab")

    fiche = session.get(FicheTechnique, fiche_id)
    if not fiche:
        raise HTTPException(404, "Fiche technique non trouv√©e")

    # R√©cup√©rer la structure hi√©rarchique
    actions = session.exec(
        select(ActionBudgetaire).where(ActionBudgetaire.fiche_technique_id == fiche_id).order_by(ActionBudgetaire.ordre)
    ).all()

    for action in actions:
        services = session.exec(
            select(ServiceBeneficiaire)
            .where(ServiceBeneficiaire.action_id == action.id)
            .order_by(ServiceBeneficiaire.ordre)
        ).all()
        object.__setattr__(action, "services", services)

        for service in services:
            activites = session.exec(
                select(ActiviteBudgetaire)
                .where(ActiviteBudgetaire.service_beneficiaire_id == service.id)
                .order_by(ActiviteBudgetaire.ordre)
            ).all()
            object.__setattr__(service, "activites", activites)

            for activite in activites:
                lignes = session.exec(
                    select(LigneBudgetaireDetail)
                    .where(LigneBudgetaireDetail.activite_id == activite.id)
                    .order_by(LigneBudgetaireDetail.ordre)
                ).all()
                object.__setattr__(activite, "lignes", lignes)

    from collections import defaultdict

    actions_par_nature = defaultdict(list)
    for action in actions:
        nature = action.nature_depense or "BIENS ET SERVICES"
        actions_par_nature[nature].append(action)

    programme = session.get(Programme, fiche.programme_id)

    # Fonction pour ajouter en-t√™te et pied de page
    def add_page_number(canvas, doc):
        """Ajouter en-t√™te et pied de page sur chaque page"""
        canvas.saveState()

        # En-t√™te sur chaque page
        canvas.setFont("Helvetica-Bold", 9)
        canvas.setFillColor(colors.HexColor("#2c3e50"))
        canvas.drawCentredString(
            landscape(A4)[0] / 2,
            landscape(A4)[1] - 1.2 * cm,
            f"{fiche.numero_fiche} | Budget {fiche.annee_budget} | {programme.libelle[:50]}",
        )

        # Ligne de s√©paration en-t√™te
        canvas.setStrokeColor(colors.HexColor("#667eea"))
        canvas.setLineWidth(1)
        canvas.line(1 * cm, landscape(A4)[1] - 1.5 * cm, landscape(A4)[0] - 1 * cm, landscape(A4)[1] - 1.5 * cm)

        # Pied de page avec num√©ro de page
        page_num = canvas.getPageNumber()
        canvas.setFont("Helvetica", 8)
        canvas.setFillColor(colors.grey)

        # Gauche : Date et utilisateur
        canvas.drawString(
            0.5 * cm, 0.5 * cm, f"√âdit√© le {fiche.created_at.strftime('%d/%m/%Y')} par {current_user.email}"
        )

        # Centre : Num√©ro de page
        canvas.drawCentredString(landscape(A4)[0] / 2, 0.5 * cm, f"Page {page_num}")

        # Droite : Application
        canvas.drawRightString(landscape(A4)[0] - 0.5 * cm, 0.5 * cm, settings.APP_NAME)

        # Ligne de s√©paration pied de page
        canvas.setStrokeColor(colors.HexColor("#667eea"))
        canvas.setLineWidth(1)
        canvas.line(0.5 * cm, 0.8 * cm, landscape(A4)[0] - 0.5 * cm, 0.8 * cm)

        canvas.restoreState()

    # Cr√©er le PDF avec marges r√©duites
    buffer = BytesIO()
    doc = SimpleDocTemplate(
        buffer,
        pagesize=landscape(A4),
        rightMargin=1 * cm,
        leftMargin=1 * cm,
        topMargin=2.5 * cm,
        bottomMargin=2 * cm,
        title=f"Fiche Technique {fiche.numero_fiche}",
        author=current_user.email,
        subject=f"Budget {fiche.annee_budget} - {programme.libelle}",
    )

    # Styles
    styles = getSampleStyleSheet()

    # Style pour le titre
    titre_style = ParagraphStyle(
        "CustomTitle",
        parent=styles["Heading1"],
        fontSize=16,
        textColor=colors.HexColor("#2c3e50"),
        alignment=TA_CENTER,
        spaceAfter=12,
        fontName="Helvetica-Bold",
    )

    # Style pour les infos
    info_style = ParagraphStyle("Info", parent=styles["Normal"], fontSize=10, alignment=TA_CENTER, spaceAfter=6)

    # Construire le document
    elements = []

    # En-t√™te
    elements.append(Paragraph("üìã FICHE TECHNIQUE BUDG√âTAIRE HI√âRARCHIQUE", titre_style))
    elements.append(
        Paragraph(f"<b>{fiche.numero_fiche}</b> | Budget {fiche.annee_budget} | {fiche.statut}", info_style)
    )
    elements.append(Paragraph(f"{programme.libelle} ({programme.code})", info_style))
    elements.append(Paragraph(f"<b>Budget Total :</b> {fiche.budget_total_demande:,.0f} FCFA", info_style))
    elements.append(Spacer(1, 0.5 * cm))

    # Construire les donn√©es du tableau
    table_data = []

    # En-t√™tes
    headers = [
        "CODE ET LIBELLE",
        "BUDGET\nVOT√â N\n(A)",
        "BUDGET\nACTUEL N\n(B)",
        "ENVELOPPE\nN+1\n(C)",
        "COMPL√âMENT\nSOLLICIT√â\n(D)",
        "BUDGET\nSOUHAIT√â\n(E=C+D)",
        "ENGAGEMENT\n√âTAT\n(F)",
        "AUTRE\nCOMPL√âMENT\n(G)",
        "PROJET\nBUDGET N+1\n(H=C+F+G)",
    ]
    table_data.append(headers)

    # Parcourir la hi√©rarchie
    for nature, actions_nature in actions_par_nature.items():
        # Header Nature avec fusion de colonnes (SPAN)
        nature_row = [nature.upper(), "", "", "", "", "", "", "", ""]
        table_data.append(nature_row)

        for action in actions_nature:
            # Action avec texte qui peut se retourner √† la ligne
            action_text = Paragraph(
                action.libelle.replace("- ", "").strip(), ParagraphStyle("ActionText", fontSize=6, leftIndent=0)
            )
            table_data.append(
                [
                    action_text,
                    f"{action.budget_vote_n:,.0f}",
                    f"{action.budget_actuel_n:,.0f}",
                    f"{action.enveloppe_n_plus_1:,.0f}",
                    f"{action.complement_solicite:,.0f}",
                    f"{action.budget_souhaite:,.0f}",
                    f"{action.engagement_etat:,.0f}",
                    f"{action.autre_complement:,.0f}",
                    f"{action.projet_budget_n_plus_1:,.0f}",
                ]
            )

            for service in action.services:
                # Service avec fusion de colonnes et texte √† gauche
                service_text = Paragraph(
                    f"  {service.libelle.replace('- ', '').strip()}",
                    ParagraphStyle("ServiceText", fontSize=6, leftIndent=0.2 * cm, alignment=TA_LEFT),
                )
                service_row = [service_text, "", "", "", "", "", "", "", ""]
                table_data.append(service_row)

                for activite in service.activites:
                    # Activit√© avec texte qui peut se retourner √† la ligne
                    activite_text = Paragraph(
                        f"    {activite.libelle.replace('- ', '').strip()}",
                        ParagraphStyle("ActiviteText", fontSize=6, leftIndent=0.4 * cm),
                    )
                    table_data.append(
                        [
                            activite_text,
                            f"{activite.budget_vote_n:,.0f}",
                            f"{activite.budget_actuel_n:,.0f}",
                            f"{activite.enveloppe_n_plus_1:,.0f}",
                            f"{activite.complement_solicite:,.0f}",
                            f"{activite.budget_souhaite:,.0f}",
                            f"{activite.engagement_etat:,.0f}",
                            f"{activite.autre_complement:,.0f}",
                            f"{activite.projet_budget_n_plus_1:,.0f}",
                        ]
                    )

                    # Lignes budg√©taires avec texte qui peut se retourner √† la ligne
                    for ligne in activite.lignes:
                        ligne_text = Paragraph(
                            f"      {ligne.code} - {ligne.libelle}",
                            ParagraphStyle("LigneText", fontSize=6, leftIndent=0.6 * cm),
                        )
                        table_data.append(
                            [
                                ligne_text,
                                f"{ligne.budget_vote_n:,.0f}",
                                f"{ligne.budget_actuel_n:,.0f}",
                                f"{ligne.enveloppe_n_plus_1:,.0f}",
                                f"{ligne.complement_solicite:,.0f}",
                                f"{ligne.budget_souhaite:,.0f}",
                                f"{ligne.engagement_etat:,.0f}",
                                f"{ligne.autre_complement:,.0f}",
                                f"{ligne.projet_budget_n_plus_1:,.0f}",
                            ]
                        )

                    # Sous-total Activit√© avec police adapt√©e aux grandes valeurs
                    sous_total_activite = [
                        "SOUS-TOTAL ACTIVIT√â",
                        f"{activite.budget_vote_n:,.0f}",
                        f"{activite.budget_actuel_n:,.0f}",
                        f"{activite.enveloppe_n_plus_1:,.0f}",
                        f"{activite.complement_solicite:,.0f}",
                        f"{activite.budget_souhaite:,.0f}",
                        f"{activite.engagement_etat:,.0f}",
                        f"{activite.autre_complement:,.0f}",
                        f"{activite.projet_budget_n_plus_1:,.0f}",
                    ]
                    table_data.append(sous_total_activite)

                # Sous-total Service avec police adapt√©e aux grandes valeurs
                service_totals = {
                    "vote": sum(a.budget_vote_n for a in service.activites),
                    "actuel": sum(a.budget_actuel_n for a in service.activites),
                    "enveloppe": sum(a.enveloppe_n_plus_1 for a in service.activites),
                    "complement": sum(a.complement_solicite for a in service.activites),
                    "souhaite": sum(a.budget_souhaite for a in service.activites),
                    "engagement": sum(a.engagement_etat for a in service.activites),
                    "autre": sum(a.autre_complement for a in service.activites),
                    "projet": sum(a.projet_budget_n_plus_1 for a in service.activites),
                }
                sous_total_service = [
                    "SOUS-TOTAL SERVICE",
                    f"{service_totals['vote']:,.0f}",
                    f"{service_totals['actuel']:,.0f}",
                    f"{service_totals['enveloppe']:,.0f}",
                    f"{service_totals['complement']:,.0f}",
                    f"{service_totals['souhaite']:,.0f}",
                    f"{service_totals['engagement']:,.0f}",
                    f"{service_totals['autre']:,.0f}",
                    f"{service_totals['projet']:,.0f}",
                ]
                table_data.append(sous_total_service)

            # Sous-total Action
            table_data.append(
                [
                    "SOUS-TOTAL ACTION",
                    f"{action.budget_vote_n:,.0f}",
                    f"{action.budget_actuel_n:,.0f}",
                    f"{action.enveloppe_n_plus_1:,.0f}",
                    f"{action.complement_solicite:,.0f}",
                    f"{action.budget_souhaite:,.0f}",
                    f"{action.engagement_etat:,.0f}",
                    f"{action.autre_complement:,.0f}",
                    f"{action.projet_budget_n_plus_1:,.0f}",
                ]
            )

        # Total Nature avec police adapt√©e aux grandes valeurs
        nature_totals = {
            "vote": sum(a.budget_vote_n for a in actions_nature),
            "actuel": sum(a.budget_actuel_n for a in actions_nature),
            "enveloppe": sum(a.enveloppe_n_plus_1 for a in actions_nature),
            "complement": sum(a.complement_solicite for a in actions_nature),
            "souhaite": sum(a.budget_souhaite for a in actions_nature),
            "engagement": sum(a.engagement_etat for a in actions_nature),
            "autre": sum(a.autre_complement for a in actions_nature),
            "projet": sum(a.projet_budget_n_plus_1 for a in actions_nature),
        }
        total_nature = [
            f"TOTAL {nature.upper()}",
            f"{nature_totals['vote']:,.0f}",
            f"{nature_totals['actuel']:,.0f}",
            f"{nature_totals['enveloppe']:,.0f}",
            f"{nature_totals['complement']:,.0f}",
            f"{nature_totals['souhaite']:,.0f}",
            f"{nature_totals['engagement']:,.0f}",
            f"{nature_totals['autre']:,.0f}",
            f"{nature_totals['projet']:,.0f}",
        ]
        table_data.append(total_nature)

    # Total G√©n√©ral avec police adapt√©e aux grandes valeurs
    total_general = {
        "vote": sum(sum(a.budget_vote_n for a in acts) for acts in actions_par_nature.values()),
        "actuel": sum(sum(a.budget_actuel_n for a in acts) for acts in actions_par_nature.values()),
        "enveloppe": sum(sum(a.enveloppe_n_plus_1 for a in acts) for acts in actions_par_nature.values()),
        "complement": sum(sum(a.complement_solicite for a in acts) for acts in actions_par_nature.values()),
        "souhaite": sum(sum(a.budget_souhaite for a in acts) for acts in actions_par_nature.values()),
        "engagement": sum(sum(a.engagement_etat for a in acts) for acts in actions_par_nature.values()),
        "autre": sum(sum(a.autre_complement for a in acts) for acts in actions_par_nature.values()),
        "projet": sum(sum(a.projet_budget_n_plus_1 for a in acts) for acts in actions_par_nature.values()),
    }
    total_general_row = [
        "TOTAL G√âN√âRAL",
        f"{total_general['vote']:,.0f}",
        f"{total_general['actuel']:,.0f}",
        f"{total_general['enveloppe']:,.0f}",
        f"{total_general['complement']:,.0f}",
        f"{total_general['souhaite']:,.0f}",
        f"{total_general['engagement']:,.0f}",
        f"{total_general['autre']:,.0f}",
        f"{total_general['projet']:,.0f}",
    ]
    table_data.append(total_general_row)

    # Cr√©er le tableau avec largeurs optimis√©es - colonne texte r√©duite
    col_widths = [7 * cm, 2.8 * cm, 2.8 * cm, 2.8 * cm, 2.8 * cm, 2.8 * cm, 2.8 * cm, 2.8 * cm, 3 * cm]
    table = Table(table_data, colWidths=col_widths, repeatRows=1)

    # Styles du tableau
    table_style = TableStyle(
        [
            # En-t√™tes
            ("BACKGROUND", (0, 0), (-1, 0), colors.HexColor("#ef8d4b")),
            ("TEXTCOLOR", (0, 0), (-1, 0), colors.black),
            ("ALIGN", (0, 0), (-1, 0), "CENTER"),
            ("FONTNAME", (0, 0), (-1, 0), "Helvetica-Bold"),
            ("FONTSIZE", (0, 0), (-1, 0), 7),
            ("BOTTOMPADDING", (0, 0), (-1, 0), 8),
            ("TOPPADDING", (0, 0), (-1, 0), 8),
            # Toutes les colonnes centr√©es horizontalement
            ("ALIGN", (0, 0), (-1, -1), "CENTER"),
            # Bordures
            ("GRID", (0, 0), (-1, -1), 0.5, colors.black),
            # Police g√©n√©rale avec taille r√©duite
            ("FONTNAME", (0, 1), (-1, -1), "Helvetica"),
            ("FONTSIZE", (0, 1), (-1, -1), 6),
            ("VALIGN", (0, 0), (-1, -1), "MIDDLE"),  # Centrage vertical pour toutes les cellules
            # Padding r√©duit pour √©conomiser l'espace
            ("LEFTPADDING", (0, 0), (-1, -1), 2),
            ("RIGHTPADDING", (0, 0), (-1, -1), 2),
            ("TOPPADDING", (0, 0), (-1, -1), 1),
            ("BOTTOMPADDING", (0, 0), (-1, -1), 1),
        ]
    )

    # Appliquer les couleurs selon le type de ligne
    row_index = 1  # Commencer apr√®s les headers
    for nature, actions_nature in actions_par_nature.items():
        # Header Nature (jaune or) avec fusion de colonnes
        table_style.add("BACKGROUND", (0, row_index), (-1, row_index), colors.HexColor("#ffd700"))
        table_style.add("FONTNAME", (0, row_index), (-1, row_index), "Helvetica-Bold")
        table_style.add("FONTSIZE", (0, row_index), (-1, row_index), 8)
        table_style.add("ALIGN", (0, row_index), (-1, row_index), "CENTER")
        table_style.add("SPAN", (0, row_index), (-1, row_index))  # Fusionner toutes les colonnes
        row_index += 1

        for action in actions_nature:
            # Action (bleu)
            table_style.add("BACKGROUND", (0, row_index), (-1, row_index), colors.HexColor("#9bc2e6"))
            table_style.add("FONTNAME", (0, row_index), (-1, row_index), "Helvetica-Bold")
            table_style.add("FONTSIZE", (0, row_index), (-1, row_index), 8)
            row_index += 1

            for service in action.services:
                # Service (jaune) avec fusion de colonnes et texte √† gauche
                table_style.add("BACKGROUND", (0, row_index), (-1, row_index), colors.HexColor("#ffc000"))
                table_style.add("FONTNAME", (0, row_index), (-1, row_index), "Helvetica-Bold")
                table_style.add("FONTSIZE", (0, row_index), (-1, row_index), 6)  # Police hi√©rarchique
                table_style.add("ALIGN", (0, row_index), (-1, row_index), "LEFT")  # Texte √† gauche
                table_style.add("SPAN", (0, row_index), (-1, row_index))  # Fusionner toutes les colonnes
                row_index += 1

                for activite in service.activites:
                    # Activit√© (vert)
                    table_style.add("BACKGROUND", (0, row_index), (-1, row_index), colors.HexColor("#92d050"))
                    table_style.add("FONTNAME", (0, row_index), (-1, row_index), "Helvetica-Bold")
                    row_index += 1

                    # Lignes (blanc)
                    for ligne in activite.lignes:
                        table_style.add("FONTSIZE", (0, row_index), (0, row_index), 6)
                        row_index += 1

                    # Sous-total Activit√© (vert clair) avec police hi√©rarchique
                    table_style.add("BACKGROUND", (0, row_index), (-1, row_index), colors.HexColor("#d4edda"))
                    table_style.add("FONTNAME", (0, row_index), (-1, row_index), "Helvetica-Bold")
                    table_style.add("FONTSIZE", (0, row_index), (-1, row_index), 6)  # Police hi√©rarchique
                    table_style.add("ALIGN", (0, row_index), (0, row_index), "RIGHT")
                    row_index += 1

                # Sous-total Service (jaune clair) avec police hi√©rarchique
                table_style.add("BACKGROUND", (0, row_index), (-1, row_index), colors.HexColor("#fff3cd"))
                table_style.add("FONTNAME", (0, row_index), (-1, row_index), "Helvetica-Bold")
                table_style.add("FONTSIZE", (0, row_index), (-1, row_index), 7)  # Police hi√©rarchique
                table_style.add("ALIGN", (0, row_index), (0, row_index), "RIGHT")
                row_index += 1

            # Sous-total Action (bleu clair) avec police hi√©rarchique
            table_style.add("BACKGROUND", (0, row_index), (-1, row_index), colors.HexColor("#cce5ff"))
            table_style.add("FONTNAME", (0, row_index), (-1, row_index), "Helvetica-Bold")
            table_style.add("FONTSIZE", (0, row_index), (-1, row_index), 8)  # Police hi√©rarchique
            table_style.add("ALIGN", (0, row_index), (0, row_index), "RIGHT")
            row_index += 1

        # Total Nature (or) avec police hi√©rarchique
        table_style.add("BACKGROUND", (0, row_index), (-1, row_index), colors.HexColor("#ffd700"))
        table_style.add("FONTNAME", (0, row_index), (-1, row_index), "Helvetica-Bold")
        table_style.add("FONTSIZE", (0, row_index), (-1, row_index), 9)  # Police hi√©rarchique
        table_style.add("ALIGN", (0, row_index), (0, row_index), "RIGHT")
        row_index += 1

    # Total G√©n√©ral (rouge) avec police hi√©rarchique maximale
    table_style.add("BACKGROUND", (0, row_index), (-1, row_index), colors.HexColor("#dc3545"))
    table_style.add("TEXTCOLOR", (0, row_index), (-1, row_index), colors.white)
    table_style.add("FONTNAME", (0, row_index), (-1, row_index), "Helvetica-Bold")
    table_style.add("FONTSIZE", (0, row_index), (-1, row_index), 10)  # Police hi√©rarchique maximale
    table_style.add("ALIGN", (0, row_index), (0, row_index), "RIGHT")

    table.setStyle(table_style)
    elements.append(table)

    # Footer
    elements.append(Spacer(1, 0.5 * cm))
    footer_style = ParagraphStyle(
        "Footer", parent=styles["Normal"], fontSize=8, alignment=TA_RIGHT, textColor=colors.grey
    )
    elements.append(Paragraph(f"Document √©dit√© le : {fiche.created_at.strftime('%d/%m/%Y √† %H:%M')}", footer_style))
    elements.append(Paragraph(f"Phase : {fiche.phase} | Statut : {fiche.statut}", footer_style))
    elements.append(Paragraph(settings.APP_NAME, footer_style))

    # G√©n√©rer le PDF avec en-t√™te et pied de page
    doc.build(elements, onFirstPage=add_page_number, onLaterPages=add_page_number)

    # Retourner le PDF
    buffer.seek(0)

    logger.info(f"‚úÖ PDF ReportLab g√©n√©r√© pour fiche {fiche.numero_fiche}")

    # Nettoyer le nom du programme pour le nom de fichier
    programme_nom_clean = (
        programme.libelle.replace(" ", "_")
        .replace("/", "_")
        .replace("\\", "_")
        .replace(":", "_")
        .replace("*", "_")
        .replace("?", "_")
        .replace('"', "_")
        .replace("<", "_")
        .replace(">", "_")
        .replace("|", "_")
    )

    return StreamingResponse(
        buffer,
        media_type="application/pdf",
        headers={
            "Content-Disposition": f"attachment; filename=Fiche_{programme_nom_clean}_{fiche.annee_budget}_{fiche.numero_fiche}.pdf"
        },
    )


@router.get("/api/fiches/{fiche_id}/export/excel")
def api_export_fiche_excel(
    fiche_id: int, session: Session = Depends(get_session), current_user: User = Depends(get_current_user)
):
    """
    Exporter une fiche technique en Excel avec la structure hi√©rarchique et les couleurs
    """
    try:
        from openpyxl import Workbook
        from openpyxl.styles import Alignment, Border, Font, PatternFill, Side
        from openpyxl.utils import get_column_letter
    except ImportError:
        raise HTTPException(500, "openpyxl n'est pas install√©")

    fiche = session.get(FicheTechnique, fiche_id)
    if not fiche:
        raise HTTPException(404, "Fiche technique non trouv√©e")

    # R√©cup√©rer la structure hi√©rarchique
    actions = session.exec(
        select(ActionBudgetaire).where(ActionBudgetaire.fiche_technique_id == fiche_id).order_by(ActionBudgetaire.ordre)
    ).all()

    for action in actions:
        services = session.exec(
            select(ServiceBeneficiaire)
            .where(ServiceBeneficiaire.action_id == action.id)
            .order_by(ServiceBeneficiaire.ordre)
        ).all()
        object.__setattr__(action, "services", services)

        for service in services:
            activites = session.exec(
                select(ActiviteBudgetaire)
                .where(ActiviteBudgetaire.service_beneficiaire_id == service.id)
                .order_by(ActiviteBudgetaire.ordre)
            ).all()
            object.__setattr__(service, "activites", activites)

            for activite in activites:
                lignes = session.exec(
                    select(LigneBudgetaireDetail)
                    .where(LigneBudgetaireDetail.activite_id == activite.id)
                    .order_by(LigneBudgetaireDetail.ordre)
                ).all()
                object.__setattr__(activite, "lignes", lignes)

    from collections import defaultdict

    actions_par_nature = defaultdict(list)
    for action in actions:
        nature = action.nature_depense or "BIENS ET SERVICES"
        actions_par_nature[nature].append(action)

    programme = session.get(Programme, fiche.programme_id)

    # Cr√©er le classeur Excel
    wb = Workbook()
    ws = wb.active
    ws.title = f"Fiche {fiche.numero_fiche}"

    # Styles
    header_fill = PatternFill(start_color="FF8C00", end_color="FF8C00", fill_type="solid")
    header_font = Font(bold=True, color="FFFFFF", size=11)
    border_style = Border(
        left=Side(style="thin"), right=Side(style="thin"), top=Side(style="thin"), bottom=Side(style="thin")
    )

    # Couleurs hi√©rarchiques
    nature_fill = PatternFill(start_color="FFD700", end_color="FFD700", fill_type="solid")
    action_fill = PatternFill(start_color="9BC2E6", end_color="9BC2E6", fill_type="solid")
    service_fill = PatternFill(start_color="FFC000", end_color="FFC000", fill_type="solid")
    activite_fill = PatternFill(start_color="92D050", end_color="92D050", fill_type="solid")
    ligne_fill = PatternFill(start_color="FFFFFF", end_color="FFFFFF", fill_type="solid")
    sous_total_activite_fill = PatternFill(start_color="D4EDDA", end_color="D4EDDA", fill_type="solid")
    sous_total_service_fill = PatternFill(start_color="FFF3CD", end_color="FFF3CD", fill_type="solid")
    sous_total_action_fill = PatternFill(start_color="CCE5FF", end_color="CCE5FF", fill_type="solid")
    total_nature_fill = PatternFill(start_color="FFD700", end_color="FFD700", fill_type="solid")
    total_general_fill = PatternFill(start_color="DC3545", end_color="DC3545", fill_type="solid")

    # En-t√™tes
    headers = [
        "CODE ET LIBELLE",
        "BUDGET VOT√â N",
        "BUDGET ACTUEL N",
        "ENVELOPPE N+1",
        "COMPLEMENT SOLLICIT√â",
        "BUDGET SOUHAIT√â",
        "ENGAGEMENT √âTAT",
        "AUTRE COMPLEMENT",
        "PROJET BUDGET N+1",
        "JUSTIFICATIFS",
    ]

    current_row = 1
    for col_num, header in enumerate(headers, 1):
        cell = ws.cell(row=current_row, column=col_num)
        cell.value = header
        cell.fill = header_fill
        cell.font = header_font
        cell.alignment = Alignment(horizontal="center", vertical="center", wrap_text=True)
        cell.border = border_style

    # Ajuster largeurs
    ws.column_dimensions["A"].width = 50
    for col in ["B", "C", "D", "E", "F", "G", "H", "I"]:
        ws.column_dimensions[col].width = 18
    ws.column_dimensions["J"].width = 40

    current_row = 2

    # Parcourir la hi√©rarchie
    for nature, actions_nature in actions_par_nature.items():
        # Nature
        cell = ws.cell(row=current_row, column=1)
        cell.value = nature.upper()
        cell.fill = nature_fill
        cell.font = Font(bold=True, size=11)
        cell.border = border_style
        cell.alignment = Alignment(horizontal="center", vertical="center")
        for col in range(2, 11):
            ws.cell(row=current_row, column=col).border = border_style
            ws.cell(row=current_row, column=col).fill = nature_fill
        current_row += 1

        for action in actions_nature:
            # Action
            row_data = [
                f"Action : {action.libelle}",
                float(action.budget_vote_n),
                float(action.budget_actuel_n),
                float(action.enveloppe_n_plus_1),
                float(action.complement_solicite),
                float(action.budget_souhaite),
                float(action.engagement_etat),
                float(action.autre_complement),
                float(action.projet_budget_n_plus_1),
                action.justificatifs or "",
            ]
            for col_num, value in enumerate(row_data, 1):
                cell = ws.cell(row=current_row, column=col_num)
                cell.value = value
                cell.fill = action_fill
                cell.font = Font(bold=True, size=10)
                cell.border = border_style
                if col_num > 1 and col_num < 10:
                    cell.alignment = Alignment(horizontal="right", vertical="center")
                    cell.number_format = "#,##0"
                else:
                    cell.alignment = Alignment(horizontal="left", vertical="center")
            current_row += 1

            for service in action.services:
                # Service
                cell = ws.cell(row=current_row, column=1)
                cell.value = f"Service B√©n√©ficiaire : {service.libelle}"
                cell.fill = service_fill
                cell.font = Font(bold=True, size=9)
                cell.border = border_style
                cell.alignment = Alignment(horizontal="left", vertical="center")
                for col in range(2, 11):
                    ws.cell(row=current_row, column=col).border = border_style
                    ws.cell(row=current_row, column=col).fill = service_fill
                current_row += 1

                for activite in service.activites:
                    # Activit√©
                    row_data = [
                        f"Activit√© : {activite.libelle}",
                        float(activite.budget_vote_n),
                        float(activite.budget_actuel_n),
                        float(activite.enveloppe_n_plus_1),
                        float(activite.complement_solicite),
                        float(activite.budget_souhaite),
                        float(activite.engagement_etat),
                        float(activite.autre_complement),
                        float(activite.projet_budget_n_plus_1),
                        activite.justificatifs or "",
                    ]
                    for col_num, value in enumerate(row_data, 1):
                        cell = ws.cell(row=current_row, column=col_num)
                        cell.value = value
                        cell.fill = activite_fill
                        cell.font = Font(bold=True, size=9)
                        cell.border = border_style
                        if col_num > 1 and col_num < 10:
                            cell.alignment = Alignment(horizontal="right", vertical="center")
                            cell.number_format = "#,##0"
                        else:
                            cell.alignment = Alignment(horizontal="left", vertical="center")
                    current_row += 1

                    # Lignes budg√©taires
                    for ligne in activite.lignes:
                        row_data = [
                            f"{ligne.code} - {ligne.libelle}",
                            float(ligne.budget_vote_n),
                            float(ligne.budget_actuel_n),
                            float(ligne.enveloppe_n_plus_1),
                            float(ligne.complement_solicite),
                            float(ligne.budget_souhaite),
                            float(ligne.engagement_etat),
                            float(ligne.autre_complement),
                            float(ligne.projet_budget_n_plus_1),
                            ligne.justificatifs or "",
                        ]
                        for col_num, value in enumerate(row_data, 1):
                            cell = ws.cell(row=current_row, column=col_num)
                            cell.value = value
                            cell.fill = ligne_fill
                            cell.font = Font(size=9)
                            cell.border = border_style
                            if col_num > 1 and col_num < 10:
                                cell.alignment = Alignment(horizontal="right", vertical="center")
                                cell.number_format = "#,##0"
                            else:
                                cell.alignment = Alignment(horizontal="left", vertical="center")
                        current_row += 1

                    # Sous-total Activit√©
                    row_data = [
                        f"SOUS-TOTAL Activit√© : {activite.libelle}",
                        float(activite.budget_vote_n),
                        float(activite.budget_actuel_n),
                        float(activite.enveloppe_n_plus_1),
                        float(activite.complement_solicite),
                        float(activite.budget_souhaite),
                        float(activite.engagement_etat),
                        float(activite.autre_complement),
                        float(activite.projet_budget_n_plus_1),
                        "",
                    ]
                    for col_num, value in enumerate(row_data, 1):
                        cell = ws.cell(row=current_row, column=col_num)
                        cell.value = value
                        cell.fill = sous_total_activite_fill
                        cell.font = Font(bold=True, size=8, italic=True)
                        cell.border = border_style
                        if col_num > 1 and col_num < 10:
                            cell.alignment = Alignment(horizontal="right", vertical="center")
                            cell.number_format = "#,##0"
                        else:
                            cell.alignment = Alignment(horizontal="right", vertical="center")
                    current_row += 1

                # Sous-total Service
                service_totals = {
                    "vote": sum(a.budget_vote_n for a in service.activites),
                    "actuel": sum(a.budget_actuel_n for a in service.activites),
                    "enveloppe": sum(a.enveloppe_n_plus_1 for a in service.activites),
                    "complement": sum(a.complement_solicite for a in service.activites),
                    "souhaite": sum(a.budget_souhaite for a in service.activites),
                    "engagement": sum(a.engagement_etat for a in service.activites),
                    "autre": sum(a.autre_complement for a in service.activites),
                    "projet": sum(a.projet_budget_n_plus_1 for a in service.activites),
                }
                row_data = [
                    f"SOUS-TOTAL Service : {service.libelle}",
                    float(service_totals["vote"]),
                    float(service_totals["actuel"]),
                    float(service_totals["enveloppe"]),
                    float(service_totals["complement"]),
                    float(service_totals["souhaite"]),
                    float(service_totals["engagement"]),
                    float(service_totals["autre"]),
                    float(service_totals["projet"]),
                    "",
                ]
                for col_num, value in enumerate(row_data, 1):
                    cell = ws.cell(row=current_row, column=col_num)
                    cell.value = value
                    cell.fill = sous_total_service_fill
                    cell.font = Font(bold=True, size=9, italic=True)
                    cell.border = border_style
                    if col_num > 1 and col_num < 10:
                        cell.alignment = Alignment(horizontal="right", vertical="center")
                        cell.number_format = "#,##0"
                    else:
                        cell.alignment = Alignment(horizontal="right", vertical="center")
                current_row += 1

            # Sous-total Action
            row_data = [
                f"SOUS-TOTAL Action : {action.libelle}",
                float(action.budget_vote_n),
                float(action.budget_actuel_n),
                float(action.enveloppe_n_plus_1),
                float(action.complement_solicite),
                float(action.budget_souhaite),
                float(action.engagement_etat),
                float(action.autre_complement),
                float(action.projet_budget_n_plus_1),
                "",
            ]
            for col_num, value in enumerate(row_data, 1):
                cell = ws.cell(row=current_row, column=col_num)
                cell.value = value
                cell.fill = sous_total_action_fill
                cell.font = Font(bold=True, size=10, italic=True)
                cell.border = border_style
                if col_num > 1 and col_num < 10:
                    cell.alignment = Alignment(horizontal="right", vertical="center")
                    cell.number_format = "#,##0"
                else:
                    cell.alignment = Alignment(horizontal="right", vertical="center")
            current_row += 1

        # Total Nature
        nature_totals = {
            "vote": sum(a.budget_vote_n for a in actions_nature),
            "actuel": sum(a.budget_actuel_n for a in actions_nature),
            "enveloppe": sum(a.enveloppe_n_plus_1 for a in actions_nature),
            "complement": sum(a.complement_solicite for a in actions_nature),
            "souhaite": sum(a.budget_souhaite for a in actions_nature),
            "engagement": sum(a.engagement_etat for a in actions_nature),
            "autre": sum(a.autre_complement for a in actions_nature),
            "projet": sum(a.projet_budget_n_plus_1 for a in actions_nature),
        }
        row_data = [
            f"TOTAL {nature.upper()}",
            float(nature_totals["vote"]),
            float(nature_totals["actuel"]),
            float(nature_totals["enveloppe"]),
            float(nature_totals["complement"]),
            float(nature_totals["souhaite"]),
            float(nature_totals["engagement"]),
            float(nature_totals["autre"]),
            float(nature_totals["projet"]),
            "",
        ]
        for col_num, value in enumerate(row_data, 1):
            cell = ws.cell(row=current_row, column=col_num)
            cell.value = value
            cell.fill = total_nature_fill
            cell.font = Font(bold=True, size=11)
            cell.border = border_style
            if col_num > 1 and col_num < 10:
                cell.alignment = Alignment(horizontal="right", vertical="center")
                cell.number_format = "#,##0"
            else:
                cell.alignment = Alignment(horizontal="right", vertical="center")
        current_row += 1

        # Ligne vide entre natures
        current_row += 1

    # Total G√©n√©ral
    total_general = {
        "vote": sum(sum(a.budget_vote_n for a in acts) for acts in actions_par_nature.values()),
        "actuel": sum(sum(a.budget_actuel_n for a in acts) for acts in actions_par_nature.values()),
        "enveloppe": sum(sum(a.enveloppe_n_plus_1 for a in acts) for acts in actions_par_nature.values()),
        "complement": sum(sum(a.complement_solicite for a in acts) for acts in actions_par_nature.values()),
        "souhaite": sum(sum(a.budget_souhaite for a in acts) for acts in actions_par_nature.values()),
        "engagement": sum(sum(a.engagement_etat for a in acts) for acts in actions_par_nature.values()),
        "autre": sum(sum(a.autre_complement for a in acts) for acts in actions_par_nature.values()),
        "projet": sum(sum(a.projet_budget_n_plus_1 for a in acts) for acts in actions_par_nature.values()),
    }
    row_data = [
        "TOTAL G√âN√âRAL",
        float(total_general["vote"]),
        float(total_general["actuel"]),
        float(total_general["enveloppe"]),
        float(total_general["complement"]),
        float(total_general["souhaite"]),
        float(total_general["engagement"]),
        float(total_general["autre"]),
        float(total_general["projet"]),
        "",
    ]
    for col_num, value in enumerate(row_data, 1):
        cell = ws.cell(row=current_row, column=col_num)
        cell.value = value
        cell.fill = total_general_fill
        cell.font = Font(bold=True, size=12, color="FFFFFF")
        cell.border = border_style
        if col_num > 1 and col_num < 10:
            cell.alignment = Alignment(horizontal="right", vertical="center")
            cell.number_format = "#,##0"
        else:
            cell.alignment = Alignment(horizontal="right", vertical="center")

    # Figer les en-t√™tes
    ws.freeze_panes = "A2"

    # Sauvegarder dans un buffer
    buffer = BytesIO()
    wb.save(buffer)
    buffer.seek(0)

    logger.info(f"‚úÖ Excel g√©n√©r√© pour fiche {fiche.numero_fiche}")

    # Nom du fichier
    programme_nom_clean = programme.libelle.replace(" ", "_").replace("/", "_")

    return StreamingResponse(
        buffer,
        media_type="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
        headers={
            "Content-Disposition": f"attachment; filename=Fiche_{programme_nom_clean}_{fiche.annee_budget}_{fiche.numero_fiche}.xlsx"
        },
    )


# ============================================
# FICHES TECHNIQUES HI√âRARCHIQUES
# ============================================


@router.get("/fiches/{fiche_id}/structure", response_class=HTMLResponse, name="budget_fiche_structure")
def budget_fiche_structure(
    fiche_id: int,
    request: Request,
    session: Session = Depends(get_session),
    current_user: User = Depends(get_current_user),
):
    """Afficher la structure hi√©rarchique d'une fiche technique"""
    fiche = session.get(FicheTechnique, fiche_id)
    if not fiche:
        raise HTTPException(404, "Fiche technique non trouv√©e")

    # Recalculer les totaux pour s'assurer que tout est √† jour
    FicheTechniqueService._recalculer_totaux_hierarchie(fiche_id, session)

    # Recharger la fiche apr√®s recalcul
    session.expire(fiche)
    fiche = session.get(FicheTechnique, fiche_id)

    # R√©cup√©rer la structure hi√©rarchique
    actions = session.exec(
        select(ActionBudgetaire).where(ActionBudgetaire.fiche_technique_id == fiche_id).order_by(ActionBudgetaire.ordre)
    ).all()

    # Charger les services pour chaque action
    for action in actions:
        services = session.exec(
            select(ServiceBeneficiaire)
            .where(ServiceBeneficiaire.action_id == action.id)
            .order_by(ServiceBeneficiaire.ordre)
        ).all()
        object.__setattr__(action, "services", services)

        # Charger les activit√©s pour chaque service
        for service in services:
            activites = session.exec(
                select(ActiviteBudgetaire)
                .where(ActiviteBudgetaire.service_beneficiaire_id == service.id)
                .order_by(ActiviteBudgetaire.ordre)
            ).all()
            object.__setattr__(service, "activites", activites)

            # Charger les lignes pour chaque activit√©
            for activite in activites:
                lignes = session.exec(
                    select(LigneBudgetaireDetail)
                    .where(LigneBudgetaireDetail.activite_id == activite.id)
                    .order_by(LigneBudgetaireDetail.ordre)
                ).all()
                object.__setattr__(activite, "lignes", lignes)

    # Grouper les actions par nature de d√©pense
    from collections import defaultdict

    actions_par_nature = defaultdict(list)
    for action in actions:
        nature = action.nature_depense or "BIENS ET SERVICES"
        actions_par_nature[nature].append(action)

    # R√©f√©rentiels
    programme = session.get(Programme, fiche.programme_id)
    direction = session.get(Direction, fiche.direction_id) if fiche.direction_id else None

    return templates.TemplateResponse(
        "pages/budget_fiche_structure.html",
        get_template_context(
            request,
            fiche=fiche,
            actions=actions,
            actions_par_nature=dict(actions_par_nature),
            programme=programme,
            direction=direction,
            current_user=current_user,
        ),
    )


@router.get("/api/telecharger-template-fiche")
async def api_telecharger_template_fiche(annee: int = 2025, current_user: User = Depends(get_current_user)):
    """
    T√©l√©charger un mod√®le Excel vierge pour cr√©er une fiche technique
    """
    try:
        # Cr√©er un classeur Excel
        wb = Workbook()
        ws = wb.active
        ws.title = "Fiche Technique N"

        # D√©finir les styles
        header_fill = PatternFill(start_color="FF8C00", end_color="FF8C00", fill_type="solid")  # Orange
        header_font = Font(bold=True, color="FFFFFF", size=11)
        example_fill = PatternFill(start_color="E7E6E6", end_color="E7E6E6", fill_type="solid")
        border_style = Border(
            left=Side(style="thin"), right=Side(style="thin"), top=Side(style="thin"), bottom=Side(style="thin")
        )

        # D√©finir les en-t√™tes de colonnes (notation N et N+1)
        headers = [
            "CODE / LIBELLE",
            "BUDGET VOT√â N",
            "BUDGET ACTUEL N",
            "ENVELOPPE N+1",
            "COMPLEMENT SOLLICIT√â",
            "BUDGET SOUHAIT√â",
            "ENGAGEMENT DE L'ETAT",
            "AUTRE COMPLEMENT",
            "PROJET DE BUDGET N+1",
            "JUSTIFICATIFS",
        ]

        # √âcrire les en-t√™tes
        for col_num, header in enumerate(headers, 1):
            cell = ws.cell(row=1, column=col_num)
            cell.value = header
            cell.fill = header_fill
            cell.font = header_font
            cell.alignment = Alignment(horizontal="center", vertical="center", wrap_text=True)
            cell.border = border_style

        # Ajuster la largeur des colonnes
        ws.column_dimensions["A"].width = 50
        for col in ["B", "C", "D", "E", "F", "G", "H", "I"]:
            ws.column_dimensions[col].width = 18
        ws.column_dimensions["J"].width = 40

        # Ajouter des exemples de structure hi√©rarchique compl√®te et r√©aliste
        exemples = [
            # === NATURE 1 : BIENS ET SERVICES ===
            ("BIENS ET SERVICES", "", "", "", "", "", "", "", "", "Nature de d√©pense"),
            # Action 1.1
            (
                "Action : Pilotage et Gouvernance Institutionnelle",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "Coordination g√©n√©rale et gouvernance",
            ),
            # Service 1.1.1
            ("Service B√©n√©ficiaire : Direction G√©n√©rale", "", "", "", "", "", "", "", "", ""),
            # Activit√© 1.1.1.1
            ("Activit√© : Coordination Administrative", "", "", "", "", "", "", "", "", ""),
            (
                "601100 - Fournitures de bureau",
                "500000",
                "480000",
                "550000",
                "20000",
                "570000",
                "30000",
                "0",
                "580000",
                "Papeterie, consommables",
            ),
            (
                "601200 - Documentation et abonnements",
                "300000",
                "290000",
                "350000",
                "15000",
                "365000",
                "20000",
                "0",
                "370000",
                "Revues, documentation technique",
            ),
            (
                "SOUS-TOTAL Activit√© : Coordination Administrative",
                "800000",
                "770000",
                "900000",
                "35000",
                "935000",
                "50000",
                "0",
                "950000",
                "",
            ),
            # Activit√© 1.1.1.2
            ("Activit√© : Communication Institutionnelle", "", "", "", "", "", "", "", "", ""),
            (
                "606300 - Frais de publicit√© et communication",
                "800000",
                "750000",
                "900000",
                "40000",
                "940000",
                "50000",
                "0",
                "950000",
                "Campagnes de communication",
            ),
            (
                "606400 - R√©ception et manifestations",
                "600000",
                "580000",
                "700000",
                "30000",
                "730000",
                "40000",
                "0",
                "740000",
                "C√©r√©monies officielles",
            ),
            (
                "SOUS-TOTAL Activit√© : Communication Institutionnelle",
                "1400000",
                "1330000",
                "1600000",
                "70000",
                "1670000",
                "90000",
                "0",
                "1690000",
                "",
            ),
            (
                "SOUS-TOTAL Service : Direction G√©n√©rale",
                "2200000",
                "2100000",
                "2500000",
                "105000",
                "2605000",
                "140000",
                "0",
                "2640000",
                "",
            ),
            # Service 1.1.2
            ("Service B√©n√©ficiaire : Direction des Affaires Financi√®res", "", "", "", "", "", "", "", "", ""),
            # Activit√© 1.1.2.1
            ("Activit√© : Gestion Budg√©taire et Comptable", "", "", "", "", "", "", "", "", ""),
            (
                "601800 - Fournitures et mat√©riel informatique",
                "1200000",
                "1150000",
                "1400000",
                "60000",
                "1460000",
                "80000",
                "0",
                "1480000",
                "Mat√©riel bureautique",
            ),
            (
                "606100 - Frais de formation du personnel",
                "900000",
                "850000",
                "1000000",
                "45000",
                "1045000",
                "60000",
                "0",
                "1060000",
                "Formations comptables et financi√®res",
            ),
            (
                "SOUS-TOTAL Activit√© : Gestion Budg√©taire et Comptable",
                "2100000",
                "2000000",
                "2400000",
                "105000",
                "2505000",
                "140000",
                "0",
                "2540000",
                "",
            ),
            # Activit√© 1.1.2.2
            ("Activit√© : Suivi et Contr√¥le de Gestion", "", "", "", "", "", "", "", "", ""),
            (
                "602200 - Services ext√©rieurs (audit, conseil)",
                "1500000",
                "1400000",
                "1700000",
                "75000",
                "1775000",
                "100000",
                "0",
                "1800000",
                "Audits externes, consultants",
            ),
            (
                "605000 - Logiciels et licences",
                "800000",
                "770000",
                "900000",
                "40000",
                "940000",
                "50000",
                "0",
                "950000",
                "Logiciels de gestion",
            ),
            (
                "SOUS-TOTAL Activit√© : Suivi et Contr√¥le de Gestion",
                "2300000",
                "2170000",
                "2600000",
                "115000",
                "2715000",
                "150000",
                "0",
                "2750000",
                "",
            ),
            (
                "SOUS-TOTAL Service : Direction des Affaires Financi√®res",
                "4400000",
                "4170000",
                "5000000",
                "220000",
                "5220000",
                "290000",
                "0",
                "5290000",
                "",
            ),
            (
                "SOUS-TOTAL Action : Pilotage et Gouvernance Institutionnelle",
                "6600000",
                "6270000",
                "7500000",
                "325000",
                "7825000",
                "430000",
                "0",
                "7930000",
                "",
            ),
            # Action 1.2
            (
                "Action : Gestion des Ressources et Services G√©n√©raux",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "Gestion administrative et logistique",
            ),
            # Service 1.2.1
            ("Service B√©n√©ficiaire : Service des Moyens G√©n√©raux", "", "", "", "", "", "", "", "", ""),
            # Activit√© 1.2.1.1
            ("Activit√© : Entretien et Maintenance des Locaux", "", "", "", "", "", "", "", "", ""),
            (
                "605200 - Entretien b√¢timents",
                "2000000",
                "1900000",
                "2300000",
                "100000",
                "2400000",
                "130000",
                "0",
                "2430000",
                "R√©parations, peinture",
            ),
            (
                "605300 - Maintenance des √©quipements",
                "1500000",
                "1450000",
                "1700000",
                "75000",
                "1775000",
                "95000",
                "0",
                "1795000",
                "Climatisation, √©lectricit√©",
            ),
            (
                "SOUS-TOTAL Activit√© : Entretien et Maintenance des Locaux",
                "3500000",
                "3350000",
                "4000000",
                "175000",
                "4175000",
                "225000",
                "0",
                "4225000",
                "",
            ),
            # Activit√© 1.2.1.2
            ("Activit√© : Gestion du Parc Automobile", "", "", "", "", "", "", "", "", ""),
            (
                "606100 - Carburants et lubrifiants",
                "3000000",
                "2850000",
                "3400000",
                "150000",
                "3550000",
                "190000",
                "0",
                "3590000",
                "Essence, diesel",
            ),
            (
                "605400 - R√©parations v√©hicules",
                "1800000",
                "1700000",
                "2000000",
                "90000",
                "2090000",
                "115000",
                "0",
                "2115000",
                "Entretien, pi√®ces d√©tach√©es",
            ),
            (
                "SOUS-TOTAL Activit√© : Gestion du Parc Automobile",
                "4800000",
                "4550000",
                "5400000",
                "240000",
                "5640000",
                "305000",
                "0",
                "5705000",
                "",
            ),
            (
                "SOUS-TOTAL Service : Service des Moyens G√©n√©raux",
                "8300000",
                "7900000",
                "9400000",
                "415000",
                "9815000",
                "530000",
                "0",
                "9930000",
                "",
            ),
            # Service 1.2.2
            ("Service B√©n√©ficiaire : Service Informatique", "", "", "", "", "", "", "", "", ""),
            # Activit√© 1.2.2.1
            ("Activit√© : Maintenance Infrastructure IT", "", "", "", "", "", "", "", "", ""),
            (
                "601800 - Mat√©riel r√©seau et serveurs",
                "2500000",
                "2400000",
                "2800000",
                "120000",
                "2920000",
                "160000",
                "0",
                "2960000",
                "Switches, routeurs, serveurs",
            ),
            (
                "605000 - Licences logicielles",
                "1200000",
                "1150000",
                "1400000",
                "60000",
                "1460000",
                "80000",
                "0",
                "1480000",
                "Windows, Office, antivirus",
            ),
            (
                "SOUS-TOTAL Activit√© : Maintenance Infrastructure IT",
                "3700000",
                "3550000",
                "4200000",
                "180000",
                "4380000",
                "240000",
                "0",
                "4440000",
                "",
            ),
            # Activit√© 1.2.2.2
            ("Activit√© : Support Utilisateurs et Formation", "", "", "", "", "", "", "", "", ""),
            (
                "606100 - Formation informatique",
                "800000",
                "770000",
                "900000",
                "40000",
                "940000",
                "50000",
                "0",
                "950000",
                "Formation bureautique, cybers√©curit√©",
            ),
            (
                "622800 - Prestations de services IT",
                "1500000",
                "1450000",
                "1700000",
                "75000",
                "1775000",
                "95000",
                "0",
                "1795000",
                "Support technique externe",
            ),
            (
                "SOUS-TOTAL Activit√© : Support Utilisateurs et Formation",
                "2300000",
                "2220000",
                "2600000",
                "115000",
                "2715000",
                "145000",
                "0",
                "2745000",
                "",
            ),
            (
                "SOUS-TOTAL Service : Service Informatique",
                "6000000",
                "5770000",
                "6800000",
                "295000",
                "7095000",
                "385000",
                "0",
                "7185000",
                "",
            ),
            (
                "SOUS-TOTAL Action : Gestion des Ressources et Services G√©n√©raux",
                "14300000",
                "13670000",
                "16200000",
                "710000",
                "16910000",
                "915000",
                "0",
                "17115000",
                "",
            ),
            (
                "TOTAL BIENS ET SERVICES",
                "20900000",
                "19940000",
                "23700000",
                "1035000",
                "24735000",
                "1345000",
                "0",
                "25045000",
                "",
            ),
            # === NATURE 2 : PERSONNEL ===
            ("", "", "", "", "", "", "", "", "", ""),
            ("PERSONNEL", "", "", "", "", "", "", "", "", "Nature de d√©pense"),
            # Action 2.1
            (
                "Action : Gestion des Ressources Humaines",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "Recrutement, formation, administration du personnel",
            ),
            # Service 2.1.1
            ("Service B√©n√©ficiaire : Direction des Ressources Humaines", "", "", "", "", "", "", "", "", ""),
            # Activit√© 2.1.1.1
            ("Activit√© : Recrutement et Mobilit√©", "", "", "", "", "", "", "", "", ""),
            (
                "661100 - Salaires et traitements nouveaux agents",
                "15000000",
                "14500000",
                "17000000",
                "750000",
                "17750000",
                "1000000",
                "0",
                "18000000",
                "10 nouveaux recrutements",
            ),
            (
                "661200 - Indemnit√©s et primes",
                "3000000",
                "2900000",
                "3500000",
                "150000",
                "3650000",
                "200000",
                "0",
                "3700000",
                "Primes de rendement",
            ),
            (
                "SOUS-TOTAL Activit√© : Recrutement et Mobilit√©",
                "18000000",
                "17400000",
                "20500000",
                "900000",
                "21350000",
                "1200000",
                "0",
                "21700000",
                "",
            ),
            # Activit√© 2.1.1.2
            ("Activit√© : Formation et D√©veloppement des Comp√©tences", "", "", "", "", "", "", "", "", ""),
            (
                "661400 - Frais de formation continue",
                "2500000",
                "2400000",
                "2900000",
                "125000",
                "3025000",
                "165000",
                "0",
                "3065000",
                "Formations qualifiantes",
            ),
            (
                "661500 - S√©minaires et ateliers",
                "1500000",
                "1450000",
                "1800000",
                "75000",
                "1875000",
                "100000",
                "0",
                "1900000",
                "Ateliers de renforcement capacit√©s",
            ),
            (
                "SOUS-TOTAL Activit√© : Formation et D√©veloppement des Comp√©tences",
                "4000000",
                "3850000",
                "4700000",
                "200000",
                "4900000",
                "265000",
                "0",
                "4965000",
                "",
            ),
            (
                "SOUS-TOTAL Service : Direction des Ressources Humaines",
                "22000000",
                "21250000",
                "25200000",
                "1100000",
                "26250000",
                "1465000",
                "0",
                "26665000",
                "",
            ),
            # Service 2.1.2
            ("Service B√©n√©ficiaire : Services D√©concentr√©s", "", "", "", "", "", "", "", "", ""),
            # Activit√© 2.1.2.1
            ("Activit√© : Gestion Personnel D√©concentr√©", "", "", "", "", "", "", "", "", ""),
            (
                "661100 - Salaires personnel d√©concentr√©",
                "25000000",
                "24000000",
                "28000000",
                "1200000",
                "29200000",
                "1600000",
                "0",
                "29600000",
                "Agents en r√©gions",
            ),
            (
                "661300 - Charges sociales",
                "5000000",
                "4800000",
                "5600000",
                "240000",
                "5840000",
                "320000",
                "0",
                "5920000",
                "CNPS, assurances",
            ),
            (
                "SOUS-TOTAL Activit√© : Gestion Personnel D√©concentr√©",
                "30000000",
                "28800000",
                "33600000",
                "1440000",
                "35040000",
                "1920000",
                "0",
                "35520000",
                "",
            ),
            # Activit√© 2.1.2.2
            ("Activit√© : Avantages et ≈íuvres Sociales", "", "", "", "", "", "", "", "", ""),
            (
                "661600 - Allocations familiales",
                "3000000",
                "2900000",
                "3400000",
                "145000",
                "3545000",
                "190000",
                "0",
                "3590000",
                "Allocations",
            ),
            (
                "661700 - ≈íuvres sociales",
                "2000000",
                "1950000",
                "2300000",
                "95000",
                "2395000",
                "130000",
                "0",
                "2430000",
                "Assistance sociale",
            ),
            (
                "SOUS-TOTAL Activit√© : Avantages et ≈íuvres Sociales",
                "5000000",
                "4850000",
                "5700000",
                "240000",
                "5940000",
                "320000",
                "0",
                "6020000",
                "",
            ),
            (
                "SOUS-TOTAL Service : Services D√©concentr√©s",
                "35000000",
                "33650000",
                "39300000",
                "1680000",
                "40980000",
                "2240000",
                "0",
                "41540000",
                "",
            ),
            (
                "SOUS-TOTAL Action : Gestion des Ressources Humaines",
                "57000000",
                "54900000",
                "64500000",
                "2780000",
                "67230000",
                "3705000",
                "0",
                "68205000",
                "",
            ),
            # Action 2.2
            (
                "Action : Valorisation et Motivation du Personnel",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "Am√©lioration conditions de travail",
            ),
            # Service 2.2.1
            ("Service B√©n√©ficiaire : Direction du Bien-√™tre au Travail", "", "", "", "", "", "", "", "", ""),
            # Activit√© 2.2.1.1
            ("Activit√© : Sant√© et S√©curit√© au Travail", "", "", "", "", "", "", "", "", ""),
            (
                "661800 - Assurance maladie du personnel",
                "8000000",
                "7700000",
                "9000000",
                "385000",
                "9385000",
                "515000",
                "0",
                "9515000",
                "Couverture m√©dicale",
            ),
            (
                "661900 - M√©decine du travail",
                "1500000",
                "1450000",
                "1700000",
                "75000",
                "1775000",
                "95000",
                "0",
                "1795000",
                "Visites m√©dicales, vaccinations",
            ),
            (
                "SOUS-TOTAL Activit√© : Sant√© et S√©curit√© au Travail",
                "9500000",
                "9150000",
                "10700000",
                "460000",
                "11160000",
                "610000",
                "0",
                "11310000",
                "",
            ),
            # Activit√© 2.2.1.2
            ("Activit√© : Motivation et Reconnaissance", "", "", "", "", "", "", "", "", ""),
            (
                "662100 - Primes de performance",
                "5000000",
                "4800000",
                "5600000",
                "240000",
                "5840000",
                "320000",
                "0",
                "5920000",
                "Primes trimestrielles",
            ),
            (
                "662200 - Bonus et gratifications",
                "3000000",
                "2900000",
                "3400000",
                "145000",
                "3545000",
                "190000",
                "0",
                "3590000",
                "Primes de fin d'ann√©e",
            ),
            (
                "SOUS-TOTAL Activit√© : Motivation et Reconnaissance",
                "8000000",
                "7700000",
                "9000000",
                "385000",
                "9385000",
                "510000",
                "0",
                "9510000",
                "",
            ),
            (
                "SOUS-TOTAL Service : Direction du Bien-√™tre au Travail",
                "17500000",
                "16850000",
                "19700000",
                "845000",
                "20545000",
                "1120000",
                "0",
                "20820000",
                "",
            ),
            # Service 2.2.2
            ("Service B√©n√©ficiaire : Direction de la Formation", "", "", "", "", "", "", "", "", ""),
            # Activit√© 2.2.2.1
            ("Activit√© : Formation Continue et Perfectionnement", "", "", "", "", "", "", "", "", ""),
            (
                "662400 - Bourses de formation",
                "6000000",
                "5800000",
                "6800000",
                "290000",
                "7090000",
                "385000",
                "0",
                "7185000",
                "Formations dipl√¥mantes",
            ),
            (
                "662500 - Stages et s√©minaires internationaux",
                "4000000",
                "3850000",
                "4500000",
                "195000",
                "4695000",
                "255000",
                "0",
                "4755000",
                "Stages √† l'√©tranger",
            ),
            (
                "SOUS-TOTAL Activit√© : Formation Continue et Perfectionnement",
                "10000000",
                "9650000",
                "11300000",
                "485000",
                "11785000",
                "640000",
                "0",
                "11940000",
                "",
            ),
            # Activit√© 2.2.2.2
            ("Activit√© : Renforcement des Capacit√©s Techniques", "", "", "", "", "", "", "", "", ""),
            (
                "662600 - Formations techniques sp√©cialis√©es",
                "3500000",
                "3400000",
                "4000000",
                "170000",
                "4170000",
                "225000",
                "0",
                "4225000",
                "Formations m√©tiers",
            ),
            (
                "662700 - Certifications professionnelles",
                "2500000",
                "2400000",
                "2800000",
                "120000",
                "2920000",
                "160000",
                "0",
                "2960000",
                "Certifications ISO, PMP",
            ),
            (
                "SOUS-TOTAL Activit√© : Renforcement des Capacit√©s Techniques",
                "6000000",
                "5800000",
                "6800000",
                "290000",
                "7090000",
                "385000",
                "0",
                "7185000",
                "",
            ),
            (
                "SOUS-TOTAL Service : Direction de la Formation",
                "16000000",
                "15450000",
                "18100000",
                "775000",
                "18875000",
                "1025000",
                "0",
                "19125000",
                "",
            ),
            (
                "SOUS-TOTAL Action : Valorisation et Motivation du Personnel",
                "33500000",
                "32300000",
                "37800000",
                "1620000",
                "39420000",
                "2145000",
                "0",
                "39945000",
                "",
            ),
            (
                "TOTAL PERSONNEL",
                "90500000",
                "87200000",
                "102300000",
                "4400000",
                "106700000",
                "5850000",
                "0",
                "108150000",
                "",
            ),
            # === NATURE 3 : INVESTISSEMENT ===
            ("", "", "", "", "", "", "", "", "", ""),
            ("INVESTISSEMENT", "", "", "", "", "", "", "", "", "Nature de d√©pense"),
            # Action 3.1
            (
                "Action : √âquipements et Infrastructures",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "Modernisation des √©quipements",
            ),
            # Service 3.1.1
            ("Service B√©n√©ficiaire : Direction des Infrastructures", "", "", "", "", "", "", "", "", ""),
            # Activit√© 3.1.1.1
            ("Activit√© : Construction et R√©habilitation", "", "", "", "", "", "", "", "", ""),
            (
                "221100 - Travaux de construction",
                "50000000",
                "48000000",
                "58000000",
                "2500000",
                "60500000",
                "3300000",
                "0",
                "61300000",
                "Construction nouveaux locaux",
            ),
            (
                "221200 - R√©habilitation b√¢timents existants",
                "30000000",
                "29000000",
                "35000000",
                "1500000",
                "36500000",
                "2000000",
                "0",
                "37000000",
                "R√©novation bureaux",
            ),
            (
                "SOUS-TOTAL Activit√© : Construction et R√©habilitation",
                "80000000",
                "77000000",
                "93000000",
                "4000000",
                "97000000",
                "5300000",
                "0",
                "98300000",
                "",
            ),
            # Activit√© 3.1.1.2
            ("Activit√© : Am√©nagements et Installations", "", "", "", "", "", "", "", "", ""),
            (
                "221300 - Am√©nagements ext√©rieurs",
                "15000000",
                "14500000",
                "17500000",
                "750000",
                "18250000",
                "1000000",
                "0",
                "18500000",
                "Parkings, espaces verts",
            ),
            (
                "221400 - Installations techniques",
                "10000000",
                "9700000",
                "11500000",
                "490000",
                "11990000",
                "650000",
                "0",
                "12150000",
                "√âlectricit√©, plomberie",
            ),
            (
                "SOUS-TOTAL Activit√© : Am√©nagements et Installations",
                "25000000",
                "24200000",
                "29000000",
                "1240000",
                "30240000",
                "1650000",
                "0",
                "30650000",
                "",
            ),
            (
                "SOUS-TOTAL Service : Direction des Infrastructures",
                "105000000",
                "101200000",
                "122000000",
                "5240000",
                "127240000",
                "6950000",
                "0",
                "128950000",
                "",
            ),
            # Service 3.1.2
            ("Service B√©n√©ficiaire : Direction des √âquipements", "", "", "", "", "", "", "", "", ""),
            # Activit√© 3.1.2.1
            ("Activit√© : Acquisition Mat√©riels et √âquipements", "", "", "", "", "", "", "", "", ""),
            (
                "244100 - Mobilier de bureau",
                "12000000",
                "11600000",
                "14000000",
                "600000",
                "14600000",
                "800000",
                "0",
                "14800000",
                "Bureaux, chaises, armoires",
            ),
            (
                "244200 - Mat√©riel informatique",
                "20000000",
                "19300000",
                "23000000",
                "1000000",
                "24000000",
                "1300000",
                "0",
                "24300000",
                "PC, imprimantes, serveurs",
            ),
            (
                "SOUS-TOTAL Activit√© : Acquisition Mat√©riels et √âquipements",
                "32000000",
                "30900000",
                "37000000",
                "1600000",
                "38600000",
                "2100000",
                "0",
                "39100000",
                "",
            ),
            # Activit√© 3.1.2.2
            ("Activit√© : V√©hicules et Engins", "", "", "", "", "", "", "", "", ""),
            (
                "245100 - Acquisition v√©hicules de service",
                "35000000",
                "33800000",
                "40000000",
                "1720000",
                "41720000",
                "2280000",
                "0",
                "42280000",
                "V√©hicules 4x4, berlines",
            ),
            (
                "245200 - Engins et mat√©riel roulant",
                "18000000",
                "17400000",
                "21000000",
                "900000",
                "21900000",
                "1200000",
                "0",
                "22200000",
                "Engins de chantier",
            ),
            (
                "SOUS-TOTAL Activit√© : V√©hicules et Engins",
                "53000000",
                "51200000",
                "61000000",
                "2620000",
                "63620000",
                "3480000",
                "0",
                "64480000",
                "",
            ),
            (
                "SOUS-TOTAL Service : Direction des √âquipements",
                "85000000",
                "82100000",
                "98000000",
                "4220000",
                "102220000",
                "5580000",
                "0",
                "103580000",
                "",
            ),
            (
                "SOUS-TOTAL Action : √âquipements et Infrastructures",
                "190000000",
                "183300000",
                "220000000",
                "9460000",
                "229460000",
                "12530000",
                "0",
                "232530000",
                "",
            ),
            # Action 3.2
            ("Action : Modernisation et Digitalisation", "", "", "", "", "", "", "", "", "Transformation num√©rique"),
            # Service 3.2.1
            ("Service B√©n√©ficiaire : Direction de la Transformation Num√©rique", "", "", "", "", "", "", "", "", ""),
            # Activit√© 3.2.1.1
            ("Activit√© : Syst√®mes d'Information", "", "", "", "", "", "", "", "", ""),
            (
                "218300 - Logiciels de gestion int√©gr√©s (ERP)",
                "25000000",
                "24000000",
                "29000000",
                "1250000",
                "30250000",
                "1650000",
                "0",
                "30650000",
                "SAP, Oracle, Microsoft Dynamics",
            ),
            (
                "218400 - Infrastructure cloud et cybers√©curit√©",
                "15000000",
                "14500000",
                "17500000",
                "750000",
                "18250000",
                "1000000",
                "0",
                "18500000",
                "Serveurs cloud, pare-feu",
            ),
            (
                "SOUS-TOTAL Activit√© : Syst√®mes d'Information",
                "40000000",
                "38500000",
                "46500000",
                "2000000",
                "48500000",
                "2650000",
                "0",
                "49150000",
                "",
            ),
            # Activit√© 3.2.1.2
            ("Activit√© : √âquipements Technologiques", "", "", "", "", "", "", "", "", ""),
            (
                "218500 - √âquipements audiovisuels",
                "8000000",
                "7700000",
                "9200000",
                "395000",
                "9595000",
                "525000",
                "0",
                "9725000",
                "Vid√©oprojecteurs, √©crans",
            ),
            (
                "218600 - Solutions de visioconf√©rence",
                "6000000",
                "5800000",
                "7000000",
                "300000",
                "7300000",
                "400000",
                "0",
                "7400000",
                "Syst√®mes de r√©union √† distance",
            ),
            (
                "SOUS-TOTAL Activit√© : √âquipements Technologiques",
                "14000000",
                "13500000",
                "16200000",
                "695000",
                "16895000",
                "925000",
                "0",
                "17125000",
                "",
            ),
            (
                "SOUS-TOTAL Service : Direction de la Transformation Num√©rique",
                "54000000",
                "52000000",
                "62700000",
                "2695000",
                "65395000",
                "3575000",
                "0",
                "66275000",
                "",
            ),
            # Service 3.2.2
            ("Service B√©n√©ficiaire : Direction de l'Innovation", "", "", "", "", "", "", "", "", ""),
            # Activit√© 3.2.2.1
            ("Activit√© : Recherche et D√©veloppement", "", "", "", "", "", "", "", "", ""),
            (
                "218700 - √âquipements de laboratoire",
                "12000000",
                "11600000",
                "14000000",
                "600000",
                "14600000",
                "800000",
                "0",
                "14800000",
                "Mat√©riel scientifique",
            ),
            (
                "218800 - Prototypes et pilots",
                "8000000",
                "7700000",
                "9200000",
                "395000",
                "9595000",
                "525000",
                "0",
                "9725000",
                "Projets pilotes",
            ),
            (
                "SOUS-TOTAL Activit√© : Recherche et D√©veloppement",
                "20000000",
                "19300000",
                "23200000",
                "995000",
                "24195000",
                "1325000",
                "0",
                "24525000",
                "",
            ),
            # Activit√© 3.2.2.2
            ("Activit√© : Veille Technologique et Innovation", "", "", "", "", "", "", "", "", ""),
            (
                "218900 - Abonnements bases de donn√©es techniques",
                "5000000",
                "4800000",
                "5800000",
                "250000",
                "6050000",
                "330000",
                "0",
                "6130000",
                "Bases de donn√©es scientifiques",
            ),
            (
                "219000 - Partenariats innovation",
                "7000000",
                "6750000",
                "8100000",
                "350000",
                "8450000",
                "460000",
                "0",
                "8560000",
                "Collaborations universit√©s",
            ),
            (
                "SOUS-TOTAL Activit√© : Veille Technologique et Innovation",
                "12000000",
                "11550000",
                "13900000",
                "600000",
                "14500000",
                "790000",
                "0",
                "14690000",
                "",
            ),
            (
                "SOUS-TOTAL Service : Direction de l'Innovation",
                "32000000",
                "30850000",
                "37100000",
                "1595000",
                "38695000",
                "2115000",
                "0",
                "39215000",
                "",
            ),
            (
                "SOUS-TOTAL Action : Modernisation et Digitalisation",
                "86000000",
                "82850000",
                "99800000",
                "4290000",
                "104090000",
                "5690000",
                "0",
                "105490000",
                "",
            ),
            (
                "TOTAL INVESTISSEMENT",
                "276000000",
                "266150000",
                "319800000",
                "13750000",
                "333550000",
                "18220000",
                "0",
                "338020000",
                "",
            ),
            # === TOTAL G√âN√âRAL ===
            ("", "", "", "", "", "", "", "", "", ""),
            (
                "TOTAL G√âN√âRAL",
                "387400000",
                "373290000",
                "445800000",
                "19185000",
                "464985000",
                "25415000",
                "0",
                "471215000",
                "",
            ),
        ]

        current_row = 2

        # D√©finir les couleurs selon la hi√©rarchie (comme dans le PDF)
        nature_fill = PatternFill(start_color="FFD700", end_color="FFD700", fill_type="solid")  # Or (jaune dor√©)
        action_fill = PatternFill(start_color="9BC2E6", end_color="9BC2E6", fill_type="solid")  # Bleu clair
        service_fill = PatternFill(start_color="FFC000", end_color="FFC000", fill_type="solid")  # Jaune orang√©
        activite_fill = PatternFill(start_color="92D050", end_color="92D050", fill_type="solid")  # Vert clair
        ligne_fill = PatternFill(start_color="FFFFFF", end_color="FFFFFF", fill_type="solid")  # Blanc
        sous_total_activite_fill = PatternFill(
            start_color="D4EDDA", end_color="D4EDDA", fill_type="solid"
        )  # Vert tr√®s clair
        sous_total_service_fill = PatternFill(
            start_color="FFF3CD", end_color="FFF3CD", fill_type="solid"
        )  # Jaune tr√®s clair
        sous_total_action_fill = PatternFill(
            start_color="CCE5FF", end_color="CCE5FF", fill_type="solid"
        )  # Bleu tr√®s clair
        total_nature_fill = PatternFill(start_color="FFD700", end_color="FFD700", fill_type="solid")  # Or
        total_general_fill = PatternFill(start_color="DC3545", end_color="DC3545", fill_type="solid")  # Rouge

        for idx, exemple in enumerate(exemples):
            libelle = exemple[0]

            # D√©terminer le type de ligne et appliquer la couleur
            if libelle.upper() in ["BIENS ET SERVICES", "PERSONNEL", "INVESTISSEMENT", "INVESTISSEMENTS", "TRANSFERTS"]:
                row_fill = nature_fill
                row_font = Font(bold=True, size=11)
            elif libelle.startswith("Action :") or libelle.startswith("- Action :"):
                row_fill = action_fill
                row_font = Font(bold=True, size=10)
            elif libelle.startswith("Service B√©n√©ficiaire :") or libelle.startswith("- Service B√©n√©ficiaire :"):
                row_fill = service_fill
                row_font = Font(bold=True, size=9)
            elif libelle.startswith("Activit√© :") or libelle.startswith("- Activit√© :"):
                row_fill = activite_fill
                row_font = Font(bold=True, size=9)
            elif libelle.startswith("SOUS-TOTAL Activit√©"):
                row_fill = sous_total_activite_fill
                row_font = Font(bold=True, size=8, italic=True)
            elif libelle.startswith("SOUS-TOTAL Service"):
                row_fill = sous_total_service_fill
                row_font = Font(bold=True, size=9, italic=True)
            elif libelle.startswith("SOUS-TOTAL Action"):
                row_fill = sous_total_action_fill
                row_font = Font(bold=True, size=10, italic=True)
            elif libelle.startswith("TOTAL ") and not libelle.startswith("TOTAL G√âN√âRAL"):
                row_fill = total_nature_fill
                row_font = Font(bold=True, size=11)
            elif libelle.startswith("TOTAL G√âN√âRAL"):
                row_fill = total_general_fill
                row_font = Font(bold=True, size=12, color="FFFFFF")
            elif libelle == "":
                row_fill = PatternFill()  # Transparent
                row_font = Font(size=9)
            else:
                # Ligne budg√©taire normale
                row_fill = ligne_fill
                row_font = Font(size=9)

            for col_num, value in enumerate(exemple, 1):
                cell = ws.cell(row=current_row, column=col_num)
                cell.value = value
                cell.border = border_style
                cell.fill = row_fill
                cell.font = row_font

                # Aligner les nombres √† droite
                if col_num > 1 and col_num < 10 and value and value != "":
                    cell.alignment = Alignment(horizontal="right", vertical="center")
                else:
                    cell.alignment = Alignment(horizontal="left", vertical="center")

                # Formater les nombres
                if col_num > 1 and col_num < 10 and value and str(value).replace(" ", "").isdigit():
                    cell.number_format = "#,##0"

            current_row += 1

        # Ajouter une feuille d'instructions
        ws_instructions = wb.create_sheet("üìã Instructions")
        ws_instructions.column_dimensions["A"].width = 80

        instructions = [
            ("MOD√àLE DE FICHE TECHNIQUE BUDG√âTAIRE", header_font, header_fill),
            ("", None, None),
            ("üìÖ NOTATION TEMPORELLE", Font(bold=True, size=12, color="2196F3"), None),
            ("", None, None),
            ("N = Ann√©e en cours (ann√©e de r√©f√©rence)", None, None),
            ("N+1 = Ann√©e budg√©taire √† pr√©parer (ann√©e suivante)", None, None),
            ("", None, None),
            (
                "Exemple : Si vous pr√©parez le budget 2025, alors N = 2024 et N+1 = 2025",
                Font(italic=True),
                example_fill,
            ),
            ("", None, None),
            ("üìå STRUCTURE DU FICHIER", Font(bold=True, size=12), None),
            ("", None, None),
            ("Ce fichier doit respecter une hi√©rarchie stricte :", None, None),
            ("", None, None),
            ("1Ô∏è‚É£ NATURE DE D√âPENSE : BIENS ET SERVICES, PERSONNEL, INVESTISSEMENT, ou TRANSFERTS", None, example_fill),
            ("   ‚Üì", None, None),
            ("2Ô∏è‚É£ ACTION : Commencer par 'Action :' ou '- Action :'", None, example_fill),
            ("   ‚Üì", None, None),
            (
                "3Ô∏è‚É£ SERVICE B√âN√âFICIAIRE : Commencer par 'Service B√©n√©ficiaire :' ou '- Service B√©n√©ficiaire :'",
                None,
                example_fill,
            ),
            ("   ‚Üì", None, None),
            ("4Ô∏è‚É£ ACTIVIT√â : Commencer par 'Activit√© :' ou '- Activit√© :'", None, example_fill),
            ("   ‚Üì", None, None),
            ("5Ô∏è‚É£ LIGNES BUDG√âTAIRES : D√©tails des d√©penses (sans pr√©fixe sp√©cial)", None, example_fill),
            ("", None, None),
            ("", None, None),
            ("‚ö†Ô∏è R√àGLES IMPORTANTES", Font(bold=True, size=12, color="DC3545"), None),
            ("", None, None),
            ("‚úÖ Les montants doivent √™tre des nombres (sans espace ni symbole)", None, None),
            ("‚úÖ La colonne 'CODE / LIBELLE' ne doit JAMAIS √™tre vide", None, None),
            ("‚úÖ Respectez exactement les pr√©fixes : 'Action :', 'Service B√©n√©ficiaire :', 'Activit√© :'", None, None),
            ("‚úÖ Les natures de d√©penses doivent √™tre en MAJUSCULES", None, None),
            ("‚úÖ Ne supprimez pas les en-t√™tes de colonnes", None, None),
            ("", None, None),
            ("", None, None),
            ("üí° EXEMPLES", Font(bold=True, size=12, color="28A745"), None),
            ("", None, None),
            ("Consultez la feuille 'Fiche Technique' pour voir des exemples concrets.", None, None),
            ("Les lignes en gris sont des exemples √† SUPPRIMER avant de charger votre fichier.", None, None),
            ("", None, None),
            ("", None, None),
            (f"üìÖ Mod√®le g√©n√©r√© le {datetime.now().strftime('%d/%m/%Y √† %H:%M')}", Font(italic=True, size=9), None),
        ]

        for row_num, (text, font, fill) in enumerate(instructions, 1):
            cell = ws_instructions.cell(row=row_num, column=1)
            cell.value = text
            if font:
                cell.font = font
            if fill:
                cell.fill = fill
            cell.alignment = Alignment(horizontal="left", vertical="center", wrap_text=True)

        # Figer la premi√®re ligne (en-t√™tes uniquement) dans la feuille Fiche Technique
        ws.freeze_panes = "A2"

        # Sauvegarder dans un buffer
        buffer = BytesIO()
        wb.save(buffer)
        buffer.seek(0)

        # Log de l'activit√©
        logger.info(f"üì• Template de fiche technique t√©l√©charg√© par {current_user.email}")

        # Retourner le fichier (nom g√©n√©rique sans ann√©e)
        filename = "Modele_Fiche_Technique_N.xlsx"
        return StreamingResponse(
            buffer,
            media_type="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
            headers={"Content-Disposition": f"attachment; filename={filename}"},
        )

    except Exception as e:
        logger.error(f"Erreur g√©n√©ration template: {e}")
        raise HTTPException(500, f"Erreur lors de la g√©n√©ration du mod√®le: {e!s}")


@router.post("/api/charger-fiche")
async def api_charger_fiche(
    fichier: UploadFile = File(...),
    programme_id: int = Form(...),
    annee: int = Form(...),
    nom_fiche: str | None = Form(None),
    session: Session = Depends(get_session),
    current_user: User = Depends(get_current_user),
):
    """
    Charger et analyser une fiche technique depuis un fichier Excel/PDF
    """
    try:
        # V√©rifier que le programme existe
        programme = session.get(Programme, programme_id)
        if not programme:
            raise HTTPException(400, "Programme non trouv√©")

        # Lire le fichier
        content = await fichier.read()

        # D√©terminer le type de fichier
        if fichier.filename.endswith(".pdf"):
            return await _analyser_fiche_pdf(content, nom_fiche, programme_id, annee, session, current_user)
        elif fichier.filename.endswith((".xlsx", ".xls")):
            return await _analyser_fiche_excel(content, nom_fiche, programme_id, annee, session, current_user)
        else:
            raise HTTPException(400, "Format de fichier non support√©. Utilisez Excel (.xlsx, .xls) ou PDF (.pdf)")

    except Exception as e:
        logger.error(f"Erreur chargement fiche: {e}")
        raise HTTPException(500, f"Erreur lors du chargement: {e!s}")


async def _analyser_fiche_excel(
    content: bytes, nom_fiche: str | None, programme_id: int, annee: int, session: Session, current_user: User
):
    """
    Analyser un fichier Excel de fiche technique avec le template standardis√©
    Utilise le FicheTechniqueService pour toute la logique m√©tier
    """
    return FicheTechniqueService.analyser_fichier_excel(
        content=content,
        nom_fiche=nom_fiche,
        programme_id=programme_id,
        annee=annee,
        session=session,
        current_user=current_user,
    )


async def _analyser_fiche_pdf(
    content: bytes, nom_fiche: str | None, programme_id: int, annee: int, session: Session, current_user: User
):
    """
    Analyser un fichier PDF de fiche technique et extraire la structure hi√©rarchique
    """
    try:
        from io import BytesIO

        import PyPDF2
    except ImportError:
        raise HTTPException(
            500,
            "‚ùå PyPDF2 n'est pas install√©.\n\n"
            "üí° Installez-le avec : uv add pypdf2\n\n"
            "üì• Ou utilisez le mod√®le Excel pour plus de fiabilit√©.",
        )

    try:
        # Extraire le texte du PDF
        pdf_reader = PyPDF2.PdfReader(BytesIO(content))

        logger.info(f"üìÑ PDF charg√© : {len(pdf_reader.pages)} page(s)")

        # Extraire tout le texte
        full_text = ""
        for page_num, page in enumerate(pdf_reader.pages):
            text = page.extract_text()
            full_text += text + "\n"
            logger.debug(f"  üìÑ Page {page_num + 1} : {len(text)} caract√®res")

        if not full_text.strip():
            raise HTTPException(
                400, "‚ùå Impossible d'extraire le texte du PDF. Le fichier est peut-√™tre scann√© ou prot√©g√©."
            )

        logger.info(f"‚úÖ Texte extrait : {len(full_text)} caract√®res")

        # Cr√©er un DataFrame √† partir du texte pars√©
        df_data = []
        lignes_texte = full_text.split("\n")

        current_nature = None
        current_action = None
        current_service = None
        current_activite = None

        for ligne_idx, ligne in enumerate(lignes_texte):
            ligne = ligne.strip()
            if not ligne:
                continue

            # D√©tecter les natures de d√©penses
            if ligne.upper() in ["BIENS ET SERVICES", "PERSONNEL", "INVESTISSEMENT", "INVESTISSEMENTS", "TRANSFERTS"]:
                current_nature = ligne.upper()
                df_data.append({"type": "nature", "nature": current_nature, "libelle": ligne, "montants": {}})
                logger.debug(f"üìå Nature : {current_nature}")
                continue

            # D√©tecter les actions (avec pattern flexible)
            if any(ligne.startswith(p) for p in ["Action :", "- Action :", "ACTION :"]):
                action_libelle = ligne.replace("Action :", "").replace("- Action :", "").replace("ACTION :", "").strip()
                current_action = action_libelle
                df_data.append(
                    {
                        "type": "action",
                        "nature": current_nature,
                        "libelle": action_libelle,
                        "montants": _extraire_montants_ligne(ligne),
                    }
                )
                logger.debug(f"  ‚Üí Action : {action_libelle[:50]}")
                continue

            # D√©tecter les services
            if any(ligne.startswith(p) for p in ["Service B√©n√©ficiaire :", "- Service B√©n√©ficiaire :", "SERVICE :"]):
                service_libelle = (
                    ligne.replace("Service B√©n√©ficiaire :", "")
                    .replace("- Service B√©n√©ficiaire :", "")
                    .replace("SERVICE :", "")
                    .strip()
                )
                current_service = service_libelle
                df_data.append(
                    {
                        "type": "service",
                        "nature": current_nature,
                        "action": current_action,
                        "libelle": service_libelle,
                        "montants": {},
                    }
                )
                logger.debug(f"    ‚Üí Service : {service_libelle[:50]}")
                continue

            # D√©tecter les activit√©s
            if any(ligne.startswith(p) for p in ["Activit√© :", "- Activit√© :", "ACTIVIT√â :", "ACTIVITE :"]):
                activite_libelle = (
                    ligne.replace("Activit√© :", "")
                    .replace("- Activit√© :", "")
                    .replace("ACTIVIT√â :", "")
                    .replace("ACTIVITE :", "")
                    .strip()
                )
                current_activite = activite_libelle
                df_data.append(
                    {
                        "type": "activite",
                        "nature": current_nature,
                        "action": current_action,
                        "service": current_service,
                        "libelle": activite_libelle,
                        "montants": _extraire_montants_ligne(ligne),
                    }
                )
                logger.debug(f"      ‚Üí Activit√© : {activite_libelle[:50]}")
                continue

            # D√©tecter les lignes budg√©taires (commence par un num√©ro de compte)
            if ligne and ligne[0].isdigit() and len(ligne) > 5:
                df_data.append(
                    {
                        "type": "ligne",
                        "nature": current_nature,
                        "action": current_action,
                        "service": current_service,
                        "activite": current_activite,
                        "libelle": ligne,
                        "montants": _extraire_montants_ligne(ligne),
                    }
                )
                logger.debug(f"        ‚Üí Ligne : {ligne[:50]}")

        logger.info(f"‚úÖ {len(df_data)} √©l√©ments extraits du PDF")

        # Cr√©er la fiche et la structure
        prog = session.get(Programme, programme_id)
        if not prog:
            raise HTTPException(400, "Programme non trouv√©")

        # G√©n√©rer num√©ro de fiche
        count = session.exec(select(func.count(FicheTechnique.id)).where(FicheTechnique.annee_budget == annee)).one()

        numero_fiche = nom_fiche or f"FT-{annee}-{prog.code}-{count + 1:03d}"

        fiche = FicheTechnique(
            numero_fiche=numero_fiche,
            annee_budget=annee,
            programme_id=programme_id,
            direction_id=None,
            budget_total_demande=Decimal("0"),
            statut="Brouillon",
            phase="Conf√©rence interne",
            created_by_user_id=current_user.id,
        )

        session.add(fiche)
        session.commit()
        session.refresh(fiche)

        logger.info(f"‚úÖ Fiche cr√©√©e : {fiche.numero_fiche}")

        # Cr√©er la structure depuis les donn√©es extraites
        result = _creer_structure_depuis_pdf_data(df_data, fiche.id, session)

        # Recalculer les totaux
        FicheTechniqueService._recalculer_totaux_hierarchie(fiche.id, session)

        # Mettre √† jour le budget total
        fiche_updated = session.get(FicheTechnique, fiche.id)
        if fiche_updated:
            budget_total = sum(
                action.projet_budget_n_plus_1 or Decimal("0")
                for action in session.exec(
                    select(ActionBudgetaire).where(ActionBudgetaire.fiche_technique_id == fiche.id)
                ).all()
            )
            fiche_updated.budget_total_demande = budget_total
            session.add(fiche_updated)
            session.commit()

        return {
            "ok": True,
            "fiche_numero": fiche.numero_fiche,
            "actions_count": result["actions_count"],
            "services_count": result["services_count"],
            "activites_count": result["activites_count"],
            "lignes_count": result["lignes_count"],
            "budget_total": float(budget_total),
            "errors": result.get("errors", []),
        }

    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"‚ùå Erreur analyse PDF : {e}")
        raise HTTPException(500, f"Erreur lors de l'analyse du PDF : {e!s}")


def _extraire_montants_ligne(ligne: str) -> dict:
    """
    Extraire les montants d'une ligne de texte PDF
    Recherche des nombres (avec ou sans s√©parateurs)
    """
    import re

    # Pattern pour trouver les nombres (avec espaces, virgules, points)
    pattern = r"[\d\s,\.]+(?=\s|$)"
    montants_trouves = re.findall(pattern, ligne)

    montants = {}
    colonnes = [
        "budget_vote_n",
        "budget_actuel_n",
        "enveloppe_n_plus_1",
        "complement_solicite",
        "budget_souhaite",
        "engagement_etat",
        "autre_complement",
        "projet_budget_n_plus_1",
    ]

    for idx, montant_str in enumerate(montants_trouves):
        if idx < len(colonnes):
            try:
                # Nettoyer le montant
                montant_clean = montant_str.replace(" ", "").replace(",", "").replace(".", "")
                if montant_clean.isdigit():
                    montants[colonnes[idx]] = Decimal(montant_clean)
            except:
                pass

    return montants


def _creer_structure_depuis_pdf_data(df_data: list, fiche_id: int, session: Session) -> dict:
    """
    Cr√©er la structure hi√©rarchique depuis les donn√©es extraites du PDF
    """
    actions_count = 0
    services_count = 0
    activites_count = 0
    lignes_count = 0
    errors = []

    actions_map = {}  # {libelle_action: action_obj}
    services_map = {}  # {(libelle_action, libelle_service): service_obj}
    activites_map = {}  # {(libelle_action, libelle_service, libelle_activite): activite_obj}

    for idx, item in enumerate(df_data):
        try:
            if item["type"] == "nature":
                # Juste pour le contexte, pas d'objet √† cr√©er
                continue

            elif item["type"] == "action":
                action_key = item["libelle"]
                if action_key not in actions_map:
                    # G√©n√©rer code
                    code = f"ACT_{actions_count + 1:03d}"

                    action = ActionBudgetaire(
                        fiche_technique_id=fiche_id,
                        nature_depense=item.get("nature"),
                        code=code,
                        libelle=item["libelle"],
                        budget_vote_n=item["montants"].get("budget_vote_n", Decimal("0")),
                        budget_actuel_n=item["montants"].get("budget_actuel_n", Decimal("0")),
                        enveloppe_n_plus_1=item["montants"].get("enveloppe_n_plus_1", Decimal("0")),
                        complement_solicite=item["montants"].get("complement_solicite", Decimal("0")),
                        budget_souhaite=item["montants"].get("budget_souhaite", Decimal("0")),
                        engagement_etat=item["montants"].get("engagement_etat", Decimal("0")),
                        autre_complement=item["montants"].get("autre_complement", Decimal("0")),
                        projet_budget_n_plus_1=item["montants"].get("projet_budget_n_plus_1", Decimal("0")),
                        ordre=actions_count,
                    )
                    session.add(action)
                    session.commit()
                    session.refresh(action)
                    actions_map[action_key] = action
                    actions_count += 1
                    logger.debug(f"  ‚úÖ Action cr√©√©e : {item['libelle'][:50]}")

            elif item["type"] == "service":
                service_key = (item.get("action"), item["libelle"])
                if service_key not in services_map:
                    action_parent = actions_map.get(item.get("action"))
                    if action_parent:
                        code = f"SRV_{services_count + 1:03d}"

                        service = ServiceBeneficiaire(
                            fiche_technique_id=fiche_id,
                            action_id=action_parent.id,
                            code=code,
                            libelle=item["libelle"],
                            ordre=services_count,
                        )
                        session.add(service)
                        session.commit()
                        session.refresh(service)
                        services_map[service_key] = service
                        services_count += 1
                        logger.debug(f"    ‚úÖ Service cr√©√© : {item['libelle'][:50]}")
                    else:
                        errors.append(f"Service sans action : {item['libelle']}")

            elif item["type"] == "activite":
                activite_key = (item.get("action"), item.get("service"), item["libelle"])
                if activite_key not in activites_map:
                    service_parent = services_map.get((item.get("action"), item.get("service")))
                    if service_parent:
                        code = f"ACTIV_{activites_count + 1:03d}"

                        activite = ActiviteBudgetaire(
                            fiche_technique_id=fiche_id,
                            service_beneficiaire_id=service_parent.id,
                            code=code,
                            libelle=item["libelle"],
                            budget_vote_n=item["montants"].get("budget_vote_n", Decimal("0")),
                            budget_actuel_n=item["montants"].get("budget_actuel_n", Decimal("0")),
                            enveloppe_n_plus_1=item["montants"].get("enveloppe_n_plus_1", Decimal("0")),
                            complement_solicite=item["montants"].get("complement_solicite", Decimal("0")),
                            budget_souhaite=item["montants"].get("budget_souhaite", Decimal("0")),
                            engagement_etat=item["montants"].get("engagement_etat", Decimal("0")),
                            autre_complement=item["montants"].get("autre_complement", Decimal("0")),
                            projet_budget_n_plus_1=item["montants"].get("projet_budget_n_plus_1", Decimal("0")),
                            ordre=activites_count,
                        )
                        session.add(activite)
                        session.commit()
                        session.refresh(activite)
                        activites_map[activite_key] = activite
                        activites_count += 1
                        logger.debug(f"      ‚úÖ Activit√© cr√©√©e : {item['libelle'][:50]}")
                    else:
                        errors.append(f"Activit√© sans service : {item['libelle']}")

            elif item["type"] == "ligne":
                activite_parent = activites_map.get((item.get("action"), item.get("service"), item.get("activite")))
                if activite_parent:
                    # Extraire le code du d√©but de la ligne
                    libelle = item["libelle"]
                    code_match = re.match(r"^(\d+)", libelle)
                    code = code_match.group(1) if code_match else f"LIGNE_{lignes_count + 1:05d}"

                    ligne = LigneBudgetaireDetail(
                        fiche_technique_id=fiche_id,
                        activite_id=activite_parent.id,
                        code=code,
                        libelle=libelle,
                        budget_vote_n=item["montants"].get("budget_vote_n", Decimal("0")),
                        budget_actuel_n=item["montants"].get("budget_actuel_n", Decimal("0")),
                        enveloppe_n_plus_1=item["montants"].get("enveloppe_n_plus_1", Decimal("0")),
                        complement_solicite=item["montants"].get("complement_solicite", Decimal("0")),
                        budget_souhaite=item["montants"].get("budget_souhaite", Decimal("0")),
                        engagement_etat=item["montants"].get("engagement_etat", Decimal("0")),
                        autre_complement=item["montants"].get("autre_complement", Decimal("0")),
                        projet_budget_n_plus_1=item["montants"].get("projet_budget_n_plus_1", Decimal("0")),
                        ordre=lignes_count,
                    )
                    session.add(ligne)
                    session.commit()
                    session.refresh(ligne)
                    lignes_count += 1
                    logger.debug(f"        ‚úÖ Ligne cr√©√©e : {libelle[:50]}")
                else:
                    errors.append(f"Ligne sans activit√© : {item['libelle']}")

        except Exception as e:
            errors.append(f"Erreur √©l√©ment {idx}: {e!s}")
            logger.error(f"‚ùå Erreur √©l√©ment {idx}: {e}")

    logger.info(
        f"üìä Structure cr√©√©e : {actions_count} actions, {services_count} services, {activites_count} activit√©s, {lignes_count} lignes"
    )

    return {
        "actions_count": actions_count,
        "services_count": services_count,
        "activites_count": activites_count,
        "lignes_count": lignes_count,
        "errors": errors,
    }


# ============================================
# CR√âATION DES √âL√âMENTS HI√âRARCHIQUES
# ============================================


@router.post("/api/actions")
async def api_create_action(
    fiche_id: int = Form(...),
    nature_depense: str = Form(...),
    code: str = Form(...),
    libelle: str = Form(...),
    session: Session = Depends(get_session),
    current_user: User = Depends(get_current_user),
):
    """Cr√©er une nouvelle action"""
    fiche = session.get(FicheTechnique, fiche_id)
    if not fiche:
        raise HTTPException(404, "Fiche technique non trouv√©e")

    try:
        # D√©terminer l'ordre
        max_ordre = (
            session.exec(
                select(func.max(ActionBudgetaire.ordre)).where(ActionBudgetaire.fiche_technique_id == fiche.id)
            ).one()
            or 0
        )

        action = ActionBudgetaire(
            fiche_technique_id=fiche.id,
            nature_depense=nature_depense,
            code=code,
            libelle=libelle,
            ordre=max_ordre + 1,
            budget_vote_n=Decimal("0"),
            budget_actuel_n=Decimal("0"),
            enveloppe_n_plus_1=Decimal("0"),
            complement_solicite=Decimal("0"),
            budget_souhaite=Decimal("0"),
            engagement_etat=Decimal("0"),
            autre_complement=Decimal("0"),
            projet_budget_n_plus_1=Decimal("0"),
        )

        session.add(action)
        session.commit()
        session.refresh(action)

        logger.info(f"‚úÖ Action {code} cr√©√©e par {current_user.email}")
        return {"ok": True, "id": action.id, "message": "Action cr√©√©e avec succ√®s"}
    except Exception as e:
        session.rollback()
        logger.error(f"‚ùå Erreur cr√©ation action: {e}")
        raise HTTPException(500, f"Erreur lors de la cr√©ation: {e!s}")


@router.post("/api/services")
async def api_create_service(
    action_id: int = Form(...),
    code: str = Form(...),
    libelle: str = Form(...),
    session: Session = Depends(get_session),
    current_user: User = Depends(get_current_user),
):
    """Cr√©er un nouveau service b√©n√©ficiaire"""
    action = session.get(ActionBudgetaire, action_id)
    if not action:
        raise HTTPException(404, "Action parente non trouv√©e")

    try:
        # D√©terminer l'ordre
        max_ordre = (
            session.exec(
                select(func.max(ServiceBeneficiaire.ordre)).where(ServiceBeneficiaire.action_id == action_id)
            ).one()
            or 0
        )

        service = ServiceBeneficiaire(
            fiche_technique_id=action.fiche_technique_id,
            action_id=action_id,
            code=code,
            libelle=libelle,
            ordre=max_ordre + 1,
        )

        session.add(service)
        session.commit()
        session.refresh(service)

        logger.info(f"‚úÖ Service {code} cr√©√© par {current_user.email}")
        return {"ok": True, "id": service.id, "message": "Service cr√©√© avec succ√®s"}
    except Exception as e:
        session.rollback()
        logger.error(f"‚ùå Erreur cr√©ation service: {e}")
        raise HTTPException(500, f"Erreur lors de la cr√©ation: {e!s}")


@router.post("/api/activites")
async def api_create_activite(
    service_id: int = Form(...),
    code: str = Form(...),
    libelle: str = Form(...),
    session: Session = Depends(get_session),
    current_user: User = Depends(get_current_user),
):
    """Cr√©er une nouvelle activit√©"""
    service = session.get(ServiceBeneficiaire, service_id)
    if not service:
        raise HTTPException(404, "Service parent non trouv√©")

    try:
        # D√©terminer l'ordre
        max_ordre = (
            session.exec(
                select(func.max(ActiviteBudgetaire.ordre)).where(
                    ActiviteBudgetaire.service_beneficiaire_id == service_id
                )
            ).one()
            or 0
        )

        activite = ActiviteBudgetaire(
            fiche_technique_id=service.fiche_technique_id,
            service_beneficiaire_id=service_id,
            code=code,
            libelle=libelle,
            ordre=max_ordre + 1,
            budget_vote_n=Decimal("0"),
            budget_actuel_n=Decimal("0"),
            enveloppe_n_plus_1=Decimal("0"),
            complement_solicite=Decimal("0"),
            budget_souhaite=Decimal("0"),
            engagement_etat=Decimal("0"),
            autre_complement=Decimal("0"),
            projet_budget_n_plus_1=Decimal("0"),
        )

        session.add(activite)
        session.commit()
        session.refresh(activite)

        logger.info(f"‚úÖ Activit√© {code} cr√©√©e par {current_user.email}")
        return {"ok": True, "id": activite.id, "message": "Activit√© cr√©√©e avec succ√®s"}
    except Exception as e:
        session.rollback()
        logger.error(f"‚ùå Erreur cr√©ation activit√©: {e}")
        raise HTTPException(500, f"Erreur lors de la cr√©ation: {e!s}")


@router.post("/api/lignes")
async def api_create_ligne(
    activite_id: int = Form(...),
    code: str = Form(...),
    libelle: str = Form(...),
    budget_vote_n: float = Form(0),
    budget_actuel_n: float = Form(0),
    enveloppe_n_plus_1: float = Form(0),
    complement_solicite: float = Form(0),
    engagement_etat: float = Form(0),
    autre_complement: float = Form(0),
    justificatifs: str | None = Form(None),
    documents: list[UploadFile] = File(default=[]),
    session: Session = Depends(get_session),
    current_user: User = Depends(get_current_user),
):
    """Cr√©er une nouvelle ligne budg√©taire avec documents"""
    activite = session.get(ActiviteBudgetaire, activite_id)
    if not activite:
        raise HTTPException(404, "Activit√© parente non trouv√©e")

    try:
        # R√©cup√©rer les codes pour le renommage des fichiers
        service = session.get(ServiceBeneficiaire, activite.service_beneficiaire_id)
        action = session.get(ActionBudgetaire, service.action_id)

        # D√©terminer l'ordre
        max_ordre = (
            session.exec(
                select(func.max(LigneBudgetaireDetail.ordre)).where(LigneBudgetaireDetail.activite_id == activite_id)
            ).one()
            or 0
        )

        # Cr√©er la ligne budg√©taire
        ligne = LigneBudgetaireDetail(
            fiche_technique_id=activite.fiche_technique_id,
            activite_id=activite_id,
            code=code,
            libelle=libelle,
            ordre=max_ordre + 1,
            budget_vote_n=Decimal(str(budget_vote_n)),
            budget_actuel_n=Decimal(str(budget_actuel_n)),
            enveloppe_n_plus_1=Decimal(str(enveloppe_n_plus_1)),
            complement_solicite=Decimal(str(complement_solicite)),
            engagement_etat=Decimal(str(engagement_etat)),
            autre_complement=Decimal(str(autre_complement)),
            justificatifs=justificatifs,
        )

        # Calculer les champs d√©riv√©s
        ligne.budget_souhaite = ligne.enveloppe_n_plus_1 + ligne.complement_solicite
        ligne.projet_budget_n_plus_1 = ligne.enveloppe_n_plus_1 + ligne.engagement_etat + ligne.autre_complement

        session.add(ligne)
        session.commit()
        session.refresh(ligne)

        # G√©rer l'upload des documents
        documents_count = 0
        if documents and len(documents) > 0 and documents[0].filename:
            docs_dir = Path(f"uploads/budget/lignes/{ligne.id}")
            docs_dir.mkdir(parents=True, exist_ok=True)

            for doc in documents:
                if doc.filename:
                    # Renommer le fichier selon le format : CodeAction_CodeActivit√©_CodeLigne_NomOriginal.ext
                    file_ext = Path(doc.filename).suffix
                    original_name = Path(doc.filename).stem
                    new_filename = f"{action.code}_{activite.code}_{code}_{original_name}{file_ext}"

                    # Sauvegarder le fichier
                    file_path = docs_dir / new_filename
                    content = await doc.read()

                    with open(file_path, "wb") as f:
                        f.write(content)

                    # Enregistrer les m√©tadonn√©es en base
                    doc_meta = DocumentLigneBudgetaire(
                        ligne_budgetaire_id=ligne.id,
                        fiche_technique_id=activite.fiche_technique_id,
                        nom_fichier_original=doc.filename,
                        nom_fichier_stocke=new_filename,
                        chemin_fichier=str(file_path),
                        type_fichier=file_ext,
                        taille_octets=len(content),
                        code_action=action.code,
                        code_activite=activite.code,
                        code_ligne=code,
                        uploaded_by_user_id=current_user.id,
                    )
                    session.add(doc_meta)

                    documents_count += 1
                    logger.info(f"üìé Document sauvegard√© : {new_filename}")

            # Committer les m√©tadonn√©es des documents
            session.commit()

        # Recalculer les totaux de toute la hi√©rarchie
        FicheTechniqueService._recalculer_totaux_hierarchie(activite.fiche_technique_id, session)

        logger.info(f"‚úÖ Ligne budg√©taire {code} cr√©√©e avec {documents_count} document(s) par {current_user.email}")
        return {
            "ok": True,
            "id": ligne.id,
            "documents_count": documents_count,
            "message": f"Ligne budg√©taire cr√©√©e avec {documents_count} document(s)",
        }
    except Exception as e:
        session.rollback()
        logger.error(f"‚ùå Erreur cr√©ation ligne: {e}")
        raise HTTPException(500, f"Erreur lors de la cr√©ation: {e!s}")


# ============================================
# √âDITION DES √âL√âMENTS HI√âRARCHIQUES
# ============================================


@router.put("/api/actions/{action_id}")
def api_update_action(
    action_id: int,
    libelle: str = Form(...),
    session: Session = Depends(get_session),
    current_user: User = Depends(get_current_user),
):
    """Modifier le libell√© d'une action (les montants sont recalcul√©s automatiquement)"""
    action = session.get(ActionBudgetaire, action_id)
    if not action:
        raise HTTPException(404, "Action non trouv√©e")

    try:
        action.libelle = libelle
        action.updated_at = datetime.utcnow()
        session.add(action)
        session.commit()

        logger.info(f"‚úÖ Action {action_id} modifi√©e par {current_user.email}")
        return {"ok": True, "message": "Action modifi√©e avec succ√®s"}
    except Exception as e:
        session.rollback()
        logger.error(f"‚ùå Erreur modification action {action_id}: {e}")
        raise HTTPException(500, f"Erreur lors de la modification: {e!s}")


@router.put("/api/services/{service_id}")
def api_update_service(
    service_id: int,
    libelle: str = Form(...),
    session: Session = Depends(get_session),
    current_user: User = Depends(get_current_user),
):
    """Modifier le libell√© d'un service (les montants sont recalcul√©s automatiquement)"""
    service = session.get(ServiceBeneficiaire, service_id)
    if not service:
        raise HTTPException(404, "Service non trouv√©")

    try:
        service.libelle = libelle
        service.updated_at = datetime.utcnow()
        session.add(service)
        session.commit()

        logger.info(f"‚úÖ Service {service_id} modifi√© par {current_user.email}")
        return {"ok": True, "message": "Service modifi√© avec succ√®s"}
    except Exception as e:
        session.rollback()
        logger.error(f"‚ùå Erreur modification service {service_id}: {e}")
        raise HTTPException(500, f"Erreur lors de la modification: {e!s}")


@router.put("/api/activites/{activite_id}")
def api_update_activite(
    activite_id: int,
    libelle: str = Form(...),
    session: Session = Depends(get_session),
    current_user: User = Depends(get_current_user),
):
    """Modifier le libell√© d'une activit√© (les montants sont recalcul√©s automatiquement)"""
    activite = session.get(ActiviteBudgetaire, activite_id)
    if not activite:
        raise HTTPException(404, "Activit√© non trouv√©e")

    try:
        activite.libelle = libelle
        activite.updated_at = datetime.utcnow()
        session.add(activite)
        session.commit()

        logger.info(f"‚úÖ Activit√© {activite_id} modifi√©e par {current_user.email}")
        return {"ok": True, "message": "Activit√© modifi√©e avec succ√®s"}
    except Exception as e:
        session.rollback()
        logger.error(f"‚ùå Erreur modification activit√© {activite_id}: {e}")
        raise HTTPException(500, f"Erreur lors de la modification: {e!s}")


@router.put("/api/lignes/{ligne_id}")
def api_update_ligne(
    ligne_id: int,
    libelle: str = Form(...),
    budget_vote_n: float | None = Form(None),
    budget_actuel_n: float | None = Form(None),
    enveloppe_n_plus_1: float | None = Form(None),
    complement_solicite: float | None = Form(None),
    engagement_etat: float | None = Form(None),
    autre_complement: float | None = Form(None),
    justificatifs: str | None = Form(None),
    session: Session = Depends(get_session),
    current_user: User = Depends(get_current_user),
):
    """Modifier une ligne budg√©taire (libell√© + montants)"""
    ligne = session.get(LigneBudgetaireDetail, ligne_id)
    if not ligne:
        raise HTTPException(404, "Ligne budg√©taire non trouv√©e")

    try:
        # Mise √† jour des champs
        ligne.libelle = libelle
        if budget_vote_n is not None:
            ligne.budget_vote_n = Decimal(str(budget_vote_n))
        if budget_actuel_n is not None:
            ligne.budget_actuel_n = Decimal(str(budget_actuel_n))
        if enveloppe_n_plus_1 is not None:
            ligne.enveloppe_n_plus_1 = Decimal(str(enveloppe_n_plus_1))
        if complement_solicite is not None:
            ligne.complement_solicite = Decimal(str(complement_solicite))
        if engagement_etat is not None:
            ligne.engagement_etat = Decimal(str(engagement_etat))
        if autre_complement is not None:
            ligne.autre_complement = Decimal(str(autre_complement))

        # Recalculer les champs d√©riv√©s
        ligne.budget_souhaite = ligne.enveloppe_n_plus_1 + ligne.complement_solicite
        ligne.projet_budget_n_plus_1 = ligne.enveloppe_n_plus_1 + ligne.engagement_etat + ligne.autre_complement

        if justificatifs is not None:
            ligne.justificatifs = justificatifs

        ligne.updated_at = datetime.utcnow()
        session.add(ligne)
        session.commit()

        # Recalculer les totaux de toute la hi√©rarchie
        FicheTechniqueService._recalculer_totaux_hierarchie(ligne.fiche_technique_id, session)

        logger.info(f"‚úÖ Ligne budg√©taire {ligne_id} modifi√©e par {current_user.email}")
        return {"ok": True, "message": "Ligne budg√©taire modifi√©e avec succ√®s"}
    except Exception as e:
        session.rollback()
        logger.error(f"‚ùå Erreur modification ligne {ligne_id}: {e}")
        raise HTTPException(500, f"Erreur lors de la modification: {e!s}")


# ============================================
# SUPPRESSION DES √âL√âMENTS HI√âRARCHIQUES
# ============================================


@router.delete("/api/actions/{action_id}")
def api_delete_action(
    action_id: int, session: Session = Depends(get_session), current_user: User = Depends(get_current_user)
):
    """Supprimer une action (uniquement si elle n'a pas d'enfants)"""
    action = session.get(ActionBudgetaire, action_id)
    if not action:
        raise HTTPException(404, "Action non trouv√©e")

    try:
        # V√©rifier qu'il n'y a pas de services enfants
        services_count = session.exec(
            select(func.count(ServiceBeneficiaire.id)).where(ServiceBeneficiaire.action_id == action_id)
        ).one()

        if services_count > 0:
            raise HTTPException(
                400,
                f"Impossible de supprimer cette action : elle contient {services_count} service(s). Veuillez d'abord supprimer tous les services enfants.",
            )

        fiche_id = action.fiche_technique_id

        # Supprimer l'action (aucun enfant)
        session.delete(action)
        session.commit()

        # Recalculer les totaux
        FicheTechniqueService._recalculer_totaux_hierarchie(fiche_id, session)

        logger.info(f"‚úÖ Action {action_id} supprim√©e par {current_user.email}")
        return {"ok": True, "message": "Action supprim√©e avec succ√®s"}
    except HTTPException:
        raise
    except Exception as e:
        session.rollback()
        logger.error(f"‚ùå Erreur suppression action {action_id}: {e}")
        raise HTTPException(500, f"Erreur lors de la suppression: {e!s}")


@router.delete("/api/services/{service_id}")
def api_delete_service(
    service_id: int, session: Session = Depends(get_session), current_user: User = Depends(get_current_user)
):
    """Supprimer un service (uniquement s'il n'a pas d'enfants)"""
    service = session.get(ServiceBeneficiaire, service_id)
    if not service:
        raise HTTPException(404, "Service non trouv√©")

    try:
        # V√©rifier qu'il n'y a pas d'activit√©s enfants
        activites_count = session.exec(
            select(func.count(ActiviteBudgetaire.id)).where(ActiviteBudgetaire.service_beneficiaire_id == service_id)
        ).one()

        if activites_count > 0:
            raise HTTPException(
                400,
                f"Impossible de supprimer ce service : il contient {activites_count} activit√©(s). Veuillez d'abord supprimer toutes les activit√©s enfants.",
            )

        fiche_id = service.fiche_technique_id

        # Supprimer le service (aucun enfant)
        session.delete(service)
        session.commit()

        # Recalculer les totaux
        FicheTechniqueService._recalculer_totaux_hierarchie(fiche_id, session)

        logger.info(f"‚úÖ Service {service_id} supprim√© par {current_user.email}")
        return {"ok": True, "message": "Service supprim√© avec succ√®s"}
    except HTTPException:
        raise
    except Exception as e:
        session.rollback()
        logger.error(f"‚ùå Erreur suppression service {service_id}: {e}")
        raise HTTPException(500, f"Erreur lors de la suppression: {e!s}")


@router.delete("/api/activites/{activite_id}")
def api_delete_activite(
    activite_id: int, session: Session = Depends(get_session), current_user: User = Depends(get_current_user)
):
    """Supprimer une activit√© (uniquement si elle n'a pas de lignes)"""
    activite = session.get(ActiviteBudgetaire, activite_id)
    if not activite:
        raise HTTPException(404, "Activit√© non trouv√©e")

    try:
        # V√©rifier qu'il n'y a pas de lignes budg√©taires enfants
        lignes_count = session.exec(
            select(func.count(LigneBudgetaireDetail.id)).where(LigneBudgetaireDetail.activite_id == activite_id)
        ).one()

        if lignes_count > 0:
            raise HTTPException(
                400,
                f"Impossible de supprimer cette activit√© : elle contient {lignes_count} ligne(s) budg√©taire(s). Veuillez d'abord supprimer toutes les lignes enfants.",
            )

        fiche_id = activite.fiche_technique_id

        # Supprimer l'activit√© (aucune ligne)
        session.delete(activite)
        session.commit()

        # Recalculer les totaux
        FicheTechniqueService._recalculer_totaux_hierarchie(fiche_id, session)

        logger.info(f"‚úÖ Activit√© {activite_id} supprim√©e par {current_user.email}")
        return {"ok": True, "message": "Activit√© supprim√©e avec succ√®s"}
    except HTTPException:
        raise
    except Exception as e:
        session.rollback()
        logger.error(f"‚ùå Erreur suppression activit√© {activite_id}: {e}")
        raise HTTPException(500, f"Erreur lors de la suppression: {e!s}")


@router.delete("/api/lignes/{ligne_id}")
def api_delete_ligne(
    ligne_id: int, session: Session = Depends(get_session), current_user: User = Depends(get_current_user)
):
    """Supprimer une ligne budg√©taire et ses documents"""
    ligne = session.get(LigneBudgetaireDetail, ligne_id)
    if not ligne:
        raise HTTPException(404, "Ligne budg√©taire non trouv√©e")

    try:
        fiche_id = ligne.fiche_technique_id

        # Supprimer les documents associ√©s
        documents = session.exec(
            select(DocumentLigneBudgetaire).where(DocumentLigneBudgetaire.ligne_budgetaire_id == ligne_id)
        ).all()

        for doc in documents:
            # Supprimer le fichier physique
            try:
                file_path = Path(doc.chemin_fichier)
                if file_path.exists():
                    file_path.unlink()
                    logger.info(f"üìé Fichier supprim√© : {doc.nom_fichier_stocke}")
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è Impossible de supprimer le fichier {doc.chemin_fichier}: {e}")

            # Supprimer la m√©tadonn√©e
            session.delete(doc)

        # Supprimer la ligne
        session.delete(ligne)
        session.commit()

        # Recalculer les totaux
        FicheTechniqueService._recalculer_totaux_hierarchie(fiche_id, session)

        logger.info(f"‚úÖ Ligne budg√©taire {ligne_id} et ses documents supprim√©s par {current_user.email}")
        return {"ok": True, "message": "Ligne budg√©taire supprim√©e avec succ√®s"}
    except Exception as e:
        session.rollback()
        logger.error(f"‚ùå Erreur suppression ligne {ligne_id}: {e}")
        raise HTTPException(500, f"Erreur lors de la suppression: {e!s}")


# ============================================
# GESTION DES DOCUMENTS DES LIGNES
# ============================================


@router.get("/api/lignes/{ligne_id}/documents")
def api_get_documents_ligne(
    ligne_id: int, session: Session = Depends(get_session), current_user: User = Depends(get_current_user)
):
    """R√©cup√©rer la liste des documents d'une ligne budg√©taire"""
    ligne = session.get(LigneBudgetaireDetail, ligne_id)
    if not ligne:
        raise HTTPException(404, "Ligne budg√©taire non trouv√©e")

    documents = session.exec(
        select(DocumentLigneBudgetaire)
        .where(DocumentLigneBudgetaire.ligne_budgetaire_id == ligne_id)
        .where(DocumentLigneBudgetaire.actif)
        .order_by(DocumentLigneBudgetaire.uploaded_at.desc())
    ).all()

    from app.core.path_config import path_config

    return {
        "ok": True,
        "documents": [
            {
                "id": doc.id,
                "nom_original": doc.nom_fichier_original,
                "nom_stocke": doc.nom_fichier_stocke,
                "type": doc.type_fichier,
                "taille": doc.taille_octets,
                "url": path_config.get_file_url("uploads", f"budget/lignes/{ligne_id}/{doc.nom_fichier_stocke}"),
                "uploaded_at": doc.uploaded_at.isoformat(),
            }
            for doc in documents
        ],
    }


@router.post("/api/lignes/{ligne_id}/documents")
async def api_add_documents_ligne(
    ligne_id: int,
    documents: list[UploadFile] = File(...),
    session: Session = Depends(get_session),
    current_user: User = Depends(get_current_user),
):
    """Ajouter des documents √† une ligne budg√©taire existante"""
    ligne = session.get(LigneBudgetaireDetail, ligne_id)
    if not ligne:
        raise HTTPException(404, "Ligne budg√©taire non trouv√©e")

    try:
        # R√©cup√©rer les codes pour le renommage
        activite = session.get(ActiviteBudgetaire, ligne.activite_id)
        service = session.get(ServiceBeneficiaire, activite.service_beneficiaire_id)
        action = session.get(ActionBudgetaire, service.action_id)

        docs_dir = Path(f"uploads/budget/lignes/{ligne_id}")
        docs_dir.mkdir(parents=True, exist_ok=True)

        documents_count = 0
        for doc in documents:
            if doc.filename:
                # Renommer le fichier selon le format
                file_ext = Path(doc.filename).suffix
                original_name = Path(doc.filename).stem
                new_filename = f"{action.code}_{activite.code}_{ligne.code}_{original_name}{file_ext}"

                # Sauvegarder le fichier
                file_path = docs_dir / new_filename
                content = await doc.read()

                with open(file_path, "wb") as f:
                    f.write(content)

                # Enregistrer les m√©tadonn√©es
                doc_meta = DocumentLigneBudgetaire(
                    ligne_budgetaire_id=ligne_id,
                    fiche_technique_id=ligne.fiche_technique_id,
                    nom_fichier_original=doc.filename,
                    nom_fichier_stocke=new_filename,
                    chemin_fichier=str(file_path),
                    type_fichier=file_ext,
                    taille_octets=len(content),
                    code_action=action.code,
                    code_activite=activite.code,
                    code_ligne=ligne.code,
                    uploaded_by_user_id=current_user.id,
                )
                session.add(doc_meta)
                documents_count += 1
                logger.info(f"üìé Document ajout√© : {new_filename}")

        session.commit()

        logger.info(f"‚úÖ {documents_count} document(s) ajout√©(s) √† la ligne {ligne_id}")
        return {
            "ok": True,
            "documents_count": documents_count,
            "message": f"{documents_count} document(s) ajout√©(s) avec succ√®s",
        }
    except Exception as e:
        session.rollback()
        logger.error(f"‚ùå Erreur ajout documents: {e}")
        raise HTTPException(500, f"Erreur lors de l'ajout: {e!s}")


@router.delete("/api/lignes/{ligne_id}/documents/{document_id}")
def api_delete_document_ligne(
    ligne_id: int,
    document_id: int,
    session: Session = Depends(get_session),
    current_user: User = Depends(get_current_user),
):
    """Supprimer un document d'une ligne budg√©taire"""
    doc = session.get(DocumentLigneBudgetaire, document_id)
    if not doc or doc.ligne_budgetaire_id != ligne_id:
        raise HTTPException(404, "Document non trouv√©")

    try:
        # Supprimer le fichier physique
        file_path = Path(doc.chemin_fichier)
        if file_path.exists():
            file_path.unlink()
            logger.info(f"üìé Fichier supprim√© : {doc.nom_fichier_stocke}")

        # Supprimer la m√©tadonn√©e
        session.delete(doc)
        session.commit()

        logger.info(f"‚úÖ Document {document_id} supprim√© par {current_user.email}")
        return {"ok": True, "message": "Document supprim√© avec succ√®s"}
    except Exception as e:
        session.rollback()
        logger.error(f"‚ùå Erreur suppression document {document_id}: {e}")
        raise HTTPException(500, f"Erreur lors de la suppression: {e!s}")


# ============================================
# SIGOBE - Syst√®me d'Information de Gestion et d'Observation Budg√©taire
# ============================================

# --- Helpers de parsing SIGOBE (inspir√©s de PowerQuery) ---


def remove_accents(text: str) -> str:
    """Supprime les accents d'un texte"""
    if not text:
        return ""

    replacements = {
        "√†": "a",
        "√°": "a",
        "√¢": "a",
        "√§": "a",
        "√£": "a",
        "√•": "a",
        "√®": "e",
        "√©": "e",
        "√™": "e",
        "√´": "e",
        "√¨": "i",
        "√≠": "i",
        "√Æ": "i",
        "√Ø": "i",
        "√≤": "o",
        "√≥": "o",
        "√¥": "o",
        "√∂": "o",
        "√µ": "o",
        "√π": "u",
        "√∫": "u",
        "√ª": "u",
        "√º": "u",
        "√ß": "c",
        "√±": "n",
        "√Ä": "A",
        "√Å": "A",
        "√Ç": "A",
        "√Ñ": "A",
        "√É": "A",
        "√Ö": "A",
        "√à": "E",
        "√â": "E",
        "√ä": "E",
        "√ã": "E",
        "√å": "I",
        "√ç": "I",
        "√é": "I",
        "√è": "I",
        "√í": "O",
        "√ì": "O",
        "√î": "O",
        "√ñ": "O",
        "√ï": "O",
        "√ô": "U",
        "√ö": "U",
        "√õ": "U",
        "√ú": "U",
        "√á": "C",
        "√ë": "N",
    }

    for accent, replacement in replacements.items():
        text = text.replace(accent, replacement)

    # Remplacer nbsp par espace
    text = text.replace("\u00a0", " ")

    return text


def normalize_text(text: str) -> str:
    """Normalise un texte : minuscules, sans accents, trim"""
    if not text or pd.isna(text):
        return ""
    text = str(text).strip()
    text = remove_accents(text)
    text = text.lower()
    return text


def parse_date_flexible(value) -> date | None:
    """Parse une date de mani√®re flexible (texte, nombre Excel, date)"""
    if pd.isna(value) or value is None:
        return None

    # Si d√©j√† une date
    if isinstance(value, (date, datetime)):
        return value if isinstance(value, date) else value.date()

    # Si nombre (date Excel)
    try:
        if isinstance(value, (int, float)):
            return pd.to_datetime(value, origin="1899-12-30", unit="D").date()
    except:
        pass

    # Si texte
    try:
        text = str(value).strip().replace(".", "/").replace("-", "/")
        parsed = pd.to_datetime(text, format="%d/%m/%Y", errors="coerce")
        if pd.notna(parsed):
            return parsed.date()
    except:
        pass

    return None


def standardize_column_names(df: pd.DataFrame) -> pd.DataFrame:
    """
    Renomme automatiquement les colonnes financi√®res
    Inspir√© de fxTableStandardName_AutoMapping
    ‚ö†Ô∏è ORDRE IMPORTANT : Du plus sp√©cifique au plus g√©n√©ral !
    """
    # Ordre crucial : patterns sp√©cifiques en premier
    standard_mapping = [
        # Mandats (sp√©cifiques en premier !)
        (["vise cf", "vis√© cf", "vise"], "Mandats_Vise_CF"),
        (["pec", "prise en charge"], "Mandats_Pec"),
        (["mandat emis", "mandats emis"], "Mandats_Emis"),  # Sp√©cifique
        (["emis", "emise"], "Mandats_Emis"),  # G√©n√©ral (apr√®s les sp√©cifiques)
        # Budget
        (["budget vote", "budget vot√©"], "Budget_Vote"),
        (["budget actuel", "actuel"], "Budget_Actuel"),
        (["vote"], "Budget_Vote"),
        (["actuel"], "Budget_Actuel"),
        # Engagements
        (["engagement", "engagements", "engag"], "Engagements_Emis"),
        # Disponible
        (["disponible", "dispo"], "Disponible_Eng"),
    ]

    new_columns = []
    for col in df.columns:
        col_normalized = normalize_text(str(col))

        # Chercher une correspondance (du plus sp√©cifique au plus g√©n√©ral)
        matched = False
        for patterns, std_name in standard_mapping:
            for pattern in patterns:
                if pattern in col_normalized:
                    new_columns.append(std_name)
                    matched = True
                    break
            if matched:
                break

        if not matched:
            new_columns.append(col)

    df.columns = new_columns
    return df


def split_code_libelle(text: str) -> tuple:
    """
    S√©pare code et libell√© (ex: '2208401 Pilotage...' -> ('2208401', 'Pilotage...')).
    Le code doit √™tre num√©rique, sinon pas de code.

    Exemples:
    - "2208401 Pilotage et Soutien" -> ("2208401", "Pilotage et Soutien")
    - "P01 Programme 01" -> ("P01", "Programme 01")
    - "Direction G√©n√©rale" -> ("", "Direction G√©n√©rale")
    - "Pilotage" -> ("", "Pilotage")
    """
    if not text or pd.isna(text):
        return ("", "")

    text = str(text).strip()
    parts = text.split(" ", 1)

    if len(parts) == 2:
        first_part = parts[0].strip()
        # V√©rifier si le premier mot contient au moins un chiffre (code num√©rique)
        if any(c.isdigit() for c in first_part):
            # C'est un code num√©rique suivi d'un libell√©
            return (first_part, parts[1].strip())
        else:
            # Pas de code num√©rique, tout est le libell√©
            return ("", text)
    else:
        # Un seul mot, pas de s√©paration -> pas de code
        return ("", text)


@router.get("/sigobe", response_class=HTMLResponse, name="budget_sigobe")
def budget_sigobe(
    request: Request,
    annee: int | None = None,
    trimestre: int | None = None,
    session: Session = Depends(get_session),
    current_user: User = Depends(get_current_user),
):
    """Page principale SIGOBE"""

    # R√©cup√©rer les chargements
    query = select(SigobeChargement).order_by(SigobeChargement.date_chargement.desc())

    if annee:
        query = query.where(SigobeChargement.annee == annee)
    if trimestre:
        query = query.where(SigobeChargement.trimestre == trimestre)

    chargements = session.exec(query).all()

    # Ann√©es disponibles
    annees_query = select(SigobeChargement.annee).distinct()
    annees_result = session.exec(annees_query).all()
    # G√©rer le cas o√π c'est des int directs ou des tuples
    if annees_result and isinstance(annees_result[0], tuple):
        annees = sorted([a for (a,) in annees_result], reverse=True)
    else:
        annees = sorted(annees_result, reverse=True)

    # KPIs globaux (derni√®re p√©riode)
    kpis_global = None
    if chargements:
        dernier_chargement = chargements[0]
        kpis_global = session.exec(
            select(SigobeKpi)
            .where(SigobeKpi.chargement_id == dernier_chargement.id)
            .where(SigobeKpi.dimension == "global")
        ).first()

    return templates.TemplateResponse(
        "pages/budget_sigobe.html",
        get_template_context(
            request,
            chargements=chargements,
            annees=annees,
            annee_selected=annee,
            trimestre_selected=trimestre,
            kpis_global=kpis_global,
            current_user=current_user,
        ),
    )


@router.get("/sigobe/{chargement_id}/table", response_class=HTMLResponse)
def budget_sigobe_table(
    chargement_id: int,
    request: Request,
    session: Session = Depends(get_session),
    current_user: User = Depends(get_current_user),
):
    """Page de d√©tail d'un chargement SIGOBE avec table √©ditable"""

    # R√©cup√©rer le chargement
    chargement = session.get(SigobeChargement, chargement_id)
    if not chargement:
        raise HTTPException(404, "Chargement SIGOBE non trouv√©")

    # R√©cup√©rer les lignes d'ex√©cution
    executions = session.exec(
        select(SigobeExecution)
        .where(SigobeExecution.chargement_id == chargement_id)
        .order_by(
            SigobeExecution.programmes, SigobeExecution.actions, SigobeExecution.activites, SigobeExecution.taches
        )
    ).all()

    # Extraire les valeurs uniques pour les filtres
    programmes = sorted(set(e.programmes for e in executions if e.programmes))
    actions = sorted(set(e.actions for e in executions if e.actions))
    types_depense = sorted(set(e.type_depense for e in executions if e.type_depense))

    return templates.TemplateResponse(
        "pages/budget_sigobe_table.html",
        get_template_context(
            request,
            chargement=chargement,
            executions=executions,
            programmes=programmes,
            actions=actions,
            types_depense=types_depense,
        ),
    )


@router.get("/api/telecharger-template-sigobe")
async def api_telecharger_template_sigobe(current_user: User = Depends(get_current_user)):
    """
    T√©l√©charger un mod√®le Excel vierge pour les donn√©es SIGOBE
    """
    try:
        # Cr√©er un classeur Excel
        wb = Workbook()
        ws = wb.active
        ws.title = "SIGOBE - Situation Ex√©cution"

        # D√©finir les styles
        header_fill = PatternFill(start_color="FF8C00", end_color="FF8C00", fill_type="solid")  # Orange
        header_font = Font(bold=True, color="FFFFFF", size=11)
        example_fill = PatternFill(start_color="E7E6E6", end_color="E7E6E6", fill_type="solid")
        total_action_fill = PatternFill(start_color="CCE5FF", end_color="CCE5FF", fill_type="solid")  # Bleu clair
        total_programme_fill = PatternFill(start_color="FFD700", end_color="FFD700", fill_type="solid")  # Or
        total_general_fill = PatternFill(start_color="FF6B6B", end_color="FF6B6B", fill_type="solid")  # Rouge
        total_font = Font(bold=True, size=10)
        total_general_font = Font(bold=True, size=11, color="FFFFFF")
        border_style = Border(
            left=Side(style="thin"), right=Side(style="thin"), top=Side(style="thin"), bottom=Side(style="thin")
        )

        # D√©finir les en-t√™tes de colonnes SIGOBE (hi√©rarchie + finances)
        headers = [
            "PROGRAMMES",
            "ACTIONS",
            "RPROG",
            "TYPE DEPENSE",
            "ACTIVITES",
            "TACHES",
            "BUDGET VOTE",
            "BUDGET ACTUEL",
            "ENGAGEMENTS EMIS",
            "DISPONIBLE ENG",
            "MANDATS EMIS",
            "MANDATS VISE CF",
            "MANDATS PEC",
        ]

        # √âcrire les en-t√™tes (ligne 1 directement, sans titre pour √©viter confusion au parsing)
        for col_num, header in enumerate(headers, 1):
            cell = ws.cell(row=1, column=col_num)
            cell.value = header
            cell.fill = header_fill
            cell.font = header_font
            cell.alignment = Alignment(horizontal="center", vertical="center", wrap_text=True)
            cell.border = border_style

        # Ajuster la largeur des colonnes
        # Colonnes hi√©rarchiques (A-F) plus larges
        for col in ["A", "B", "C", "D", "E", "F"]:
            ws.column_dimensions[col].width = 30
        # Colonnes financi√®res (G-M)
        for col in ["G", "H", "I", "J", "K", "L", "M"]:
            ws.column_dimensions[col].width = 18

        # Ajouter des exemples avec la hi√©rarchie compl√®te (13 colonnes)
        # Format: (PROGRAMMES, ACTIONS, RPROG, TYPE DEPENSE, ACTIVITES, TACHES, BUDGET VOTE, BUDGET ACTUEL, ENGAGEMENTS EMIS, DISPONIBLE ENG, MANDATS EMIS, MANDATS VISE CF, MANDATS PEC)
        exemples = [
            # ===== PROGRAMME 001 : PILOTAGE ET COORDINATION =====
            ("Programme 001 - Pilotage et Coordination", "", "", "", "", "", "", "", "", "", "", "", ""),
            # Action 1.1
            (
                "Programme 001 - Pilotage et Coordination",
                "Action 1.1 - Coordination administrative",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
            ),
            (
                "Programme 001 - Pilotage et Coordination",
                "Action 1.1 - Coordination administrative",
                "RPROG-001",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
            ),
            (
                "Programme 001 - Pilotage et Coordination",
                "Action 1.1 - Coordination administrative",
                "RPROG-001",
                "Fonctionnement",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
            ),
            (
                "Programme 001 - Pilotage et Coordination",
                "Action 1.1 - Coordination administrative",
                "RPROG-001",
                "Fonctionnement",
                "Activit√© 1.1.1 - Gestion courante",
                "",
                "50000000",
                "48000000",
                "35000000",
                "13000000",
                "30000000",
                "28000000",
                "25000000",
            ),
            (
                "Programme 001 - Pilotage et Coordination",
                "Action 1.1 - Coordination administrative",
                "RPROG-001",
                "Fonctionnement",
                "Activit√© 1.1.1 - Gestion courante",
                "T√¢che 1.1.1.1 - Fournitures de bureau",
                "10000000",
                "9500000",
                "7000000",
                "2500000",
                "6000000",
                "5500000",
                "5000000",
            ),
            (
                "Programme 001 - Pilotage et Coordination",
                "Action 1.1 - Coordination administrative",
                "RPROG-001",
                "Fonctionnement",
                "Activit√© 1.1.1 - Gestion courante",
                "T√¢che 1.1.1.2 - Mat√©riel informatique",
                "15000000",
                "14500000",
                "10000000",
                "4500000",
                "8500000",
                "8000000",
                "7500000",
            ),
            (
                "Programme 001 - Pilotage et Coordination",
                "Action 1.1 - Coordination administrative",
                "RPROG-001",
                "Fonctionnement",
                "Activit√© 1.1.1 - Gestion courante",
                "T√¢che 1.1.1.3 - Entretien des locaux",
                "25000000",
                "24000000",
                "18000000",
                "6000000",
                "16000000",
                "14500000",
                "12500000",
            ),
            (
                "Programme 001 - Pilotage et Coordination",
                "Action 1.1 - Coordination administrative",
                "RPROG-001",
                "Fonctionnement",
                "Activit√© 1.1.2 - Communication institutionnelle",
                "",
                "30000000",
                "29000000",
                "20000000",
                "9000000",
                "18000000",
                "17000000",
                "15000000",
            ),
            (
                "Programme 001 - Pilotage et Coordination",
                "Action 1.1 - Coordination administrative",
                "RPROG-001",
                "Fonctionnement",
                "Activit√© 1.1.2 - Communication institutionnelle",
                "T√¢che 1.1.2.1 - Supports de communication",
                "12000000",
                "11500000",
                "8000000",
                "3500000",
                "7000000",
                "6500000",
                "6000000",
            ),
            (
                "Programme 001 - Pilotage et Coordination",
                "Action 1.1 - Coordination administrative",
                "RPROG-001",
                "Fonctionnement",
                "Activit√© 1.1.2 - Communication institutionnelle",
                "T√¢che 1.1.2.2 - √âv√©nements institutionnels",
                "18000000",
                "17500000",
                "12000000",
                "5500000",
                "11000000",
                "10500000",
                "9000000",
            ),
            # TOTAL Action 1.1
            (
                "Programme 001 - Pilotage et Coordination",
                "TOTAL Action 1.1 - Coordination administrative",
                "",
                "",
                "",
                "",
                "80000000",
                "77000000",
                "55000000",
                "22000000",
                "48000000",
                "45000000",
                "40000000",
            ),
            # Action 1.2
            (
                "Programme 001 - Pilotage et Coordination",
                "Action 1.2 - Suivi et √©valuation",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
            ),
            (
                "Programme 001 - Pilotage et Coordination",
                "Action 1.2 - Suivi et √©valuation",
                "RPROG-001",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
            ),
            (
                "Programme 001 - Pilotage et Coordination",
                "Action 1.2 - Suivi et √©valuation",
                "RPROG-001",
                "Fonctionnement",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
            ),
            (
                "Programme 001 - Pilotage et Coordination",
                "Action 1.2 - Suivi et √©valuation",
                "RPROG-001",
                "Fonctionnement",
                "Activit√© 1.2.1 - Suivi des performances",
                "",
                "20000000",
                "19500000",
                "14000000",
                "5500000",
                "12000000",
                "11500000",
                "10000000",
            ),
            (
                "Programme 001 - Pilotage et Coordination",
                "Action 1.2 - Suivi et √©valuation",
                "RPROG-001",
                "Fonctionnement",
                "Activit√© 1.2.1 - Suivi des performances",
                "T√¢che 1.2.1.1 - Indicateurs de performance",
                "8000000",
                "7800000",
                "5500000",
                "2300000",
                "5000000",
                "4800000",
                "4200000",
            ),
            (
                "Programme 001 - Pilotage et Coordination",
                "Action 1.2 - Suivi et √©valuation",
                "RPROG-001",
                "Fonctionnement",
                "Activit√© 1.2.1 - Suivi des performances",
                "T√¢che 1.2.1.2 - Rapports d'activit√©",
                "12000000",
                "11700000",
                "8500000",
                "3200000",
                "7000000",
                "6700000",
                "5800000",
            ),
            # TOTAL Action 1.2
            (
                "Programme 001 - Pilotage et Coordination",
                "TOTAL Action 1.2 - Suivi et √©valuation",
                "",
                "",
                "",
                "",
                "20000000",
                "19500000",
                "14000000",
                "5500000",
                "12000000",
                "11500000",
                "10000000",
            ),
            # TOTAL PROGRAMME 001
            (
                "TOTAL Programme 001 - Pilotage et Coordination",
                "",
                "",
                "",
                "",
                "",
                "100000000",
                "96500000",
                "69000000",
                "27500000",
                "60000000",
                "57500000",
                "50000000",
            ),
            # ===== PROGRAMME 002 : D√âVELOPPEMENT STRAT√âGIQUE =====
            ("Programme 002 - D√©veloppement Strat√©gique", "", "", "", "", "", "", "", "", "", "", "", ""),
            # Action 2.1
            (
                "Programme 002 - D√©veloppement Strat√©gique",
                "Action 2.1 - √âtudes et planification",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
            ),
            (
                "Programme 002 - D√©veloppement Strat√©gique",
                "Action 2.1 - √âtudes et planification",
                "RPROG-002",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
            ),
            (
                "Programme 002 - D√©veloppement Strat√©gique",
                "Action 2.1 - √âtudes et planification",
                "RPROG-002",
                "Fonctionnement",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
            ),
            (
                "Programme 002 - D√©veloppement Strat√©gique",
                "Action 2.1 - √âtudes et planification",
                "RPROG-002",
                "Fonctionnement",
                "Activit√© 2.1.1 - Analyses sectorielles",
                "",
                "25000000",
                "24000000",
                "18000000",
                "6000000",
                "15000000",
                "14000000",
                "13000000",
            ),
            (
                "Programme 002 - D√©veloppement Strat√©gique",
                "Action 2.1 - √âtudes et planification",
                "RPROG-002",
                "Fonctionnement",
                "Activit√© 2.1.1 - Analyses sectorielles",
                "T√¢che 2.1.1.1 - √âtudes de march√©",
                "12000000",
                "11500000",
                "9000000",
                "2500000",
                "7500000",
                "7000000",
                "6500000",
            ),
            (
                "Programme 002 - D√©veloppement Strat√©gique",
                "Action 2.1 - √âtudes et planification",
                "RPROG-002",
                "Fonctionnement",
                "Activit√© 2.1.1 - Analyses sectorielles",
                "T√¢che 2.1.1.2 - Consultations externes",
                "13000000",
                "12500000",
                "9000000",
                "3500000",
                "7500000",
                "7000000",
                "6500000",
            ),
            (
                "Programme 002 - D√©veloppement Strat√©gique",
                "Action 2.1 - √âtudes et planification",
                "RPROG-002",
                "Fonctionnement",
                "Activit√© 2.1.2 - Planification strat√©gique",
                "",
                "35000000",
                "34000000",
                "25000000",
                "9000000",
                "22000000",
                "20000000",
                "18000000",
            ),
            (
                "Programme 002 - D√©veloppement Strat√©gique",
                "Action 2.1 - √âtudes et planification",
                "RPROG-002",
                "Fonctionnement",
                "Activit√© 2.1.2 - Planification strat√©gique",
                "T√¢che 2.1.2.1 - √âlaboration des plans",
                "20000000",
                "19500000",
                "14000000",
                "5500000",
                "12000000",
                "11000000",
                "10000000",
            ),
            (
                "Programme 002 - D√©veloppement Strat√©gique",
                "Action 2.1 - √âtudes et planification",
                "RPROG-002",
                "Fonctionnement",
                "Activit√© 2.1.2 - Planification strat√©gique",
                "T√¢che 2.1.2.2 - Ateliers de validation",
                "15000000",
                "14500000",
                "11000000",
                "3500000",
                "10000000",
                "9000000",
                "8000000",
            ),
            # TOTAL Action 2.1
            (
                "Programme 002 - D√©veloppement Strat√©gique",
                "TOTAL Action 2.1 - √âtudes et planification",
                "",
                "",
                "",
                "",
                "60000000",
                "58000000",
                "43000000",
                "15000000",
                "37000000",
                "34000000",
                "31000000",
            ),
            # Action 2.2
            (
                "Programme 002 - D√©veloppement Strat√©gique",
                "Action 2.2 - Mise en ≈ìuvre des projets",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
            ),
            (
                "Programme 002 - D√©veloppement Strat√©gique",
                "Action 2.2 - Mise en ≈ìuvre des projets",
                "RPROG-002",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
            ),
            (
                "Programme 002 - D√©veloppement Strat√©gique",
                "Action 2.2 - Mise en ≈ìuvre des projets",
                "RPROG-002",
                "Investissement",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
            ),
            (
                "Programme 002 - D√©veloppement Strat√©gique",
                "Action 2.2 - Mise en ≈ìuvre des projets",
                "RPROG-002",
                "Investissement",
                "Activit√© 2.2.1 - Infrastructures",
                "",
                "80000000",
                "78000000",
                "55000000",
                "23000000",
                "50000000",
                "48000000",
                "45000000",
            ),
            (
                "Programme 002 - D√©veloppement Strat√©gique",
                "Action 2.2 - Mise en ≈ìuvre des projets",
                "RPROG-002",
                "Investissement",
                "Activit√© 2.2.1 - Infrastructures",
                "T√¢che 2.2.1.1 - Construction b√¢timents",
                "50000000",
                "49000000",
                "35000000",
                "14000000",
                "32000000",
                "31000000",
                "29000000",
            ),
            (
                "Programme 002 - D√©veloppement Strat√©gique",
                "Action 2.2 - Mise en ≈ìuvre des projets",
                "RPROG-002",
                "Investissement",
                "Activit√© 2.2.1 - Infrastructures",
                "T√¢che 2.2.1.2 - √âquipements techniques",
                "30000000",
                "29000000",
                "20000000",
                "9000000",
                "18000000",
                "17000000",
                "16000000",
            ),
            (
                "Programme 002 - D√©veloppement Strat√©gique",
                "Action 2.2 - Mise en ≈ìuvre des projets",
                "RPROG-002",
                "Investissement",
                "Activit√© 2.2.2 - √âquipements informatiques",
                "",
                "45000000",
                "44000000",
                "32000000",
                "12000000",
                "28000000",
                "27000000",
                "25000000",
            ),
            (
                "Programme 002 - D√©veloppement Strat√©gique",
                "Action 2.2 - Mise en ≈ìuvre des projets",
                "RPROG-002",
                "Investissement",
                "Activit√© 2.2.2 - √âquipements informatiques",
                "T√¢che 2.2.2.1 - Serveurs et r√©seaux",
                "25000000",
                "24500000",
                "18000000",
                "6500000",
                "16000000",
                "15500000",
                "14500000",
            ),
            (
                "Programme 002 - D√©veloppement Strat√©gique",
                "Action 2.2 - Mise en ≈ìuvre des projets",
                "RPROG-002",
                "Investissement",
                "Activit√© 2.2.2 - √âquipements informatiques",
                "T√¢che 2.2.2.2 - Postes de travail",
                "20000000",
                "19500000",
                "14000000",
                "5500000",
                "12000000",
                "11500000",
                "10500000",
            ),
            # TOTAL Action 2.2
            (
                "Programme 002 - D√©veloppement Strat√©gique",
                "TOTAL Action 2.2 - Mise en ≈ìuvre des projets",
                "",
                "",
                "",
                "",
                "125000000",
                "122000000",
                "87000000",
                "35000000",
                "78000000",
                "75000000",
                "70000000",
            ),
            # TOTAL PROGRAMME 002
            (
                "TOTAL Programme 002 - D√©veloppement Strat√©gique",
                "",
                "",
                "",
                "",
                "",
                "185000000",
                "180000000",
                "130000000",
                "50000000",
                "115000000",
                "109000000",
                "101000000",
            ),
            # ===== PROGRAMME 003 : RESSOURCES HUMAINES =====
            ("Programme 003 - Gestion des Ressources Humaines", "", "", "", "", "", "", "", "", "", "", "", ""),
            # Action 3.1
            (
                "Programme 003 - Gestion des Ressources Humaines",
                "Action 3.1 - Formation et d√©veloppement",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
            ),
            (
                "Programme 003 - Gestion des Ressources Humaines",
                "Action 3.1 - Formation et d√©veloppement",
                "RPROG-003",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
            ),
            (
                "Programme 003 - Gestion des Ressources Humaines",
                "Action 3.1 - Formation et d√©veloppement",
                "RPROG-003",
                "Fonctionnement",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
            ),
            (
                "Programme 003 - Gestion des Ressources Humaines",
                "Action 3.1 - Formation et d√©veloppement",
                "RPROG-003",
                "Fonctionnement",
                "Activit√© 3.1.1 - Formation continue",
                "",
                "40000000",
                "38500000",
                "28000000",
                "10500000",
                "25000000",
                "24000000",
                "22000000",
            ),
            (
                "Programme 003 - Gestion des Ressources Humaines",
                "Action 3.1 - Formation et d√©veloppement",
                "RPROG-003",
                "Fonctionnement",
                "Activit√© 3.1.1 - Formation continue",
                "T√¢che 3.1.1.1 - Formations techniques",
                "25000000",
                "24000000",
                "17500000",
                "6500000",
                "15000000",
                "14500000",
                "13500000",
            ),
            (
                "Programme 003 - Gestion des Ressources Humaines",
                "Action 3.1 - Formation et d√©veloppement",
                "RPROG-003",
                "Fonctionnement",
                "Activit√© 3.1.1 - Formation continue",
                "T√¢che 3.1.1.2 - Formations manag√©riales",
                "15000000",
                "14500000",
                "10500000",
                "4000000",
                "10000000",
                "9500000",
                "8500000",
            ),
            (
                "Programme 003 - Gestion des Ressources Humaines",
                "Action 3.1 - Formation et d√©veloppement",
                "RPROG-003",
                "Fonctionnement",
                "Activit√© 3.1.2 - Recrutement",
                "",
                "15000000",
                "14800000",
                "10000000",
                "4800000",
                "8500000",
                "8200000",
                "7500000",
            ),
            (
                "Programme 003 - Gestion des Ressources Humaines",
                "Action 3.1 - Formation et d√©veloppement",
                "RPROG-003",
                "Fonctionnement",
                "Activit√© 3.1.2 - Recrutement",
                "T√¢che 3.1.2.1 - Proc√©dures de s√©lection",
                "10000000",
                "9800000",
                "7000000",
                "2800000",
                "6000000",
                "5800000",
                "5300000",
            ),
            (
                "Programme 003 - Gestion des Ressources Humaines",
                "Action 3.1 - Formation et d√©veloppement",
                "RPROG-003",
                "Fonctionnement",
                "Activit√© 3.1.2 - Recrutement",
                "T√¢che 3.1.2.2 - Tests et √©valuations",
                "5000000",
                "5000000",
                "3000000",
                "2000000",
                "2500000",
                "2400000",
                "2200000",
            ),
            # TOTAL Action 3.1
            (
                "Programme 003 - Gestion des Ressources Humaines",
                "TOTAL Action 3.1 - Formation et d√©veloppement",
                "",
                "",
                "",
                "",
                "55000000",
                "53300000",
                "38000000",
                "15300000",
                "33500000",
                "32200000",
                "29500000",
            ),
            # TOTAL PROGRAMME 003
            (
                "TOTAL Programme 003 - Gestion des Ressources Humaines",
                "",
                "",
                "",
                "",
                "",
                "55000000",
                "53300000",
                "38000000",
                "15300000",
                "33500000",
                "32200000",
                "29500000",
            ),
            # ===== TOTAL G√âN√âRAL =====
            ("", "", "", "", "", "", "", "", "", "", "", "", ""),
            (
                "TOTAL G√âN√âRAL - TOUS PROGRAMMES",
                "",
                "",
                "",
                "",
                "",
                "340000000",
                "329800000",
                "237000000",
                "92800000",
                "208500000",
                "198700000",
                "180500000",
            ),
        ]

        current_row = 2
        for exemple in exemples:
            # D√©terminer le type de ligne pour le style
            first_value = str(exemple[0]) if exemple[0] else ""
            second_value = str(exemple[1]) if len(exemple) > 1 and exemple[1] else ""

            is_total_action = second_value.startswith("TOTAL Action")
            is_total_programme = first_value.startswith("TOTAL Programme")
            is_total_general = first_value.startswith("TOTAL G√âN√âRAL")

            for col_num, value in enumerate(exemple, 1):
                cell = ws.cell(row=current_row, column=col_num)
                cell.value = value
                cell.border = border_style

                # Appliquer les styles selon le type de ligne
                if is_total_general:
                    cell.fill = total_general_fill
                    cell.font = total_general_font
                elif is_total_programme:
                    cell.fill = total_programme_fill
                    cell.font = total_font
                elif is_total_action:
                    cell.fill = total_action_fill
                    cell.font = total_font
                elif current_row > 2:
                    cell.fill = example_fill

                # Aligner les nombres √† droite (colonnes financi√®res G-M = 7-13)
                if col_num > 6 and value and value != "":
                    cell.alignment = Alignment(horizontal="right", vertical="center")
                    cell.number_format = "#,##0"
                else:
                    cell.alignment = Alignment(horizontal="left", vertical="center")

            current_row += 1

        # Ajouter une feuille d'instructions
        ws_instructions = wb.create_sheet("üìã Instructions")
        ws_instructions.column_dimensions["A"].width = 80

        instructions = [
            ("MOD√àLE SIGOBE - SITUATION D'EX√âCUTION BUDG√âTAIRE", header_font, header_fill),
            ("", None, None),
            ("üìä STRUCTURE HI√âRARCHIQUE (Colonnes A-F)", Font(bold=True, size=12), None),
            ("", None, None),
            ("1. PROGRAMMES : Libell√© du programme budg√©taire", None, example_fill),
            ("2. ACTIONS : Libell√© de l'action (sous le programme)", None, example_fill),
            ("3. RPROG : Code du responsable de programme", None, example_fill),
            ("4. TYPE DEPENSE : Type de d√©pense (Fonctionnement, Investissement, etc.)", None, example_fill),
            ("5. ACTIVITES : Libell√© de l'activit√©", None, example_fill),
            ("6. TACHES : Libell√© de la t√¢che (niveau le plus d√©taill√©)", None, example_fill),
            ("", None, None),
            ("üí∞ COLONNES FINANCI√àRES (Colonnes G-M)", Font(bold=True, size=12), None),
            ("", None, None),
            ("7. BUDGET VOTE : Montant du budget vot√©", None, None),
            ("8. BUDGET ACTUEL : Montant du budget actuel (apr√®s modifications)", None, None),
            ("9. ENGAGEMENTS EMIS : Montant des engagements √©mis", None, None),
            ("10. DISPONIBLE ENG : Montant disponible pour engagement", None, None),
            ("11. MANDATS EMIS : Montant des mandats √©mis", None, None),
            ("12. MANDATS VISE CF : Mandats vis√©s par le contr√¥le financier", None, None),
            ("13. MANDATS PEC : Mandats pris en charge", None, None),
            ("", None, None),
            ("", None, None),
            ("‚ö†Ô∏è R√àGLES IMPORTANTES", Font(bold=True, size=12, color="DC3545"), None),
            ("", None, None),
            ("‚úÖ R√âP√âTEZ la hi√©rarchie parente sur chaque ligne pour faciliter le tri/filtrage", None, None),
            ("‚úÖ Chaque niveau hi√©rarchique a sa propre colonne (une colonne = un niveau)", None, None),
            ("‚úÖ Sur une ligne, remplissez TOUS les niveaux parents + le niveau actuel", None, None),
            ("‚úÖ Les montants doivent √™tre des nombres entiers (sans espace ni symbole)", None, None),
            ("‚úÖ Supprimez TOUTES les lignes d'exemples en gris avant l'import", None, None),
            ("", None, None),
            ("", None, None),
            ("üí° EXEMPLE DE HI√âRARCHIE COMPL√àTE", Font(bold=True, size=12, color="28A745"), None),
            ("", None, None),
            ("Pour une t√¢che au niveau le plus d√©taill√©, R√âP√âTEZ tous les niveaux parents :", None, None),
            ("", None, None),
            ("Ligne Programme : [Programme 001] [vide] [vide] [vide] [vide] [vide] [montants...]", None, None),
            ("Ligne Action    : [Programme 001] [Action 1.1] [vide] [vide] [vide] [vide] [montants...]", None, None),
            (
                "Ligne RPROG     : [Programme 001] [Action 1.1] [RPROG-001] [vide] [vide] [vide] [montants...]",
                None,
                None,
            ),
            (
                "Ligne Type D√©p. : [Programme 001] [Action 1.1] [RPROG-001] [Fonctionnement] [vide] [vide] [montants...]",
                None,
                None,
            ),
            (
                "Ligne Activit√©  : [Programme 001] [Action 1.1] [RPROG-001] [Fonctionnement] [Activit√© 1.1.1] [vide] [montants...]",
                None,
                None,
            ),
            (
                "Ligne T√¢che     : [Programme 001] [Action 1.1] [RPROG-001] [Fonctionnement] [Activit√© 1.1.1] [T√¢che 1.1.1.1] [montants...]",
                None,
                None,
            ),
            ("", None, None),
            ("‚ö° AVANTAGES : Chaque ligne est autonome et peut √™tre tri√©e/filtr√©e facilement dans Excel", None, None),
            ("", None, None),
            ("", None, None),
            (f"üìÖ Mod√®le g√©n√©r√© le {datetime.now().strftime('%d/%m/%Y √† %H:%M')}", Font(italic=True, size=9), None),
        ]

        for row_num, (text, font, fill) in enumerate(instructions, 1):
            cell = ws_instructions.cell(row=row_num, column=1)
            cell.value = text
            if font:
                cell.font = font
            if fill:
                cell.fill = fill
            cell.alignment = Alignment(horizontal="left", vertical="center", wrap_text=True)

        # Figer la premi√®re ligne (en-t√™tes uniquement, pas de titre)
        ws.freeze_panes = "A2"

        # Sauvegarder dans un buffer
        buffer = BytesIO()
        wb.save(buffer)
        buffer.seek(0)

        # Log de l'activit√©
        logger.info(f"üì• Template SIGOBE t√©l√©charg√© par {current_user.email}")

        # Retourner le fichier
        filename = "Modele_SIGOBE.xlsx"
        return StreamingResponse(
            buffer,
            media_type="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
            headers={"Content-Disposition": f"attachment; filename={filename}"},
        )

    except Exception as e:
        logger.error(f"Erreur g√©n√©ration template SIGOBE: {e}")
        raise HTTPException(500, f"Erreur lors de la g√©n√©ration du mod√®le: {e!s}")


@router.post("/api/sigobe/preview")
async def api_sigobe_preview(
    fichier: UploadFile = File(...),
    annee: int = Form(...),
    trimestre: int | None = Form(None),
    session: Session = Depends(get_session),
    current_user: User = Depends(get_current_user),
):
    """
    Pr√©visualisation d'un fichier SIGOBE (sans sauvegarde)
    Analyse le fichier et retourne un aper√ßu des donn√©es
    """
    try:
        content = await fichier.read()
        excel_file = BytesIO(content)

        # Parser le fichier SIGOBE avec le service
        Result, Metadatafile, ColsToKeep = SigobeService.parse_fichier_excel(excel_file, annee, trimestre)

        # Statistiques
        stats = {
            "nb_lignes": len(Result),
            "nb_colonnes": len(Result.columns),
            "colonnes": list(Result.columns),
            "colonnes_hierarchiques": list(ColsToKeep),
            "nb_programmes": int(Result["Programmes"].nunique()) if "Programmes" in Result.columns else 0,
            "nb_actions": int(Result["Actions"].nunique()) if "Actions" in Result.columns else 0,
            "metadata": {k: str(v) for k, v in Metadatafile.items()},  # Convertir en strings
        }

        # Aper√ßu des donn√©es (20 premi√®res lignes)
        preview_data = []
        for idx, row in Result.head(20).iterrows():
            preview_data.append({col: str(row[col]) if pd.notna(row[col]) else "" for col in Result.columns})

        # Calcul des totaux pr√©liminaires
        financial_cols = ["Budget_Vote", "Budget_Actuel", "Engagements_Emis", "Mandats_Emis"]
        totaux = {}

        for col in financial_cols:
            if col in Result.columns:
                total = Result[col].sum()
                totaux[col] = float(total)

        logger.info(f"‚úÖ Pr√©visualisation : {stats['nb_lignes']} lignes, {stats['nb_programmes']} programmes")

        return {
            "ok": True,
            "stats": stats,
            "preview": preview_data,
            "totaux": totaux,
            "message": f"Fichier analys√© : {stats['nb_lignes']} lignes pr√™tes √† importer",
        }

    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"‚ùå Erreur pr√©visualisation SIGOBE : {e}")
        raise HTTPException(500, f"Erreur lors de l'analyse : {e!s}")


def _parse_sigobe_file(excel_file: BytesIO, annee: int, trimestre: int | None) -> tuple:
    """
    Parse un fichier SIGOBE - Wrapper vers SigobeService
    """
    return SigobeService.parse_fichier_excel(excel_file, annee, trimestre)


@router.post("/api/sigobe/upload")
async def api_sigobe_upload(
    fichier: UploadFile = File(...),
    annee: int = Form(...),
    trimestre: int | None = Form(None),
    session: Session = Depends(get_session),
    current_user: User = Depends(get_current_user),
):
    """
    Upload et analyse d'un fichier SIGOBE (Excel)
    Parser suivant SCRUPULEUSEMENT la logique fxInspectTable PowerQuery (√©tapes A‚ÜíO)
    """
    try:
        content = await fichier.read()
        excel_file = BytesIO(content)

        # Parser le fichier SIGOBE avec le service
        Result, Metadatafile, ColsToKeep = SigobeService.parse_fichier_excel(excel_file, annee, trimestre)

        logger.info(f"‚úÖ Parsing r√©ussi : {len(Result)} lignes √† importer")

        # D√©terminer le libell√© de p√©riode
        if trimestre:
            periode_libelle = f"T{trimestre} {annee}"
        else:
            periode_libelle = f"Annuel {annee}"

        # Sauvegarder le fichier physiquement (SEULEMENT si parsing OK)
        from app.core.path_config import path_config

        relative_path = f"sigobe/{annee}/{fichier.filename}"
        upload_dir = path_config.UPLOADS_DIR / "sigobe" / str(annee)
        upload_dir.mkdir(parents=True, exist_ok=True)

        file_path = upload_dir / fichier.filename
        with open(file_path, "wb") as f:
            f.write(content)

        logger.info(f"üìÅ Fichier sauvegard√© : {file_path}")

        # G√©n√©rer l'URL avec ROOT_PATH
        file_url = path_config.get_file_url("uploads", relative_path)

        # 10. Cr√©er l'enregistrement de chargement
        chargement = SigobeChargement(
            annee=annee,
            trimestre=trimestre,
            periode_libelle=periode_libelle,
            nom_fichier=fichier.filename,
            taille_octets=len(content),
            chemin_fichier=file_url,
            uploaded_by_user_id=current_user.id,
            statut="En cours",
        )

        session.add(chargement)
        session.commit()
        session.refresh(chargement)

        logger.info(f"‚úÖ Chargement cr√©√© : ID={chargement.id}")

        # 11. Importer les lignes d'ex√©cution depuis Result
        nb_lignes = 0
        programmes_set = set()
        actions_set = set()

        financial_columns = [
            "Budget_Vote",
            "Budget_Actuel",
            "Engagements_Emis",
            "Disponible_Eng",
            "Mandats_Emis",
            "Mandats_Vise_CF",
            "Mandats_Pec",
        ]

        for idx, row in Result.iterrows():
            try:
                # Extraire les montants depuis Result (colonnes typ√©es)
                montants = {}
                for col in financial_columns:
                    if col in Result.columns:
                        val = row[col]
                        if pd.notna(val):
                            try:
                                montants[col.lower()] = Decimal(str(val))
                            except:
                                montants[col.lower()] = Decimal("0")
                        else:
                            montants[col.lower()] = Decimal("0")
                    else:
                        montants[col.lower()] = Decimal("0")

                # Extraire les m√©tadonn√©es de la ligne (si pr√©sentes)
                periode_val = row.get("Periode") if "Periode" in Result.columns else None
                section_val = row.get("Section", "") if "Section" in Result.columns else Metadatafile.get("section", "")
                categorie_val = (
                    row.get("Categorie", "") if "Categorie" in Result.columns else Metadatafile.get("categorie", "")
                )
                type_credit_val = (
                    row.get("Type_credit", "")
                    if "Type_credit" in Result.columns
                    else Metadatafile.get("type_credit", "")
                )

                # Cr√©er la ligne d'ex√©cution
                execution = SigobeExecution(
                    chargement_id=chargement.id,
                    annee=annee,
                    trimestre=trimestre,
                    periode=periode_val if isinstance(periode_val, date) else None,
                    section=str(section_val) if section_val else None,
                    categorie=str(categorie_val) if categorie_val else None,
                    type_credit=str(type_credit_val) if type_credit_val else None,
                    programmes=str(row.get("Programmes", "")) if "Programmes" in Result.columns else "",
                    actions=str(row.get("Actions", "")) if "Actions" in Result.columns else "",
                    rprog=str(row.get("Rprog", "")) if "Rprog" in Result.columns else "",
                    type_depense=str(row.get("Type_depense", "")) if "Type_depense" in Result.columns else "",
                    activites=str(row.get("Activites", "")) if "Activites" in Result.columns else "",
                    taches=str(row.get("Taches", "")) if "Taches" in Result.columns else "",
                    budget_vote=montants.get("budget_vote", 0),
                    budget_actuel=montants.get("budget_actuel", 0),
                    engagements_emis=montants.get("engagements_emis", 0),
                    disponible_eng=montants.get("disponible_eng", 0),
                    mandats_emis=montants.get("mandats_emis", 0),
                    mandats_vise_cf=montants.get("mandats_vise_cf", 0),
                    mandats_pec=montants.get("mandats_pec", 0),
                )

                session.add(execution)
                nb_lignes += 1

                # Collecter les programmes/actions uniques
                if row.get("Programmes"):
                    programmes_set.add(str(row.get("Programmes")))
                if row.get("Actions"):
                    actions_set.add(str(row.get("Actions")))

                # Commit par batch de 100
                if nb_lignes % 100 == 0:
                    session.commit()
                    logger.info(f"üíæ {nb_lignes} lignes import√©es...")

            except Exception as e:
                logger.warning(f"‚ö†Ô∏è Erreur ligne {idx}: {e}")
                continue

        # Commit final
        session.commit()

        # 12. Mettre √† jour le chargement
        chargement.nb_lignes_importees = nb_lignes
        chargement.nb_programmes = len(programmes_set)
        chargement.nb_actions = len(actions_set)
        chargement.statut = "Termin√©"
        session.add(chargement)
        session.commit()

        logger.info(
            f"‚úÖ Import termin√© : {nb_lignes} lignes, {len(programmes_set)} programmes, {len(actions_set)} actions"
        )

        # 13. Calculer les KPIs
        try:
            calcul_kpis_sigobe(chargement.id, session)
        except Exception as e:
            logger.error(f"‚ùå Erreur calcul KPIs : {e}")

        # Log activit√©
        ActivityService.log_user_activity(
            session=session,
            user=current_user,
            action_type="upload",
            target_type="sigobe",
            description=f"Import SIGOBE {periode_libelle} - {nb_lignes} lignes, {len(programmes_set)} programmes",
            target_id=chargement.id,
            icon="üìä",
        )

        return {
            "ok": True,
            "chargement_id": chargement.id,
            "nb_lignes": nb_lignes,
            "nb_programmes": len(programmes_set),
            "nb_actions": len(actions_set),
            "message": f"Import r√©ussi : {nb_lignes} lignes charg√©es",
        }

    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"‚ùå Erreur upload SIGOBE : {e}")

        # Marquer le chargement comme en erreur si cr√©√©
        if "chargement" in locals():
            chargement.statut = "Erreur"
            chargement.message_erreur = str(e)
            session.add(chargement)
            session.commit()

        raise HTTPException(500, f"Erreur lors de l'import : {e!s}")


def calcul_kpis_sigobe(chargement_id: int, session: Session):
    """Calcule les KPIs agr√©g√©s pour un chargement SIGOBE"""

    chargement = session.get(SigobeChargement, chargement_id)
    if not chargement:
        return

    # R√©cup√©rer toutes les donn√©es d'ex√©cution
    executions = session.exec(select(SigobeExecution).where(SigobeExecution.chargement_id == chargement_id)).all()

    if not executions:
        return

    # 1. KPI Global
    global_budget_vote = sum(e.budget_vote or 0 for e in executions)
    global_budget_actuel = sum(e.budget_actuel or 0 for e in executions)
    global_engagements = sum(e.engagements_emis or 0 for e in executions)
    global_mandats = sum(e.mandats_emis or 0 for e in executions)

    taux_engagement = (float(global_engagements) / float(global_budget_actuel) * 100) if global_budget_actuel > 0 else 0
    taux_mandatement = (float(global_mandats) / float(global_engagements) * 100) if global_engagements > 0 else 0
    taux_execution = (float(global_mandats) / float(global_budget_actuel) * 100) if global_budget_actuel > 0 else 0

    kpi_global = SigobeKpi(
        annee=chargement.annee,
        trimestre=chargement.trimestre,
        dimension="global",
        budget_vote_total=Decimal(str(global_budget_vote)),
        budget_actuel_total=Decimal(str(global_budget_actuel)),
        engagements_total=Decimal(str(global_engagements)),
        mandats_total=Decimal(str(global_mandats)),
        taux_engagement=Decimal(str(round(taux_engagement, 2))),
        taux_mandatement=Decimal(str(round(taux_mandatement, 2))),
        taux_execution=Decimal(str(round(taux_execution, 2))),
        chargement_id=chargement_id,
    )

    session.add(kpi_global)

    # 2. KPIs par programme
    programmes_dict = defaultdict(lambda: {"budget_vote": 0, "budget_actuel": 0, "engagements": 0, "mandats": 0})

    for e in executions:
        if e.programmes:
            programmes_dict[e.programmes]["budget_vote"] += e.budget_vote or 0
            programmes_dict[e.programmes]["budget_actuel"] += e.budget_actuel or 0
            programmes_dict[e.programmes]["engagements"] += e.engagements_emis or 0
            programmes_dict[e.programmes]["mandats"] += e.mandats_emis or 0

    for prog, data in programmes_dict.items():
        taux_eng = (float(data["engagements"]) / float(data["budget_actuel"]) * 100) if data["budget_actuel"] > 0 else 0
        taux_mand = (float(data["mandats"]) / float(data["engagements"]) * 100) if data["engagements"] > 0 else 0
        taux_exec = (float(data["mandats"]) / float(data["budget_actuel"]) * 100) if data["budget_actuel"] > 0 else 0

        code, libelle = split_code_libelle(prog)

        kpi_prog = SigobeKpi(
            annee=chargement.annee,
            trimestre=chargement.trimestre,
            dimension="programme",
            dimension_code=code,
            dimension_libelle=libelle,
            budget_vote_total=Decimal(str(data["budget_vote"])),
            budget_actuel_total=Decimal(str(data["budget_actuel"])),
            engagements_total=Decimal(str(data["engagements"])),
            mandats_total=Decimal(str(data["mandats"])),
            taux_engagement=Decimal(str(round(taux_eng, 2))),
            taux_mandatement=Decimal(str(round(taux_mand, 2))),
            taux_execution=Decimal(str(round(taux_exec, 2))),
            chargement_id=chargement_id,
        )

        session.add(kpi_prog)

    # 3. KPIs par nature de d√©pense
    natures_dict = defaultdict(lambda: {"budget_vote": 0, "budget_actuel": 0, "engagements": 0, "mandats": 0})

    for e in executions:
        if e.type_depense:
            natures_dict[e.type_depense]["budget_vote"] += e.budget_vote or 0
            natures_dict[e.type_depense]["budget_actuel"] += e.budget_actuel or 0
            natures_dict[e.type_depense]["engagements"] += e.engagements_emis or 0
            natures_dict[e.type_depense]["mandats"] += e.mandats_emis or 0

    for nature, data in natures_dict.items():
        taux_eng = (float(data["engagements"]) / float(data["budget_actuel"]) * 100) if data["budget_actuel"] > 0 else 0
        taux_mand = (float(data["mandats"]) / float(data["engagements"]) * 100) if data["engagements"] > 0 else 0
        taux_exec = (float(data["mandats"]) / float(data["budget_actuel"]) * 100) if data["budget_actuel"] > 0 else 0

        # Extraire le code court de la nature de d√©pense
        code_nature, libelle_nature = split_code_libelle(nature)

        # Si le code est vide ou identique au libell√©, utiliser des abr√©viations standards
        if not code_nature or code_nature == libelle_nature:
            nature_lower = nature.lower()
            if "bien" in nature_lower or "service" in nature_lower:
                code_nature = "BS"
            elif "personnel" in nature_lower:
                code_nature = "P"
            elif "investissement" in nature_lower:
                code_nature = "I"
            elif "transfert" in nature_lower:
                code_nature = "T"
            else:
                code_nature = nature[:3].upper()  # Prendre les 3 premi√®res lettres
            libelle_nature = nature

        kpi_nature = SigobeKpi(
            annee=chargement.annee,
            trimestre=chargement.trimestre,
            dimension="nature",
            dimension_code=code_nature,
            dimension_libelle=libelle_nature,
            budget_vote_total=Decimal(str(data["budget_vote"])),
            budget_actuel_total=Decimal(str(data["budget_actuel"])),
            engagements_total=Decimal(str(data["engagements"])),
            mandats_total=Decimal(str(data["mandats"])),
            taux_engagement=Decimal(str(round(taux_eng, 2))),
            taux_mandatement=Decimal(str(round(taux_mand, 2))),
            taux_execution=Decimal(str(round(taux_exec, 2))),
            chargement_id=chargement_id,
        )

        session.add(kpi_nature)

    session.commit()
    logger.info(f"‚úÖ KPIs calcul√©s : 1 global + {len(programmes_dict)} programmes + {len(natures_dict)} natures")


@router.delete("/api/sigobe/{chargement_id}")
def api_delete_sigobe(
    chargement_id: int, session: Session = Depends(get_session), current_user: User = Depends(get_current_user)
):
    """Supprimer un chargement SIGOBE et toutes ses donn√©es"""
    chargement = session.get(SigobeChargement, chargement_id)
    if not chargement:
        raise HTTPException(404, "Chargement non trouv√©")

    try:
        # Supprimer les KPIs
        session.exec(delete(SigobeKpi).where(SigobeKpi.chargement_id == chargement_id))

        # Supprimer les ex√©cutions
        session.exec(delete(SigobeExecution).where(SigobeExecution.chargement_id == chargement_id))

        # Supprimer le chargement
        periode_libelle = chargement.periode_libelle
        session.delete(chargement)
        session.commit()

        logger.info(f"‚úÖ Chargement SIGOBE {chargement_id} supprim√© par {current_user.email}")

        # Log activit√©
        ActivityService.log_user_activity(
            session=session,
            user=current_user,
            action_type="delete",
            target_type="sigobe",
            description=f"Suppression du chargement SIGOBE {periode_libelle}",
            target_id=chargement_id,
            icon="üóëÔ∏è",
        )

        return {"ok": True, "message": "Chargement supprim√© avec succ√®s"}

    except Exception as e:
        logger.error(f"‚ùå Erreur suppression SIGOBE {chargement_id}: {e}")
        session.rollback()
        raise HTTPException(500, f"Erreur lors de la suppression : {e!s}")


@router.get("/api/sigobe/executions/{execution_id}")
def api_get_sigobe_execution(
    execution_id: int, session: Session = Depends(get_session), current_user: User = Depends(get_current_user)
):
    """R√©cup√©rer une ligne d'ex√©cution SIGOBE"""
    execution = session.get(SigobeExecution, execution_id)
    if not execution:
        raise HTTPException(404, "Ligne d'ex√©cution non trouv√©e")

    return {
        "ok": True,
        "execution": {
            "id": execution.id,
            "programmes": execution.programmes,
            "actions": execution.actions,
            "rprog": execution.rprog,
            "type_depense": execution.type_depense,
            "activites": execution.activites,
            "taches": execution.taches,
            "budget_vote": float(execution.budget_vote),
            "budget_actuel": float(execution.budget_actuel),
            "engagements_emis": float(execution.engagements_emis),
            "disponible_eng": float(execution.disponible_eng),
            "mandats_emis": float(execution.mandats_emis),
            "mandats_vise_cf": float(execution.mandats_vise_cf),
            "mandats_pec": float(execution.mandats_pec),
        },
    }


@router.put("/api/sigobe/executions/{execution_id}")
async def api_update_sigobe_execution(
    execution_id: int,
    data: dict,
    session: Session = Depends(get_session),
    current_user: User = Depends(get_current_user),
):
    """Modifier une ligne d'ex√©cution SIGOBE"""
    execution = session.get(SigobeExecution, execution_id)
    if not execution:
        raise HTTPException(404, "Ligne d'ex√©cution non trouv√©e")

    try:
        # Mettre √† jour les montants financiers
        execution.budget_vote = Decimal(str(data.get("budget_vote", 0)))
        execution.budget_actuel = Decimal(str(data.get("budget_actuel", 0)))
        execution.engagements_emis = Decimal(str(data.get("engagements_emis", 0)))
        execution.disponible_eng = Decimal(str(data.get("disponible_eng", 0)))
        execution.mandats_emis = Decimal(str(data.get("mandats_emis", 0)))
        execution.mandats_vise_cf = Decimal(str(data.get("mandats_vise_cf", 0)))
        execution.mandats_pec = Decimal(str(data.get("mandats_pec", 0)))

        session.add(execution)
        session.commit()

        logger.info(f"‚úÖ Ligne SIGOBE {execution_id} modifi√©e par {current_user.email}")

        # Log activit√©
        ActivityService.log_user_activity(
            session=session,
            user=current_user,
            action_type="update",
            target_type="sigobe_execution",
            description=f"Modification ligne SIGOBE {execution.taches or execution.activites or execution.actions}",
            target_id=execution_id,
            icon="‚úèÔ∏è",
        )

        return {"ok": True, "message": "Ligne modifi√©e avec succ√®s"}

    except Exception as e:
        logger.error(f"‚ùå Erreur modification ligne SIGOBE {execution_id}: {e}")
        session.rollback()
        raise HTTPException(500, f"Erreur lors de la modification : {e!s}")


@router.delete("/api/sigobe/executions/{execution_id}")
def api_delete_sigobe_execution(
    execution_id: int, session: Session = Depends(get_session), current_user: User = Depends(get_current_user)
):
    """Supprimer une ligne d'ex√©cution SIGOBE"""
    execution = session.get(SigobeExecution, execution_id)
    if not execution:
        raise HTTPException(404, "Ligne d'ex√©cution non trouv√©e")

    try:
        tache_libelle = execution.taches or execution.activites or execution.actions or "ligne"

        session.delete(execution)
        session.commit()

        logger.info(f"‚úÖ Ligne SIGOBE {execution_id} supprim√©e par {current_user.email}")

        # Log activit√©
        ActivityService.log_user_activity(
            session=session,
            user=current_user,
            action_type="delete",
            target_type="sigobe_execution",
            description=f"Suppression ligne SIGOBE {tache_libelle}",
            target_id=execution_id,
            icon="üóëÔ∏è",
        )

        return {"ok": True, "message": "Ligne supprim√©e avec succ√®s"}

    except Exception as e:
        session.rollback()
        logger.error(f"‚ùå Erreur suppression ligne SIGOBE {execution_id}: {e}")
        raise HTTPException(500, f"Erreur lors de la suppression: {e!s}")


@router.get("/api/sigobe/{chargement_id}/export/excel")
def api_export_sigobe_excel(
    chargement_id: int, session: Session = Depends(get_session), current_user: User = Depends(get_current_user)
):
    """
    Exporter un chargement SIGOBE en Excel avec la m√™me mise en forme que le template
    """
    try:
        from openpyxl import Workbook
        from openpyxl.styles import Alignment, Border, Font, PatternFill, Side
    except ImportError:
        raise HTTPException(500, "openpyxl n'est pas install√©")

    # R√©cup√©rer le chargement
    chargement = session.get(SigobeChargement, chargement_id)
    if not chargement:
        raise HTTPException(404, "Chargement SIGOBE non trouv√©")

    # R√©cup√©rer toutes les lignes d'ex√©cution
    executions = session.exec(
        select(SigobeExecution)
        .where(SigobeExecution.chargement_id == chargement_id)
        .order_by(
            SigobeExecution.programmes, SigobeExecution.actions, SigobeExecution.activites, SigobeExecution.taches
        )
    ).all()

    # Cr√©er le classeur Excel
    wb = Workbook()
    ws = wb.active
    ws.title = f"SIGOBE {chargement.periode_libelle}"

    # Styles
    header_fill = PatternFill(start_color="FF8C00", end_color="FF8C00", fill_type="solid")
    header_font = Font(bold=True, color="FFFFFF", size=11)
    data_fill = PatternFill(start_color="FFFFFF", end_color="FFFFFF", fill_type="solid")
    total_action_fill = PatternFill(start_color="CCE5FF", end_color="CCE5FF", fill_type="solid")
    total_programme_fill = PatternFill(start_color="FFD700", end_color="FFD700", fill_type="solid")
    total_general_fill = PatternFill(start_color="FF6B6B", end_color="FF6B6B", fill_type="solid")
    total_font = Font(bold=True, size=10)
    total_general_font = Font(bold=True, size=11, color="FFFFFF")
    border_style = Border(
        left=Side(style="thin"), right=Side(style="thin"), top=Side(style="thin"), bottom=Side(style="thin")
    )

    # En-t√™tes
    headers = [
        "PROGRAMMES",
        "ACTIONS",
        "RPROG",
        "TYPE DEPENSE",
        "ACTIVITES",
        "TACHES",
        "BUDGET VOTE",
        "BUDGET ACTUEL",
        "ENGAGEMENTS EMIS",
        "DISPONIBLE ENG",
        "MANDATS EMIS",
        "MANDATS VISE CF",
        "MANDATS PEC",
    ]

    current_row = 1
    for col_num, header in enumerate(headers, 1):
        cell = ws.cell(row=current_row, column=col_num)
        cell.value = header
        cell.fill = header_fill
        cell.font = header_font
        cell.alignment = Alignment(horizontal="center", vertical="center", wrap_text=True)
        cell.border = border_style

    # Ajuster largeurs
    for col in ["A", "B", "C", "D", "E", "F"]:
        ws.column_dimensions[col].width = 30
    for col in ["G", "H", "I", "J", "K", "L", "M"]:
        ws.column_dimensions[col].width = 18

    current_row = 2

    # Organiser par hi√©rarchie
    from collections import defaultdict

    programmes_dict = defaultdict(lambda: defaultdict(list))

    for exec in executions:
        prog = exec.programmes or "Sans programme"
        action = exec.actions or "Sans action"
        programmes_dict[prog][action].append(exec)

    # Totaux globaux
    totaux_generaux = {
        "vote": 0,
        "actuel": 0,
        "engagements": 0,
        "disponible": 0,
        "mandats": 0,
        "mandats_vise": 0,
        "mandats_pec": 0,
    }

    # √âcrire les donn√©es avec hi√©rarchie
    for programme, actions_dict in sorted(programmes_dict.items()):
        # Ligne Programme
        cell = ws.cell(row=current_row, column=1)
        cell.value = programme
        cell.fill = total_programme_fill
        cell.font = total_font
        cell.border = border_style
        for col in range(2, 14):
            ws.cell(row=current_row, column=col).border = border_style
            ws.cell(row=current_row, column=col).fill = total_programme_fill
        current_row += 1

        totaux_programme = {
            "vote": 0,
            "actuel": 0,
            "engagements": 0,
            "disponible": 0,
            "mandats": 0,
            "mandats_vise": 0,
            "mandats_pec": 0,
        }

        for action, execs in sorted(actions_dict.items()):
            # Ligne Action
            cell = ws.cell(row=current_row, column=2)
            cell.value = action
            cell.fill = total_action_fill
            cell.font = total_font
            cell.border = border_style
            ws.cell(row=current_row, column=1).border = border_style
            for col in range(3, 14):
                ws.cell(row=current_row, column=col).border = border_style
                ws.cell(row=current_row, column=col).fill = total_action_fill
            current_row += 1

            # Lignes d'ex√©cution (t√¢ches)
            for exec in execs:
                row_data = [
                    exec.programmes or "",
                    exec.actions or "",
                    exec.rprog or "",
                    exec.type_depense or "",
                    exec.activites or "",
                    exec.taches or "",
                    float(exec.budget_vote or 0),
                    float(exec.budget_actuel or 0),
                    float(exec.engagements_emis or 0),
                    float(exec.disponible_eng or 0),
                    float(exec.mandats_emis or 0),
                    float(exec.mandats_vise_cf or 0),
                    float(exec.mandats_pec or 0),
                ]

                for col_num, value in enumerate(row_data, 1):
                    cell = ws.cell(row=current_row, column=col_num)
                    cell.value = value
                    cell.border = border_style

                    if col_num > 6:  # Colonnes financi√®res
                        cell.alignment = Alignment(horizontal="right", vertical="center")
                        cell.number_format = "#,##0"
                    else:
                        cell.alignment = Alignment(horizontal="left", vertical="center")

                # Accumuler totaux
                totaux_programme["vote"] += float(exec.budget_vote or 0)
                totaux_programme["actuel"] += float(exec.budget_actuel or 0)
                totaux_programme["engagements"] += float(exec.engagements_emis or 0)
                totaux_programme["disponible"] += float(exec.disponible_eng or 0)
                totaux_programme["mandats"] += float(exec.mandats_emis or 0)
                totaux_programme["mandats_vise"] += float(exec.mandats_vise_cf or 0)
                totaux_programme["mandats_pec"] += float(exec.mandats_pec or 0)

                current_row += 1

        # Total Programme
        row_data = [
            f"TOTAL {programme}",
            "",
            "",
            "",
            "",
            "",
            totaux_programme["vote"],
            totaux_programme["actuel"],
            totaux_programme["engagements"],
            totaux_programme["disponible"],
            totaux_programme["mandats"],
            totaux_programme["mandats_vise"],
            totaux_programme["mandats_pec"],
        ]

        for col_num, value in enumerate(row_data, 1):
            cell = ws.cell(row=current_row, column=col_num)
            cell.value = value
            cell.fill = total_programme_fill
            cell.font = total_font
            cell.border = border_style
            if col_num > 6:
                cell.alignment = Alignment(horizontal="right", vertical="center")
                cell.number_format = "#,##0"
            else:
                cell.alignment = Alignment(horizontal="left", vertical="center")

        # Accumuler totaux g√©n√©raux
        for key in totaux_generaux:
            totaux_generaux[key] += totaux_programme[key]

        current_row += 1
        current_row += 1  # Ligne vide

    # Total G√©n√©ral
    row_data = [
        "TOTAL G√âN√âRAL",
        "",
        "",
        "",
        "",
        "",
        totaux_generaux["vote"],
        totaux_generaux["actuel"],
        totaux_generaux["engagements"],
        totaux_generaux["disponible"],
        totaux_generaux["mandats"],
        totaux_generaux["mandats_vise"],
        totaux_generaux["mandats_pec"],
    ]

    for col_num, value in enumerate(row_data, 1):
        cell = ws.cell(row=current_row, column=col_num)
        cell.value = value
        cell.fill = total_general_fill
        cell.font = total_general_font
        cell.border = border_style
        if col_num > 6:
            cell.alignment = Alignment(horizontal="right", vertical="center")
            cell.number_format = "#,##0"
        else:
            cell.alignment = Alignment(horizontal="left", vertical="center")

    # Figer les en-t√™tes
    ws.freeze_panes = "A2"

    # Sauvegarder dans un buffer
    buffer = BytesIO()
    wb.save(buffer)
    buffer.seek(0)

    logger.info(f"‚úÖ Excel export√© pour chargement SIGOBE {chargement_id}")

    # Nom du fichier
    filename = f"SIGOBE_{chargement.periode_libelle.replace(' ', '_')}_{datetime.now().strftime('%Y%m%d_%H%M%S')}.xlsx"

    return StreamingResponse(
        buffer,
        media_type="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
        headers={"Content-Disposition": f"attachment; filename={filename}"},
    )


@router.get("/api/sigobe/{chargement_id}/kpis")
def api_get_kpis_sigobe(
    chargement_id: int,
    dimension: str | None = None,
    session: Session = Depends(get_session),
    current_user: User = Depends(get_current_user),
):
    """R√©cup√©rer les KPIs d'un chargement SIGOBE"""

    query = select(SigobeKpi).where(SigobeKpi.chargement_id == chargement_id)

    if dimension:
        query = query.where(SigobeKpi.dimension == dimension)

    kpis = session.exec(query).all()

    return {
        "ok": True,
        "kpis": [
            {
                "id": kpi.id,
                "dimension": kpi.dimension,
                "dimension_code": kpi.dimension_code,
                "dimension_libelle": kpi.dimension_libelle,
                "budget_vote_total": float(kpi.budget_vote_total),
                "budget_actuel_total": float(kpi.budget_actuel_total),
                "engagements_total": float(kpi.engagements_total),
                "mandats_total": float(kpi.mandats_total),
                "taux_engagement": float(kpi.taux_engagement),
                "taux_mandatement": float(kpi.taux_mandatement),
                "taux_execution": float(kpi.taux_execution),
            }
            for kpi in kpis
        ],
    }

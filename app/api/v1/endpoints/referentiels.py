# app/api/v1/endpoints/referentiels.py
"""
Endpoints pour la gestion des r√©f√©rentiels RH/Personnel
(Programmes, Directions, Services, Grades)
"""
from typing import List, Optional
from fastapi import APIRouter, Depends, HTTPException, Request, Form
from fastapi.responses import HTMLResponse, JSONResponse
from sqlmodel import Session, select
from datetime import datetime

from app.db.session import get_session
from app.api.v1.endpoints.auth import get_current_user
from app.models.user import User
from app.models.personnel import Programme, Direction, GradeComplet
from app.models.rh import ServiceDept
from app.core.enums import GradeCategory
from app.templates import templates, get_template_context
from app.core.logging_config import get_logger

logger = get_logger(__name__)
router = APIRouter()


# ============================================
# PAGE PRINCIPALE R√âF√âRENTIELS
# ============================================

@router.get("/", response_class=HTMLResponse, name="referentiels_home")
def referentiels_home(
    request: Request,
    session: Session = Depends(get_session),
    current_user: User = Depends(get_current_user)
):
    """
    Page principale de gestion des r√©f√©rentiels
    """
    # Compter les r√©f√©rentiels
    programmes_raw = session.exec(select(Programme)).all()
    directions_raw = session.exec(select(Direction)).all()
    services_raw = session.exec(select(ServiceDept)).all()
    grades_raw = session.exec(select(GradeComplet)).all()
    
    # Cr√©er les dictionnaires de r√©f√©rence
    programmes_dict = {p.id: p for p in programmes_raw}
    directions_dict = {d.id: d for d in directions_raw}
    
    # Enrichir les directions avec programme_libelle
    directions_enriched = []
    for d in directions_raw:
        direction_dict = {
            "id": d.id,
            "code": d.code,
            "libelle": d.libelle,
            "description": d.description or "",
            "actif": d.actif,
            "programme_id": d.programme_id,
            "programme_libelle": programmes_dict[d.programme_id].libelle if d.programme_id and d.programme_id in programmes_dict else ""
        }
        directions_enriched.append(direction_dict)
    
    # Enrichir les services avec direction_libelle
    services_enriched = []
    for s in services_raw:
        service_dict = {
            "id": s.id,
            "code": s.code,
            "libelle": s.libelle,
            "description": s.description or "",
            "actif": s.actif,
            "direction_id": s.direction_id,
            "direction_libelle": directions_dict[s.direction_id].libelle if s.direction_id and s.direction_id in directions_dict else ""
        }
        services_enriched.append(service_dict)
    
    return templates.TemplateResponse(
        "pages/referentiels.html",
        get_template_context(
            request,
            nb_programmes=len(programmes_raw),
            nb_directions=len(directions_raw),
            nb_services=len(services_raw),
            nb_grades=len(grades_raw),
            programmes=programmes_raw,
            directions=directions_enriched,  # ‚Üê Directions enrichies avec programme_libelle
            services=services_enriched,  # ‚Üê Services enrichis avec direction_libelle
            grades=grades_raw,
            current_user=current_user
        )
    )


# ============================================
# API - PROGRAMMES
# ============================================

@router.get("/api/programmes", name="api_list_programmes_ref")
def api_list_programmes_ref(session: Session = Depends(get_session)):
    """Liste tous les programmes"""
    programmes = session.exec(select(Programme).order_by(Programme.code)).all()
    return [
        {
            "id": p.id,
            "code": p.code,
            "libelle": p.libelle,
            "description": p.description,
            "actif": p.actif
        }
        for p in programmes
    ]


@router.post("/api/programmes", name="api_create_programme")
def api_create_programme(
    code: str = Form(...),
    libelle: str = Form(...),
    description: Optional[str] = Form(None),
    session: Session = Depends(get_session),
    current_user: User = Depends(get_current_user)
):
    """Cr√©er un nouveau programme"""
    # V√©rifier si le code existe d√©j√†
    existing = session.exec(select(Programme).where(Programme.code == code)).first()
    if existing:
        raise HTTPException(400, f"Le code '{code}' existe d√©j√†")
    
    programme = Programme(code=code, libelle=libelle, description=description)
    session.add(programme)
    session.commit()
    session.refresh(programme)
    
    logger.info(f"‚úÖ Programme cr√©√© : {code} - {libelle} par {current_user.email}")
    return {"ok": True, "id": programme.id, "message": "Programme cr√©√© avec succ√®s"}


@router.put("/api/programmes/{programme_id}", name="api_update_programme")
def api_update_programme(
    programme_id: int,
    code: str = Form(...),
    libelle: str = Form(...),
    description: Optional[str] = Form(None),
    actif: bool = Form(True),
    session: Session = Depends(get_session),
    current_user: User = Depends(get_current_user)
):
    """Modifier un programme"""
    programme = session.get(Programme, programme_id)
    if not programme:
        raise HTTPException(404, "Programme non trouv√©")
    
    # V√©rifier si le nouveau code n'existe pas d√©j√† (sauf pour lui-m√™me)
    if code != programme.code:
        existing = session.exec(select(Programme).where(Programme.code == code)).first()
        if existing:
            raise HTTPException(400, f"Le code '{code}' existe d√©j√†")
    
    programme.code = code
    programme.libelle = libelle
    programme.description = description
    programme.actif = actif
    programme.updated_at = datetime.utcnow()
    
    session.add(programme)
    session.commit()
    
    logger.info(f"‚úÖ Programme modifi√© : {code} par {current_user.email}")
    return {"ok": True, "message": "Programme modifi√© avec succ√®s"}


@router.post("/api/programmes/{programme_id}/reactivate", name="api_reactivate_programme")
def api_reactivate_programme(
    programme_id: int,
    session: Session = Depends(get_session),
    current_user: User = Depends(get_current_user)
):
    """R√©activer un programme d√©sactiv√©"""
    programme = session.get(Programme, programme_id)
    if not programme:
        raise HTTPException(404, "Programme non trouv√©")
    
    programme.actif = True
    programme.updated_at = datetime.utcnow()
    session.add(programme)
    session.commit()
    
    logger.info(f"‚úÖ Programme r√©activ√© : {programme.code} par {current_user.email}")
    return {"ok": True, "message": "Programme r√©activ√© avec succ√®s"}


@router.delete("/api/programmes/{programme_id}", name="api_delete_programme")
def api_delete_programme(
    programme_id: int,
    hard_delete: bool = False,
    session: Session = Depends(get_session),
    current_user: User = Depends(get_current_user)
):
    """Supprimer un programme (soft delete par d√©faut, hard delete si hard_delete=true)"""
    programme = session.get(Programme, programme_id)
    if not programme:
        raise HTTPException(404, "Programme non trouv√©")
    
    if hard_delete:
        # Hard delete - Suppression d√©finitive
        session.delete(programme)
        session.commit()
        logger.warning(f"üóëÔ∏è Programme SUPPRIM√â D√âFINITIVEMENT : {programme.code} par {current_user.email}")
        return {"ok": True, "message": "Programme supprim√© d√©finitivement"}
    else:
        # Soft delete - D√©sactivation
        programme.actif = False
        programme.updated_at = datetime.utcnow()
        session.add(programme)
        session.commit()
        logger.info(f"‚úÖ Programme d√©sactiv√© : {programme.code} par {current_user.email}")
        return {"ok": True, "message": "Programme d√©sactiv√© avec succ√®s"}


# ============================================
# API - DIRECTIONS
# ============================================

@router.get("/api/directions", name="api_list_directions_ref")
def api_list_directions_ref(session: Session = Depends(get_session)):
    """Liste toutes les directions"""
    directions = session.exec(select(Direction).order_by(Direction.code)).all()
    programmes = {p.id: p for p in session.exec(select(Programme)).all()}
    
    result = []
    for d in directions:
        programme_libelle = ""  # Cha√Æne vide au lieu de None
        if d.programme_id and d.programme_id in programmes:
            programme_libelle = programmes[d.programme_id].libelle
        
        result.append({
            "id": d.id,
            "code": d.code,
            "libelle": d.libelle,
            "description": d.description or "",
            "actif": d.actif,
            "programme_id": d.programme_id,
            "programme_libelle": programme_libelle
        })
    
    return JSONResponse(
        content=result,
        headers={
            "Cache-Control": "no-cache, no-store, must-revalidate",
            "Pragma": "no-cache",
            "Expires": "0"
        }
    )


@router.post("/api/directions", name="api_create_direction")
def api_create_direction(
    code: str = Form(...),
    libelle: str = Form(...),
    description: Optional[str] = Form(None),
    programme_id: Optional[int] = Form(None),
    session: Session = Depends(get_session),
    current_user: User = Depends(get_current_user)
):
    """Cr√©er une nouvelle direction"""
    existing = session.exec(select(Direction).where(Direction.code == code)).first()
    if existing:
        raise HTTPException(400, f"Le code '{code}' existe d√©j√†")
    
    direction = Direction(code=code, libelle=libelle, description=description, programme_id=programme_id)
    session.add(direction)
    session.commit()
    session.refresh(direction)
    
    logger.info(f"‚úÖ Direction cr√©√©e : {code} - {libelle} par {current_user.email}")
    return {"ok": True, "id": direction.id, "message": "Direction cr√©√©e avec succ√®s"}


@router.put("/api/directions/{direction_id}", name="api_update_direction")
def api_update_direction(
    direction_id: int,
    code: str = Form(...),
    libelle: str = Form(...),
    description: Optional[str] = Form(None),
    programme_id: Optional[int] = Form(None),
    actif: bool = Form(True),
    session: Session = Depends(get_session),
    current_user: User = Depends(get_current_user)
):
    """Modifier une direction"""
    direction = session.get(Direction, direction_id)
    if not direction:
        raise HTTPException(404, "Direction non trouv√©e")
    
    if code != direction.code:
        existing = session.exec(select(Direction).where(Direction.code == code)).first()
        if existing:
            raise HTTPException(400, f"Le code '{code}' existe d√©j√†")
    
    direction.code = code
    direction.libelle = libelle
    direction.description = description
    direction.programme_id = programme_id
    direction.actif = actif
    direction.updated_at = datetime.utcnow()
    
    session.add(direction)
    session.commit()
    
    logger.info(f"‚úÖ Direction modifi√©e : {code} par {current_user.email}")
    return {"ok": True, "message": "Direction modifi√©e avec succ√®s"}


@router.post("/api/directions/{direction_id}/reactivate", name="api_reactivate_direction")
def api_reactivate_direction(
    direction_id: int,
    session: Session = Depends(get_session),
    current_user: User = Depends(get_current_user)
):
    """R√©activer une direction d√©sactiv√©e"""
    direction = session.get(Direction, direction_id)
    if not direction:
        raise HTTPException(404, "Direction non trouv√©e")
    
    direction.actif = True
    direction.updated_at = datetime.utcnow()
    session.add(direction)
    session.commit()
    
    logger.info(f"‚úÖ Direction r√©activ√©e : {direction.code} par {current_user.email}")
    return {"ok": True, "message": "Direction r√©activ√©e avec succ√®s"}


@router.delete("/api/directions/{direction_id}", name="api_delete_direction")
def api_delete_direction(
    direction_id: int,
    hard_delete: bool = False,
    session: Session = Depends(get_session),
    current_user: User = Depends(get_current_user)
):
    """Supprimer une direction (soft delete par d√©faut, hard delete si hard_delete=true)"""
    direction = session.get(Direction, direction_id)
    if not direction:
        raise HTTPException(404, "Direction non trouv√©e")
    
    if hard_delete:
        session.delete(direction)
        session.commit()
        logger.warning(f"üóëÔ∏è Direction SUPPRIM√âE D√âFINITIVEMENT : {direction.code} par {current_user.email}")
        return {"ok": True, "message": "Direction supprim√©e d√©finitivement"}
    else:
        direction.actif = False
        direction.updated_at = datetime.utcnow()
        session.add(direction)
        session.commit()
        logger.info(f"‚úÖ Direction d√©sactiv√©e : {direction.code} par {current_user.email}")
        return {"ok": True, "message": "Direction d√©sactiv√©e avec succ√®s"}


# ============================================
# API - SERVICES
# ============================================

@router.get("/api/services", name="api_list_services_ref")
def api_list_services_ref(session: Session = Depends(get_session)):
    """Liste tous les services avec leurs directions"""
    services = session.exec(select(ServiceDept).order_by(ServiceDept.code)).all()
    directions = {d.id: d for d in session.exec(select(Direction)).all()}
    
    result = []
    for s in services:
        direction_libelle = ""  # Cha√Æne vide au lieu de None pour forcer l'inclusion dans le JSON
        if s.direction_id and s.direction_id in directions:
            direction_libelle = directions[s.direction_id].libelle
        
        result.append({
            "id": s.id,
            "code": s.code,
            "libelle": s.libelle,
            "description": s.description or "",
            "actif": s.actif,
            "direction_id": s.direction_id,
            "direction_libelle": direction_libelle
        })
    
    # Retourner avec headers no-cache pour forcer le rafra√Æchissement
    return JSONResponse(
        content=result,
        headers={
            "Cache-Control": "no-cache, no-store, must-revalidate",
            "Pragma": "no-cache",
            "Expires": "0"
        }
    )


@router.post("/api/services", name="api_create_service")
def api_create_service(
    code: str = Form(...),
    libelle: str = Form(...),
    description: Optional[str] = Form(None),
    direction_id: Optional[int] = Form(None),
    session: Session = Depends(get_session),
    current_user: User = Depends(get_current_user)
):
    """Cr√©er un nouveau service"""
    existing = session.exec(select(ServiceDept).where(ServiceDept.code == code)).first()
    if existing:
        raise HTTPException(400, f"Le code '{code}' existe d√©j√†")
    
    service = ServiceDept(
        code=code, 
        libelle=libelle, 
        description=description, 
        direction_id=direction_id,
        actif=True
    )
    session.add(service)
    session.commit()
    session.refresh(service)
    
    logger.info(f"‚úÖ Service cr√©√© : {code} - {libelle} par {current_user.email}")
    return {"ok": True, "id": service.id, "message": "Service cr√©√© avec succ√®s"}


@router.put("/api/services/{service_id}", name="api_update_service")
def api_update_service(
    service_id: int,
    code: str = Form(...),
    libelle: str = Form(...),
    description: Optional[str] = Form(None),
    direction_id: Optional[int] = Form(None),
    actif: bool = Form(True),
    session: Session = Depends(get_session),
    current_user: User = Depends(get_current_user)
):
    """Modifier un service"""
    service = session.get(ServiceDept, service_id)
    if not service:
        raise HTTPException(404, "Service non trouv√©")
    
    if code != service.code:
        existing = session.exec(select(ServiceDept).where(ServiceDept.code == code)).first()
        if existing:
            raise HTTPException(400, f"Le code '{code}' existe d√©j√†")
    
    service.code = code
    service.libelle = libelle
    service.description = description
    service.direction_id = direction_id
    service.actif = actif
    
    session.add(service)
    session.commit()
    
    logger.info(f"‚úÖ Service modifi√© : {code} par {current_user.email}")
    return {"ok": True, "message": "Service modifi√© avec succ√®s"}


@router.post("/api/services/{service_id}/reactivate", name="api_reactivate_service")
def api_reactivate_service(
    service_id: int,
    session: Session = Depends(get_session),
    current_user: User = Depends(get_current_user)
):
    """R√©activer un service d√©sactiv√©"""
    service = session.get(ServiceDept, service_id)
    if not service:
        raise HTTPException(404, "Service non trouv√©")
    
    service.actif = True
    session.add(service)
    session.commit()
    
    logger.info(f"‚úÖ Service r√©activ√© : {service.code} par {current_user.email}")
    return {"ok": True, "message": "Service r√©activ√© avec succ√®s"}


@router.delete("/api/services/{service_id}", name="api_delete_service")
def api_delete_service(
    service_id: int,
    hard_delete: bool = False,
    session: Session = Depends(get_session),
    current_user: User = Depends(get_current_user)
):
    """Supprimer un service (soft delete par d√©faut, hard delete si hard_delete=true)"""
    service = session.get(ServiceDept, service_id)
    if not service:
        raise HTTPException(404, "Service non trouv√©")
    
    if hard_delete:
        session.delete(service)
        session.commit()
        logger.warning(f"üóëÔ∏è Service SUPPRIM√â D√âFINITIVEMENT : {service.code} par {current_user.email}")
        return {"ok": True, "message": "Service supprim√© d√©finitivement"}
    else:
        service.actif = False
        session.add(service)
        session.commit()
        logger.info(f"‚úÖ Service d√©sactiv√© : {service.code} par {current_user.email}")
        return {"ok": True, "message": "Service d√©sactiv√© avec succ√®s"}


# ============================================
# API - GRADES
# ============================================

@router.get("/api/grades", name="api_list_grades_ref")
def api_list_grades_ref(session: Session = Depends(get_session)):
    """Liste tous les grades"""
    grades = session.exec(select(GradeComplet).order_by(GradeComplet.code)).all()
    
    return [
        {
            "id": g.id,
            "code": g.code,
            "libelle": g.libelle,
            "categorie": str(g.categorie),  # Convertir en string
            "echelon_min": g.echelon_min,
            "echelon_max": g.echelon_max,
            "actif": g.actif
        }
        for g in grades
    ]


@router.post("/api/grades", name="api_create_grade")
def api_create_grade(
    code: str = Form(...),
    libelle: str = Form(...),
    categorie: str = Form(...),
    echelon_min: int = Form(1),
    echelon_max: int = Form(5),
    session: Session = Depends(get_session),
    current_user: User = Depends(get_current_user)
):
    """Cr√©er un nouveau grade"""
    existing = session.exec(select(GradeComplet).where(GradeComplet.code == code)).first()
    if existing:
        raise HTTPException(400, f"Le code '{code}' existe d√©j√†")
    
    # Convertir la cat√©gorie (ex: "A" ‚Üí GradeCategory.A)
    try:
        categorie_enum = getattr(GradeCategory, categorie)
    except AttributeError:
        raise HTTPException(400, f"Cat√©gorie invalide: {categorie}")
    
    grade = GradeComplet(
        code=code,
        libelle=libelle,
        categorie=categorie_enum,
        echelon_min=echelon_min,
        echelon_max=echelon_max
    )
    session.add(grade)
    session.commit()
    session.refresh(grade)
    
    logger.info(f"‚úÖ Grade cr√©√© : {code} - {libelle} par {current_user.email}")
    return {"ok": True, "id": grade.id, "message": "Grade cr√©√© avec succ√®s"}


@router.put("/api/grades/{grade_id}", name="api_update_grade")
def api_update_grade(
    grade_id: int,
    code: str = Form(...),
    libelle: str = Form(...),
    categorie: str = Form(...),
    echelon_min: int = Form(1),
    echelon_max: int = Form(5),
    actif: bool = Form(True),
    session: Session = Depends(get_session),
    current_user: User = Depends(get_current_user)
):
    """Modifier un grade"""
    grade = session.get(GradeComplet, grade_id)
    if not grade:
        raise HTTPException(404, "Grade non trouv√©")
    
    if code != grade.code:
        existing = session.exec(select(GradeComplet).where(GradeComplet.code == code)).first()
        if existing:
            raise HTTPException(400, f"Le code '{code}' existe d√©j√†")
    
    # Convertir la cat√©gorie (ex: "A" ‚Üí GradeCategory.A)
    try:
        categorie_enum = getattr(GradeCategory, categorie)
    except AttributeError:
        raise HTTPException(400, f"Cat√©gorie invalide: {categorie}")
    
    grade.code = code
    grade.libelle = libelle
    grade.categorie = categorie_enum
    grade.echelon_min = echelon_min
    grade.echelon_max = echelon_max
    grade.actif = actif
    grade.updated_at = datetime.utcnow()
    
    session.add(grade)
    session.commit()
    
    logger.info(f"‚úÖ Grade modifi√© : {code} par {current_user.email}")
    return {"ok": True, "message": "Grade modifi√© avec succ√®s"}


@router.post("/api/grades/{grade_id}/reactivate", name="api_reactivate_grade")
def api_reactivate_grade(
    grade_id: int,
    session: Session = Depends(get_session),
    current_user: User = Depends(get_current_user)
):
    """R√©activer un grade d√©sactiv√©"""
    grade = session.get(GradeComplet, grade_id)
    if not grade:
        raise HTTPException(404, "Grade non trouv√©")
    
    grade.actif = True
    grade.updated_at = datetime.utcnow()
    session.add(grade)
    session.commit()
    
    logger.info(f"‚úÖ Grade r√©activ√© : {grade.code} par {current_user.email}")
    return {"ok": True, "message": "Grade r√©activ√© avec succ√®s"}


@router.delete("/api/grades/{grade_id}", name="api_delete_grade")
def api_delete_grade(
    grade_id: int,
    hard_delete: bool = False,
    session: Session = Depends(get_session),
    current_user: User = Depends(get_current_user)
):
    """Supprimer un grade (soft delete par d√©faut, hard delete si hard_delete=true)"""
    grade = session.get(GradeComplet, grade_id)
    if not grade:
        raise HTTPException(404, "Grade non trouv√©")
    
    if hard_delete:
        session.delete(grade)
        session.commit()
        logger.warning(f"üóëÔ∏è Grade SUPPRIM√â D√âFINITIVEMENT : {grade.code} par {current_user.email}")
        return {"ok": True, "message": "Grade supprim√© d√©finitivement"}
    else:
        grade.actif = False
        grade.updated_at = datetime.utcnow()
        session.add(grade)
        session.commit()
        logger.info(f"‚úÖ Grade d√©sactiv√© : {grade.code} par {current_user.email}")
        return {"ok": True, "message": "Grade d√©sactiv√© avec succ√®s"}


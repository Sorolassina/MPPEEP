# docker-compose.prod.yml - Production (PostgreSQL + Nginx + Redis)
# Version obsolète - Docker Compose moderne n'en a plus besoin

services:
  # Application MPPEEP (utilise PostgreSQL local)
  app:
    build:
      context: .
      dockerfile: Dockerfile.prod
    image: mppeep:latest  # 🏷️ Nom de l'image
    container_name: mppeep-app
    environment:
      - DATABASE_URL=postgresql://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD}@host.docker.internal:5432/${POSTGRES_DB:-mppeep}
      - SECRET_KEY=${SECRET_KEY:?SECRET_KEY requis}
      - DEBUG=False
      - APP_NAME=MPPEEP Dashboard
      - APP_VERSION=1.0.0
      - ACCESS_TOKEN_EXPIRE_MINUTES=1440
      - CORS_ORIGINS=["https://mppeep.skpartners.consulting","https://skpartners.consulting"]
      - ENABLE_CLOUDFLARE=True  # Active le middleware Cloudflare
      - ENABLE_FORWARD_PROTO=True  # Détecte HTTPS depuis X-Forwarded-Proto
      - ENABLE_HTTPS_REDIRECT=False  # Cloudflare gère déjà HTTPS
      - ROOT_PATH=/mppeep  # Préfixe si routing par path, ou "" si sous-domaine dédié
    volumes:
      - mppeep-logs:/app/logs
      - mppeep-uploads:/app/static/uploads
    ports:
      - "9000:9000"  # Exposer sur localhost pour Cloudflare Tunnel
    restart: always
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/mppeep/api/v1/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - mppeep-network
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
  # Nginx Reverse Proxy - DÉSACTIVÉ (Cloudflare Tunnel utilisé)
  # ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
  # Avec Cloudflare Tunnel, Nginx n'est plus nécessaire car :
  # - Cloudflare gère le reverse proxy
  # - Cloudflare gère SSL/TLS
  # - Cloudflare gère la compression
  # - Cloudflare sert de CDN pour les fichiers statiques
  # 
  # Pour réactiver Nginx (sans Cloudflare), décommentez ci-dessous :
  # ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
  
  # nginx:
  #   image: nginx:alpine
  #   container_name: mppeep-nginx
  #   depends_on:
  #     - app
  #   ports:
  #     - "80:80"
  #     - "443:443"
  #   volumes:
  #     - ./deploiement_docker/nginx.conf:/etc/nginx/nginx.conf:ro
  #     - ./ssl:/etc/nginx/ssl:ro
  #     - mppeep-uploads:/usr/share/nginx/html/uploads:ro
  #     - ./app/static:/usr/share/nginx/html/static:ro
  #   restart: always
  #   healthcheck:
  #     test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/health"]
  #     interval: 30s
  #     timeout: 10s
  #     retries: 3
  #   networks:
  #     - mppeep-network
  #   logging:
  #     driver: "json-file"
  #     options:
  #       max-size: "10m"
  #       max-file: "3"

  # Redis Cache (optionnel)
  redis:
    image: redis:7-alpine
    container_name: mppeep-redis
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru
    restart: always
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 3
    networks:
      - mppeep-network
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

volumes:
  mppeep-logs:
    driver: local
  mppeep-uploads:
    driver: local
  redis-data:
    driver: local

networks:
  mppeep-network:
    driver: bridge


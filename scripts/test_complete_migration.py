#!/usr/bin/env python3
"""
Test complet du syst√®me de migration avec tous les d√©tails
"""

import os
import sys
from pathlib import Path

# Configuration PostgreSQL
os.environ['DATABASE_URL'] = 'postgresql://mppeepuser:mppeep@localhost:5432/mppeep'

# Ajouter le dossier parent au PYTHONPATH
sys.path.insert(0, str(Path(__file__).parent.parent))

from scripts.migrate_schema import SchemaMigrator

def test_complete_migration_system():
    print("="*70)
    print("üß™ TEST COMPLET DU SYST√àME DE MIGRATION")
    print("="*70)
    
    try:
        migrator = SchemaMigrator()
        
        # 1. Test de connexion
        print("\n1Ô∏è‚É£ Test de connexion √† la base de donn√©es...")
        current_schema = migrator.get_current_schema()
        expected_schema = migrator.get_expected_schema()
        print(f"   ‚úÖ Connexion r√©ussie")
        print(f"   üìä Tables actuelles: {len(current_schema)}")
        print(f"   üìã Tables attendues: {len(expected_schema)}")
        
        # 2. Test de comparaison
        print("\n2Ô∏è‚É£ Test de comparaison des sch√©mas...")
        differences = migrator.compare_schemas(current_schema, expected_schema)
        
        missing_tables = len(differences['missing_tables'])
        missing_columns = sum(len(cols) for cols in differences['missing_columns'].values())
        extra_columns = sum(len(cols) for cols in differences['extra_columns'].values())
        type_changes = sum(len(changes) for changes in differences['type_changes'].values())
        modified_columns = sum(len(changes) for changes in differences['modified_columns'].values())
        
        print(f"   üìã Tables manquantes: {missing_tables}")
        print(f"   ‚ûï Colonnes manquantes: {missing_columns}")
        print(f"   ‚ö†Ô∏è  Colonnes en trop: {extra_columns}")
        print(f"   üîÑ Changements de type: {type_changes}")
        print(f"   üìù Modifications de colonnes: {modified_columns}")
        
        # 3. Test de v√©rification compl√®te
        print("\n3Ô∏è‚É£ Test de v√©rification compl√®te (dry-run)...")
        success = migrator.run_migration_check(dry_run=True)
        
        if success:
            print("   ‚úÖ V√©rification r√©ussie - Aucune migration n√©cessaire")
        else:
            print("   ‚ö†Ô∏è  Des migrations sont n√©cessaires")
        
        # 4. R√©sum√© final
        print("\n4Ô∏è‚É£ R√©sum√© final:")
        if missing_tables == 0 and missing_columns == 0 and extra_columns == 0:
            print("   üéâ PARFAIT: Base de donn√©es parfaitement synchronis√©e!")
            print("   ‚úÖ Toutes les tables des mod√®les existent")
            print("   ‚úÖ Toutes les colonnes des mod√®les existent")
            print("   ‚úÖ Aucune diff√©rence d√©tect√©e")
        else:
            print("   ‚ö†Ô∏è  Diff√©rences d√©tect√©es:")
            if missing_tables > 0:
                print(f"      - {missing_tables} table(s) manquante(s)")
            if missing_columns > 0:
                print(f"      - {missing_columns} colonne(s) manquante(s)")
            if extra_columns > 0:
                print(f"      - {extra_columns} colonne(s) en trop")
        
        print("\n" + "="*70)
        print("‚úÖ TEST TERMIN√â AVEC SUCC√àS!")
        print("="*70)
        
        return True
        
    except Exception as e:
        print(f"\n‚ùå ERREUR: {e}")
        import traceback
        traceback.print_exc()
        return False

def main():
    success = test_complete_migration_system()
    sys.exit(0 if success else 1)

if __name__ == "__main__":
    main()

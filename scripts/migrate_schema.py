"""
Script de migration du sch√©ma de base de donn√©es
D√©tecte et applique les modifications de structure des tables
"""

import sys
from pathlib import Path
from typing import Dict, List, Set, Tuple
from datetime import datetime

# Ajouter le dossier parent au PYTHONPATH
sys.path.insert(0, str(Path(__file__).parent.parent))

from sqlalchemy import inspect, text, MetaData, create_engine
from sqlalchemy.exc import OperationalError
from sqlmodel import SQLModel, Session
from app.core.logging_config import get_logger
from app.core.config import settings

# Importer tous les mod√®les pour charger les m√©tadonn√©es
from app.models import *

logger = get_logger(__name__)

class SchemaMigrator:
    """Gestionnaire de migration du sch√©ma de base de donn√©es"""
    
    def __init__(self):
        # Cr√©er l'engine avec gestion d'erreur
        try:
            self.engine = create_engine(
                settings.database_url,
                echo=False,
                pool_pre_ping=True
            )
            self.inspector = inspect(self.engine)
            self.metadata = MetaData()
        except Exception as e:
            logger.error(f"‚ùå Erreur de connexion √† la base de donn√©es: {e}")
            logger.error(f"   URL: {settings.database_url}")
            logger.error(f"   DEBUG mode: {settings.DEBUG}")
            raise
        
    def get_current_schema(self) -> Dict[str, Dict]:
        """
        R√©cup√®re le sch√©ma actuel de la base de donn√©es
        
        Returns:
            Dict avec structure: {table_name: {column_name: column_info}}
        """
        try:
            current_schema = {}
            
            # R√©cup√©rer toutes les tables existantes
            existing_tables = self.inspector.get_table_names()
            
            for table_name in existing_tables:
                # R√©cup√©rer les colonnes de chaque table
                columns = self.inspector.get_columns(table_name)
                current_schema[table_name] = {
                    col['name']: {
                        'type': str(col['type']),
                        'nullable': col['nullable'],
                        'default': col['default'],
                        'primary_key': col.get('primary_key', False)
                    }
                    for col in columns
                }
            
            logger.info(f"üìä Sch√©ma actuel r√©cup√©r√©: {len(existing_tables)} tables")
            return current_schema
            
        except Exception as e:
            logger.error(f"‚ùå Erreur lors de la r√©cup√©ration du sch√©ma: {e}")
            return {}
    
    def get_expected_schema(self) -> Dict[str, Dict]:
        """
        R√©cup√®re le sch√©ma attendu bas√© sur les mod√®les SQLModel
        
        Returns:
            Dict avec structure: {table_name: {column_name: column_info}}
        """
        try:
            expected_schema = {}
            
            # Inspecter directement les m√©tadonn√©es SQLModel sans cr√©er les tables
            for table_name, table in SQLModel.metadata.tables.items():
                expected_schema[table_name] = {}
                
                for column in table.columns:
                    expected_schema[table_name][column.name] = {
                        'type': str(column.type),
                        'nullable': column.nullable,
                        'default': column.default.arg if column.default else None,
                        'primary_key': column.primary_key
                    }
            
            logger.info(f"üìã Sch√©ma attendu g√©n√©r√©: {len(expected_schema)} tables")
            return expected_schema
            
        except Exception as e:
            logger.error(f"‚ùå Erreur lors de la g√©n√©ration du sch√©ma attendu: {e}")
            return {}
    
    def compare_schemas(self, current: Dict, expected: Dict) -> Dict:
        """
        Compare les sch√©mas actuel et attendu
        
        Args:
            current: Sch√©ma actuel de la DB
            expected: Sch√©ma attendu des mod√®les
            
        Returns:
            Dict avec les diff√©rences d√©tect√©es
        """
        differences = {
            'missing_tables': [],
            'extra_tables': [],
            'missing_columns': {},
            'extra_columns': {},
            'modified_columns': {},
            'type_changes': {}
        }
        
        # Tables manquantes
        for table_name in expected:
            if table_name not in current:
                differences['missing_tables'].append(table_name)
        
        # Tables en trop
        for table_name in current:
            if table_name not in expected:
                differences['extra_tables'].append(table_name)
        
        # Comparer les colonnes pour chaque table commune
        for table_name in expected:
            if table_name in current:
                current_cols = current[table_name]
                expected_cols = expected[table_name]
                
                # Colonnes manquantes
                missing_cols = []
                for col_name in expected_cols:
                    if col_name not in current_cols:
                        missing_cols.append(col_name)
                
                if missing_cols:
                    differences['missing_columns'][table_name] = missing_cols
                
                # Colonnes en trop
                extra_cols = []
                for col_name in current_cols:
                    if col_name not in expected_cols:
                        extra_cols.append(col_name)
                
                if extra_cols:
                    differences['extra_columns'][table_name] = extra_cols
                
                # Modifications de colonnes existantes
                for col_name in expected_cols:
                    if col_name in current_cols:
                        current_col = current_cols[col_name]
                        expected_col = expected_cols[col_name]
                        
                        # V√©rifier les changements de type
                        if current_col['type'] != expected_col['type']:
                            if table_name not in differences['type_changes']:
                                differences['type_changes'][table_name] = {}
                            differences['type_changes'][table_name][col_name] = {
                                'current': current_col['type'],
                                'expected': expected_col['type']
                            }
                        
                        # V√©rifier les changements de nullable
                        if current_col['nullable'] != expected_col['nullable']:
                            if table_name not in differences['modified_columns']:
                                differences['modified_columns'][table_name] = {}
                            if col_name not in differences['modified_columns'][table_name]:
                                differences['modified_columns'][table_name][col_name] = {}
                            differences['modified_columns'][table_name][col_name]['nullable'] = {
                                'current': current_col['nullable'],
                                'expected': expected_col['nullable']
                            }
        
        return differences
    
    def apply_migrations(self, differences: Dict, dry_run: bool = True) -> bool:
        """
        Applique les migrations d√©tect√©es
        
        Args:
            differences: Diff√©rences d√©tect√©es par compare_schemas
            dry_run: Si True, affiche seulement ce qui serait fait
            
        Returns:
            True si succ√®s, False sinon
        """
        try:
            with Session(self.engine) as session:
                # Tables manquantes
                if differences['missing_tables']:
                    logger.info(f"üìã Tables manquantes: {differences['missing_tables']}")
                    if not dry_run:
                        # Cr√©er les tables manquantes
                        SQLModel.metadata.create_all(self.engine, checkfirst=True)
                        logger.info("‚úÖ Tables manquantes cr√©√©es")
                
                # Colonnes manquantes
                for table_name, missing_cols in differences['missing_columns'].items():
                    logger.info(f"üìã Colonnes manquantes dans {table_name}: {missing_cols}")
                    if not dry_run:
                        for col_name in missing_cols:
                            # R√©cup√©rer la d√©finition de la colonne depuis les m√©tadonn√©es
                            table = SQLModel.metadata.tables[table_name]
                            column = table.columns[col_name]
                            
                            # G√©n√©rer l'ALTER TABLE
                            alter_sql = f"ALTER TABLE {table_name} ADD COLUMN {col_name} {column.type}"
                            if not column.nullable:
                                alter_sql += " NOT NULL"
                            if column.default is not None:
                                alter_sql += f" DEFAULT {column.default}"
                            
                            try:
                                session.execute(text(alter_sql))
                                logger.info(f"‚úÖ Colonne {col_name} ajout√©e √† {table_name}")
                            except Exception as e:
                                logger.error(f"‚ùå Erreur ajout colonne {col_name}: {e}")
                
                # Colonnes en trop (optionnel - g√©n√©ralement on ne les supprime pas)
                if differences['extra_columns']:
                    logger.warning("‚ö†Ô∏è  Colonnes en trop d√©tect√©es (non supprim√©es pour s√©curit√©):")
                    for table_name, extra_cols in differences['extra_columns'].items():
                        logger.warning(f"   {table_name}: {extra_cols}")
                
                # Changements de type (attention - peut causer des pertes de donn√©es)
                if differences['type_changes']:
                    logger.warning("‚ö†Ô∏è  Changements de type d√©tect√©s (non appliqu√©s pour s√©curit√©):")
                    for table_name, changes in differences['type_changes'].items():
                        for col_name, change_info in changes.items():
                            logger.warning(f"   {table_name}.{col_name}: {change_info['current']} ‚Üí {change_info['expected']}")
                
                if not dry_run:
                    session.commit()
                    logger.info("‚úÖ Migrations appliqu√©es avec succ√®s")
                
                return True
                
        except Exception as e:
            logger.error(f"‚ùå Erreur lors de l'application des migrations: {e}")
            return False
    
    def run_migration_check(self, dry_run: bool = True) -> bool:
        """
        Ex√©cute une v√©rification compl√®te des migrations
        
        Args:
            dry_run: Si True, affiche seulement les diff√©rences sans les appliquer
            
        Returns:
            True si pas de migration n√©cessaire ou succ√®s, False sinon
        """
        logger.info("\n" + "="*60)
        logger.info("üîç V√©rification des migrations de sch√©ma...")
        logger.info("="*60)
        
        # R√©cup√©rer les sch√©mas
        current_schema = self.get_current_schema()
        expected_schema = self.get_expected_schema()
        
        if not current_schema or not expected_schema:
            logger.error("‚ùå Impossible de r√©cup√©rer les sch√©mas")
            return False
        
        # Comparer les sch√©mas
        differences = self.compare_schemas(current_schema, expected_schema)
        
        # V√©rifier s'il y a des diff√©rences
        has_differences = any([
            differences['missing_tables'],
            differences['missing_columns'],
            differences['extra_columns'],
            differences['modified_columns'],
            differences['type_changes']
        ])
        
        if not has_differences:
            logger.info("‚úÖ Aucune migration n√©cessaire - Sch√©ma √† jour")
            return True
        
        # Afficher les diff√©rences
        logger.info("üìä Diff√©rences d√©tect√©es:")
        
        if differences['missing_tables']:
            logger.info(f"   üìã Tables manquantes: {differences['missing_tables']}")
        
        if differences['missing_columns']:
            logger.info("   üìã Colonnes manquantes:")
            for table, cols in differences['missing_columns'].items():
                logger.info(f"      {table}: {cols}")
        
        if differences['extra_columns']:
            logger.info("   üìã Colonnes en trop:")
            for table, cols in differences['extra_columns'].items():
                logger.info(f"      {table}: {cols}")
        
        if differences['type_changes']:
            logger.info("   üìã Changements de type:")
            for table, changes in differences['type_changes'].items():
                for col, change in changes.items():
                    logger.info(f"      {table}.{col}: {change['current']} ‚Üí {change['expected']}")
        
        if differences['modified_columns']:
            logger.info("   üìã Modifications de colonnes:")
            for table, changes in differences['modified_columns'].items():
                for col, change in changes.items():
                    logger.info(f"      {table}.{col}: {change}")
        
        # Appliquer les migrations si demand√©
        if not dry_run:
            logger.info("\nüîÑ Application des migrations...")
            return self.apply_migrations(differences, dry_run=False)
        else:
            logger.info("\nüí° Mode dry-run activ√© - Aucune modification appliqu√©e")
            logger.info("   Pour appliquer les migrations: python scripts/migrate_schema.py --apply")
            return True

def main():
    """Point d'entr√©e principal"""
    import argparse
    
    parser = argparse.ArgumentParser(description="V√©rification et migration du sch√©ma de base de donn√©es")
    parser.add_argument("--apply", action="store_true", help="Appliquer les migrations (par d√©faut: dry-run)")
    parser.add_argument("--check-only", action="store_true", help="V√©rification seulement (pas d'application)")
    
    args = parser.parse_args()
    
    # D√©terminer le mode
    dry_run = not args.apply and not args.check_only
    
    migrator = SchemaMigrator()
    success = migrator.run_migration_check(dry_run=dry_run)
    
    if success:
        logger.info("‚úÖ V√©rification termin√©e avec succ√®s")
        sys.exit(0)
    else:
        logger.error("‚ùå Erreur lors de la v√©rification")
        sys.exit(1)

if __name__ == "__main__":
    main()

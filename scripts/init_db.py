"""
Script d'initialisation de la base de donn√©es et de l'utilisateur admin
Ex√©cut√© automatiquement au d√©marrage de l'application
"""
import sys
from pathlib import Path

# Ajouter le dossier parent au PYTHONPATH
sys.path.insert(0, str(Path(__file__).parent.parent))

from app.db.session import engine, init_db
from app.models.user import User
from app.models.system_settings import SystemSettings
from app.models.activity import Activity
from app.models.file import File  # Import du mod√®le File pour cr√©er la table
from app.models.personnel import Programme, Direction, Service, GradeComplet
from app.core.config import settings
from app.services.user_service import UserService
from app.services.system_settings_service import SystemSettingsService
from app.core.enums import UserType, GradeCategory
from app.core.logging_config import get_logger
from sqlmodel import SQLModel, Session, select

# Logger pour ce script
logger = get_logger(__name__)

def create_database_if_not_exists():
    """
    Cr√©e la base de donn√©es PostgreSQL si elle n'existe pas
    (Pour SQLite, le fichier est cr√©√© automatiquement)
    """
    # Si c'est SQLite, rien √† faire
    if "sqlite" in settings.database_url.lower():
        logger.info("üìÅ SQLite: Le fichier sera cr√©√© automatiquement")
        return True
    
    # Pour PostgreSQL, v√©rifier et cr√©er la base si n√©cessaire
    if "postgresql" in settings.database_url.lower():
        try:
            from sqlalchemy import create_engine, text
            from sqlalchemy.exc import OperationalError, ProgrammingError
            
            # Construire l'URL de connexion au serveur (sans le nom de la DB)
            db_parts = settings.database_url.rsplit('/', 1)
            server_url = db_parts[0] + '/postgres'  # Connexion √† la base par d√©faut
            db_name = settings.POSTGRES_DB
            
            # Tester la connexion au serveur PostgreSQL
            try:
                test_engine = create_engine(server_url)
                with test_engine.connect() as conn:
                    # V√©rifier si la base existe
                    result = conn.execute(
                        text(f"SELECT 1 FROM pg_database WHERE datname = '{db_name}'")
                    )
                    exists = result.fetchone() is not None
                    
                    if exists:
                        logger.info(f"‚úÖ Base de donn√©es PostgreSQL '{db_name}' existe d√©j√†")
                    else:
                        logger.info(f"üì¶ Cr√©ation de la base de donn√©es PostgreSQL '{db_name}'...")
                        # Fermer la transaction actuelle
                        conn.execute(text("COMMIT"))
                        # Cr√©er la base
                        conn.execute(text(f"CREATE DATABASE {db_name}"))
                        logger.info(f"‚úÖ Base de donn√©es '{db_name}' cr√©√©e avec succ√®s")
                
                test_engine.dispose()
                return True
                
            except OperationalError as e:
                logger.error(f"‚ùå Impossible de se connecter au serveur PostgreSQL: {e}")
                logger.error(f"   V√©rifiez que PostgreSQL est d√©marr√© et accessible")
                return False
                
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è  Erreur lors de la v√©rification de la base PostgreSQL: {e}")
            logger.warning(f"   La base '{settings.POSTGRES_DB}' doit exister manuellement")
            return True  # Continue quand m√™me
    
    return True

def create_tables():
    """Cr√©e toutes les tables de la base de donn√©es"""
    try:
        SQLModel.metadata.create_all(engine)
        logger.info("‚úÖ Tables de la base de donn√©es cr√©√©es/v√©rifi√©es")
        return True
    except Exception as e:
        logger.error(f"‚ùå Erreur lors de la cr√©ation des tables: {e}", exc_info=True)
        return False

def initialize_system_settings():
    """Initialise les param√®tres syst√®me par d√©faut"""
    try:
        with Session(engine) as session:
            settings = SystemSettingsService.get_settings(session)
            logger.info(f"‚úÖ Param√®tres syst√®me initialis√©s/v√©rifi√©s")
            logger.info(f"   Entreprise: {settings.company_name}")
            return True
    except Exception as e:
        logger.error(f"‚ùå Erreur initialisation param√®tres syst√®me: {e}")
        return False

def initialize_personnel_data():
    """Initialise les donn√©es de r√©f√©rence du personnel (programmes, directions, services, grades)"""
    try:
        with Session(engine) as session:
            # V√©rifier si les donn√©es existent d√©j√†
            existing_programmes = session.exec(select(Programme)).first()
            if existing_programmes:
                logger.info("‚ÑπÔ∏è  Donn√©es de r√©f√©rence du personnel d√©j√† initialis√©es")
                return True
            
            logger.info("üìã Initialisation des donn√©es de r√©f√©rence du personnel...")
            
            # Programmes
            programmes_data = [
                {"code": "P01", "libelle": "Pilotage et Soutien Institutionnel", "description": "Programme de pilotage"},
                {"code": "P02", "libelle": "Gestion du Portefeuille de l'√âtat", "description": "Gestion des participations"},
                {"code": "P03", "libelle": "Gestion du Patrimoine de l'√âtat", "description": "Gestion du patrimoine"},
            ]
            for prog_data in programmes_data:
                prog = Programme(**prog_data)
                session.add(prog)
            session.commit()
            logger.info("‚úÖ 3 Programmes cr√©√©s")
            
            # Directions
            programmes = {p.code: p for p in session.exec(select(Programme)).all()}
            directions_data = [
                {"code": "DG", "libelle": "Direction G√©n√©rale", "programme_id": programmes["P01"].id},
                {"code": "DAF", "libelle": "Direction Administrative et Financi√®re", "programme_id": programmes["P01"].id},
                {"code": "DRH", "libelle": "Direction des Ressources Humaines", "programme_id": programmes["P01"].id},
                {"code": "DPE", "libelle": "Direction du Portefeuille de l'√âtat", "programme_id": programmes["P02"].id},
                {"code": "DPAT", "libelle": "Direction du Patrimoine de l'√âtat", "programme_id": programmes["P03"].id},
            ]
            for dir_data in directions_data:
                direction = Direction(**dir_data)
                session.add(direction)
            session.commit()
            logger.info("‚úÖ 5 Directions cr√©√©es")
            
            # Services
            directions = {d.code: d for d in session.exec(select(Direction)).all()}
            services_data = [
                {"code": "SCPT", "libelle": "Service Comptabilit√©", "direction_id": directions["DAF"].id},
                {"code": "SBUD", "libelle": "Service Budget", "direction_id": directions["DAF"].id},
                {"code": "SAPV", "libelle": "Service Approvisionnement", "direction_id": directions["DAF"].id},
                {"code": "SCAR", "libelle": "Service Carri√®re", "direction_id": directions["DRH"].id},
                {"code": "SPAY", "libelle": "Service Paie", "direction_id": directions["DRH"].id},
                {"code": "SFOR", "libelle": "Service Formation", "direction_id": directions["DRH"].id},
                {"code": "SPAR", "libelle": "Service Participations", "direction_id": directions["DPE"].id},
                {"code": "SETU", "libelle": "Service √âtudes", "direction_id": directions["DPE"].id},
                {"code": "SGIM", "libelle": "Service Gestion Immobili√®re", "direction_id": directions["DPAT"].id},
                {"code": "SINV", "libelle": "Service Inventaire", "direction_id": directions["DPAT"].id},
            ]
            for serv_data in services_data:
                service = Service(**serv_data)
                session.add(service)
            session.commit()
            logger.info("‚úÖ 10 Services cr√©√©s")
            
            # Grades
            grades_data = [
                {"code": "A1", "libelle": "Administrateur Civil", "categorie": GradeCategory.A, "echelon_min": 1, "echelon_max": 7},
                {"code": "A2", "libelle": "Attach√© d'Administration", "categorie": GradeCategory.A, "echelon_min": 1, "echelon_max": 6},
                {"code": "A3", "libelle": "Secr√©taire d'Administration", "categorie": GradeCategory.A, "echelon_min": 1, "echelon_max": 5},
                {"code": "B1", "libelle": "Contr√¥leur des Services Administratifs", "categorie": GradeCategory.B, "echelon_min": 1, "echelon_max": 6},
                {"code": "B2", "libelle": "Contr√¥leur du Tr√©sor", "categorie": GradeCategory.B, "echelon_min": 1, "echelon_max": 5},
                {"code": "B3", "libelle": "Secr√©taire d'Administration", "categorie": GradeCategory.B, "echelon_min": 1, "echelon_max": 5},
                {"code": "C1", "libelle": "Commis des Services Administratifs", "categorie": GradeCategory.C, "echelon_min": 1, "echelon_max": 5},
                {"code": "C2", "libelle": "Agent Administratif", "categorie": GradeCategory.C, "echelon_min": 1, "echelon_max": 4},
                {"code": "C3", "libelle": "Aide Administratif", "categorie": GradeCategory.C, "echelon_min": 1, "echelon_max": 3},
                {"code": "D1", "libelle": "Agent de Bureau", "categorie": GradeCategory.D, "echelon_min": 1, "echelon_max": 4},
                {"code": "D2", "libelle": "Homme de Service", "categorie": GradeCategory.D, "echelon_min": 1, "echelon_max": 3},
            ]
            for grade_data in grades_data:
                grade = GradeComplet(**grade_data)
                session.add(grade)
            session.commit()
            logger.info("‚úÖ 11 Grades cr√©√©s")
            
            logger.info("üéâ Donn√©es de r√©f√©rence du personnel initialis√©es avec succ√®s !")
            return True
            
    except Exception as e:
        logger.error(f"‚ùå Erreur initialisation donn√©es personnel: {e}", exc_info=True)
        return False

def create_admin_user():
    """Cr√©e l'utilisateur admin par d√©faut SI aucun admin n'existe"""
    try:
        with Session(engine) as session:
            # V√©rifier si un ADMIN existe d√©j√† (nouvelle logique)
            admin_count = UserService.get_admin_count(session)
            
            if admin_count > 0:
                logger.info(f"‚ÑπÔ∏è  {admin_count} administrateur(s) trouv√©(s) - Pas de cr√©ation n√©cessaire")
                return True
            
            # V√©rifier le total d'utilisateurs (pour info)
            user_count = UserService.count_users(session)
            if user_count > 0:
                logger.info(f"‚ÑπÔ∏è  {user_count} utilisateur(s) trouv√©(s) mais aucun admin")
                logger.info(f"üì¶ Cr√©ation de l'admin par d√©faut...")
            
            # Aucun admin n'existe, cr√©er l'admin par d√©faut
            admin_email = "admin@mppeep.com"
            admin_password = "admin123"
            
            # Utiliser le service pour cr√©er l'admin avec type_user=ADMIN
            admin = UserService.create_user(
                session=session,
                email=admin_email,
                full_name="Administrateur MPPEEP",
                password=admin_password,
                is_active=True,
                is_superuser=True,
                type_user=UserType.ADMIN  # Type admin explicite
            )
            
            if admin:
                logger.info("\n" + "="*50)
                logger.info("‚úÖ ADMINISTRATEUR CR√â√â")
                logger.info("="*50)
                logger.info(f"üìß Email      : {admin_email}")
                logger.info(f"üîë Password   : {admin_password}")
                logger.info(f"üÜî ID         : {admin.id}")
                logger.info(f"üëë Type       : {admin.type_user}")
                logger.info(f"‚úì  Superuser  : {admin.is_superuser}")
                logger.info("="*50)
                logger.warning("‚ö†Ô∏è  IMPORTANT: Changez ce mot de passe en production!")
                logger.info("="*50 + "\n")
                return True
            else:
                logger.error("‚ùå Impossible de cr√©er l'admin")
                return False
                
    except Exception as e:
        logger.error(f"‚ùå Erreur lors de la cr√©ation de l'admin: {e}", exc_info=True)
        return False

def initialize_database():
    """
    Initialise la base de donn√©es compl√®te :
    0. Cr√©e la base de donn√©es PostgreSQL si n√©cessaire
    1. Cr√©e les tables si elles n'existent pas
    2. Initialise les param√®tres syst√®me
    3. Initialise les donn√©es de r√©f√©rence du personnel
    4. Cr√©e l'utilisateur admin si aucun utilisateur n'existe
    """
    logger.info("\n" + "="*60)
    logger.info("üöÄ Initialisation de la base de donn√©es...")
    logger.info("="*60)
    logger.info(f"üìÇ Type: {'SQLite' if 'sqlite' in settings.database_url else 'PostgreSQL'}")
    logger.info(f"üìÇ URL: {settings.database_url}")
    logger.info("-" * 60)
    
    # √âtape 0: Cr√©er la base PostgreSQL si n√©cessaire
    if not create_database_if_not_exists():
        logger.error("‚ùå √âchec de la cr√©ation/v√©rification de la base de donn√©es")
        return False
    
    # √âtape 1: Cr√©er les tables
    if not create_tables():
        logger.error("‚ùå √âchec de l'initialisation des tables")
        return False
    
    # √âtape 2: Initialiser les param√®tres syst√®me
    if not initialize_system_settings():
        logger.error("‚ùå √âchec de l'initialisation des param√®tres syst√®me")
        return False
    
    # √âtape 3: Initialiser les donn√©es de r√©f√©rence du personnel
    if not initialize_personnel_data():
        logger.error("‚ùå √âchec de l'initialisation des donn√©es de r√©f√©rence")
        return False
    
    # √âtape 4: Cr√©er l'admin si besoin
    if not create_admin_user():
        logger.error("‚ùå √âchec de la cr√©ation de l'utilisateur admin")
        return False
    
    logger.info("‚úÖ Initialisation termin√©e avec succ√®s!")
    logger.info("="*60 + "\n")
    return True

if __name__ == "__main__":
    # Permet d'ex√©cuter le script manuellement
    success = initialize_database()
    sys.exit(0 if success else 1)

